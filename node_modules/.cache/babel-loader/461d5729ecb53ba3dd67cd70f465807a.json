{"ast":null,"code":"export function defer() {\n  var resolve, reject;\n  var promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n\n  return {\n    promise: promise,\n    resolve: resolve,\n    reject: reject\n  };\n} // TODO use bip32-path library\n\nexport function splitPath(path) {\n  var result = [];\n  var components = path.split(\"/\");\n  components.forEach(function (element) {\n    var number = parseInt(element, 10);\n\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n\n    result.push(number);\n  });\n  return result;\n} // TODO use async await\n\nexport function eachSeries(arr, fun) {\n  return arr.reduce(function (p, e) {\n    return p.then(function () {\n      return fun(e);\n    });\n  }, Promise.resolve());\n}\nexport function foreach(arr, callback) {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else return callback(array[index], index).then(function (res) {\n      result.push(res);\n      return iterate(index + 1, array, result);\n    });\n  }\n\n  return Promise.resolve().then(function () {\n    return iterate(0, arr, []);\n  });\n}\nexport function doIf(condition, callback) {\n  return Promise.resolve().then(function () {\n    if (condition) {\n      return callback();\n    }\n  });\n}\nexport function asyncWhile(predicate, callback) {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(function (res) {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n\n  return Promise.resolve([]).then(iterate);\n}","map":{"version":3,"mappings":"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","names":["defer","resolve","reject","promise","Promise","success","failure","splitPath","path","result","components","split","forEach","element","number","parseInt","isNaN","length","push","eachSeries","arr","fun","reduce","p","e","then","foreach","callback","iterate","index","array","res","doIf","condition","asyncWhile","predicate"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}