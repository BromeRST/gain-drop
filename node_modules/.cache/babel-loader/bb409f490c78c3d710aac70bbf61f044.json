{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverTypedSignature_v4 = exports.recoverTypedSignature = exports.signTypedData_v4 = exports.signTypedData = exports.recoverTypedMessage = exports.signTypedMessage = exports.getEncryptionPublicKey = exports.decryptSafely = exports.decrypt = exports.encryptSafely = exports.encrypt = exports.recoverTypedSignatureLegacy = exports.signTypedDataLegacy = exports.typedSignatureHash = exports.extractPublicKey = exports.recoverPersonalSignature = exports.personalSign = exports.normalize = exports.concatSig = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = void 0;\n\nconst ethUtil = __importStar(require(\"ethereumjs-util\"));\n\nconst ethAbi = __importStar(require(\"ethereumjs-abi\"));\n\nconst nacl = __importStar(require(\"tweetnacl\"));\n\nconst naclUtil = __importStar(require(\"tweetnacl-util\"));\n\nconst TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\nexports.TYPED_MESSAGE_SCHEMA = TYPED_MESSAGE_SCHEMA;\n/**\n * A collection of utility functions used for signing typed data\n */\n\nconst TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Encoded representation of an object\n   */\n  encodeData(primaryType, data, types) {\n    let useV4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const encodedTypes = ['bytes32'];\n    const encodedValues = [this.hashType(primaryType, types)];\n\n    if (useV4) {\n      const encodeField = (name, type, value) => {\n        if (types[type] !== undefined) {\n          return ['bytes32', value == null // eslint-disable-line no-eq-null\n          ? '0x0000000000000000000000000000000000000000000000000000000000000000' : ethUtil.keccak(this.encodeData(type, value, types, useV4))];\n        }\n\n        if (value === undefined) {\n          throw new Error(`missing value for field ${name} of type ${type}`);\n        }\n\n        if (type === 'bytes') {\n          return ['bytes32', ethUtil.keccak(value)];\n        }\n\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8');\n          }\n\n          return ['bytes32', ethUtil.keccak(value)];\n        }\n\n        if (type.lastIndexOf(']') === type.length - 1) {\n          const parsedType = type.slice(0, type.lastIndexOf('['));\n          const typeValuePairs = value.map(item => encodeField(name, parsedType, item));\n          return ['bytes32', ethUtil.keccak(ethAbi.rawEncode(typeValuePairs.map(_ref => {\n            let [t] = _ref;\n            return t;\n          }), typeValuePairs.map(_ref2 => {\n            let [, v] = _ref2;\n            return v;\n          })))];\n        }\n\n        return [type, value];\n      };\n\n      for (const field of types[primaryType]) {\n        const [type, value] = encodeField(field.name, field.type, data[field.name]);\n        encodedTypes.push(type);\n        encodedValues.push(value);\n      }\n    } else {\n      for (const field of types[primaryType]) {\n        let value = data[field.name];\n\n        if (value !== undefined) {\n          if (field.type === 'bytes') {\n            encodedTypes.push('bytes32');\n            value = ethUtil.keccak(value);\n            encodedValues.push(value);\n          } else if (field.type === 'string') {\n            encodedTypes.push('bytes32'); // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n\n            if (typeof value === 'string') {\n              value = Buffer.from(value, 'utf8');\n            }\n\n            value = ethUtil.keccak(value);\n            encodedValues.push(value);\n          } else if (types[field.type] !== undefined) {\n            encodedTypes.push('bytes32');\n            value = ethUtil.keccak(this.encodeData(field.type, value, types, useV4));\n            encodedValues.push(value);\n          } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n            throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n          } else {\n            encodedTypes.push(field.type);\n            encodedValues.push(value);\n          }\n        }\n      }\n    }\n\n    return ethAbi.rawEncode(encodedTypes, encodedValues);\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType(primaryType, types) {\n    let result = '';\n    let deps = this.findTypeDependencies(primaryType, types).filter(dep => dep !== primaryType);\n    deps = [primaryType].concat(deps.sort());\n\n    for (const type of deps) {\n      const children = types[type];\n\n      if (!children) {\n        throw new Error(`No type definition specified: ${type}`);\n      }\n\n      result += `${type}(${types[type].map(_ref3 => {\n        let {\n          name,\n          type: t\n        } = _ref3;\n        return `${t} ${name}`;\n      }).join(',')})`;\n    }\n\n    return result;\n  },\n\n  /**\n   * Finds all types within a type definition object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies(primaryType, types) {\n    let results = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    [primaryType] = primaryType.match(/^\\w*/u);\n\n    if (results.includes(primaryType) || types[primaryType] === undefined) {\n      return results;\n    }\n\n    results.push(primaryType);\n\n    for (const field of types[primaryType]) {\n      for (const dep of this.findTypeDependencies(field.type, types, results)) {\n        !results.includes(dep) && results.push(dep);\n      }\n    }\n\n    return results;\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Hash of an object\n   */\n  hashStruct(primaryType, data, types) {\n    let useV4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return ethUtil.keccak(this.encodeData(primaryType, data, types, useV4));\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Hash of an object\n   */\n  hashType(primaryType, types) {\n    return ethUtil.keccak(this.encodeType(primaryType, types));\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData(data) {\n    const sanitizedData = {};\n\n    for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n      if (data[key]) {\n        sanitizedData[key] = data[key];\n      }\n    }\n\n    if ('types' in sanitizedData) {\n      sanitizedData.types = Object.assign({\n        EIP712Domain: []\n      }, sanitizedData.types);\n    }\n\n    return sanitizedData;\n  },\n\n  /**\n   * Signs a typed message as per EIP-712 and returns its keccak hash\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {Buffer} - keccak hash of the resulting signed message\n   */\n  sign(typedData) {\n    let useV4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const sanitizedData = this.sanitizeData(typedData);\n    const parts = [Buffer.from('1901', 'hex')];\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));\n\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));\n    }\n\n    return ethUtil.keccak(Buffer.concat(parts));\n  }\n\n};\nexports.TypedDataUtils = TypedDataUtils;\n\nfunction concatSig(v, r, s) {\n  const rSig = ethUtil.fromSigned(r);\n  const sSig = ethUtil.fromSigned(s);\n  const vSig = ethUtil.bufferToInt(v);\n  const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);\n  const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);\n  const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n  return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');\n}\n\nexports.concatSig = concatSig;\n\nfunction normalize(input) {\n  if (!input) {\n    return undefined;\n  }\n\n  if (typeof input === 'number') {\n    const buffer = ethUtil.toBuffer(input);\n    input = ethUtil.bufferToHex(buffer);\n  }\n\n  if (typeof input !== 'string') {\n    let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += ` received ${typeof input}: ${input}`;\n    throw new Error(msg);\n  }\n\n  return ethUtil.addHexPrefix(input.toLowerCase());\n}\n\nexports.normalize = normalize;\n\nfunction personalSign(privateKey, msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data);\n  const msgHash = ethUtil.hashPersonalMessage(message);\n  const sig = ethUtil.ecsign(msgHash, privateKey);\n  const serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n  return serialized;\n}\n\nexports.personalSign = personalSign;\n\nfunction recoverPersonalSignature(msgParams) {\n  const publicKey = getPublicKeyFor(msgParams);\n  const sender = ethUtil.publicToAddress(publicKey);\n  const senderHex = ethUtil.bufferToHex(sender);\n  return senderHex;\n}\n\nexports.recoverPersonalSignature = recoverPersonalSignature;\n\nfunction extractPublicKey(msgParams) {\n  const publicKey = getPublicKeyFor(msgParams);\n  return `0x${publicKey.toString('hex')}`;\n}\n\nexports.extractPublicKey = extractPublicKey;\n\nfunction externalTypedSignatureHash(typedData) {\n  const hashBuffer = typedSignatureHash(typedData);\n  return ethUtil.bufferToHex(hashBuffer);\n}\n\nexports.typedSignatureHash = externalTypedSignatureHash;\n\nfunction signTypedDataLegacy(privateKey, msgParams) {\n  const msgHash = typedSignatureHash(msgParams.data);\n  const sig = ethUtil.ecsign(msgHash, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\n\nexports.signTypedDataLegacy = signTypedDataLegacy;\n\nfunction recoverTypedSignatureLegacy(msgParams) {\n  const msgHash = typedSignatureHash(msgParams.data);\n  const publicKey = recoverPublicKey(msgHash, msgParams.sig);\n  const sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\n\nexports.recoverTypedSignatureLegacy = recoverTypedSignatureLegacy;\n\nfunction encrypt(receiverPublicKey, msgParams, version) {\n  switch (version) {\n    case 'x25519-xsalsa20-poly1305':\n      {\n        if (typeof msgParams.data !== 'string') {\n          throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ');\n        } // generate ephemeral keypair\n\n\n        const ephemeralKeyPair = nacl.box.keyPair(); // assemble encryption parameters - from string to UInt8\n\n        let pubKeyUInt8Array;\n\n        try {\n          pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey);\n        } catch (err) {\n          throw new Error('Bad public key');\n        }\n\n        const msgParamsUInt8Array = naclUtil.decodeUTF8(msgParams.data);\n        const nonce = nacl.randomBytes(nacl.box.nonceLength); // encrypt\n\n        const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey); // handle encrypted data\n\n        const output = {\n          version: 'x25519-xsalsa20-poly1305',\n          nonce: naclUtil.encodeBase64(nonce),\n          ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n          ciphertext: naclUtil.encodeBase64(encryptedMessage)\n        }; // return encrypted msg data\n\n        return output;\n      }\n\n    default:\n      throw new Error('Encryption type/version not supported');\n  }\n}\n\nexports.encrypt = encrypt;\n\nfunction encryptSafely(receiverPublicKey, msgParams, version) {\n  const DEFAULT_PADDING_LENGTH = 2 ** 11;\n  const NACL_EXTRA_BYTES = 16;\n  const {\n    data\n  } = msgParams;\n\n  if (!data) {\n    throw new Error('Cannot encrypt empty msg.data');\n  }\n\n  if (typeof data === 'object' && 'toJSON' in data) {\n    // remove toJSON attack vector\n    // TODO, check all possible children\n    throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n  } // add padding\n\n\n  const dataWithPadding = {\n    data,\n    padding: ''\n  }; // calculate padding\n\n  const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n  const modVal = dataLength % DEFAULT_PADDING_LENGTH;\n  let padLength = 0; // Only pad if necessary\n\n  if (modVal > 0) {\n    padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes\n  }\n\n  dataWithPadding.padding = '0'.repeat(padLength);\n  const paddedMsgParams = {\n    data: JSON.stringify(dataWithPadding)\n  };\n  return encrypt(receiverPublicKey, paddedMsgParams, version);\n}\n\nexports.encryptSafely = encryptSafely;\n\nfunction decrypt(encryptedData, receiverPrivateKey) {\n  switch (encryptedData.version) {\n    case 'x25519-xsalsa20-poly1305':\n      {\n        // string to buffer to UInt8Array\n        const recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey);\n        const recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey; // assemble decryption parameters\n\n        const nonce = naclUtil.decodeBase64(encryptedData.nonce);\n        const ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);\n        const ephemPublicKey = naclUtil.decodeBase64(encryptedData.ephemPublicKey); // decrypt\n\n        const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey); // return decrypted msg data\n\n        let output;\n\n        try {\n          output = naclUtil.encodeUTF8(decryptedMessage);\n        } catch (err) {\n          throw new Error('Decryption failed.');\n        }\n\n        if (output) {\n          return output;\n        }\n\n        throw new Error('Decryption failed.');\n      }\n\n    default:\n      throw new Error('Encryption type/version not supported.');\n  }\n}\n\nexports.decrypt = decrypt;\n\nfunction decryptSafely(encryptedData, receiverPrivateKey) {\n  const dataWithPadding = JSON.parse(decrypt(encryptedData, receiverPrivateKey));\n  return dataWithPadding.data;\n}\n\nexports.decryptSafely = decryptSafely;\n\nfunction getEncryptionPublicKey(privateKey) {\n  const privateKeyUint8Array = nacl_decodeHex(privateKey);\n  const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;\n  return naclUtil.encodeBase64(encryptionPublicKey);\n}\n\nexports.getEncryptionPublicKey = getEncryptionPublicKey;\n/**\n * A generic entry point for all typed data methods to be passed, includes a version parameter.\n */\n\nfunction signTypedMessage(privateKey, msgParams) {\n  let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'V4';\n\n  switch (version) {\n    case 'V1':\n      return signTypedDataLegacy(privateKey, msgParams);\n\n    case 'V3':\n      return signTypedData(privateKey, msgParams);\n\n    case 'V4':\n    default:\n      return signTypedData_v4(privateKey, msgParams);\n  }\n}\n\nexports.signTypedMessage = signTypedMessage;\n\nfunction recoverTypedMessage(msgParams) {\n  let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'V4';\n\n  switch (version) {\n    case 'V1':\n      return recoverTypedSignatureLegacy(msgParams);\n\n    case 'V3':\n      return recoverTypedSignature(msgParams);\n\n    case 'V4':\n    default:\n      return recoverTypedSignature_v4(msgParams);\n  }\n}\n\nexports.recoverTypedMessage = recoverTypedMessage;\n\nfunction signTypedData(privateKey, msgParams) {\n  const message = TypedDataUtils.sign(msgParams.data, false);\n  const sig = ethUtil.ecsign(message, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\n\nexports.signTypedData = signTypedData;\n\nfunction signTypedData_v4(privateKey, msgParams) {\n  const message = TypedDataUtils.sign(msgParams.data);\n  const sig = ethUtil.ecsign(message, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\n\nexports.signTypedData_v4 = signTypedData_v4;\n\nfunction recoverTypedSignature(msgParams) {\n  const message = TypedDataUtils.sign(msgParams.data, false);\n  const publicKey = recoverPublicKey(message, msgParams.sig);\n  const sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\n\nexports.recoverTypedSignature = recoverTypedSignature;\n\nfunction recoverTypedSignature_v4(msgParams) {\n  const message = TypedDataUtils.sign(msgParams.data);\n  const publicKey = recoverPublicKey(message, msgParams.sig);\n  const sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\n\nexports.recoverTypedSignature_v4 = recoverTypedSignature_v4;\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\n\nfunction typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array');\n\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n\n    return `${e.type} ${e.name}`;\n  });\n  return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethAbi.soliditySHA3(types, data)]);\n}\n\nfunction recoverPublicKey(hash, sig) {\n  const signature = ethUtil.toBuffer(sig);\n  const sigParams = ethUtil.fromRpcSig(signature);\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\n\nfunction getPublicKeyFor(msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data);\n  const msgHash = ethUtil.hashPersonalMessage(message);\n  return recoverPublicKey(msgHash, msgParams.sig);\n}\n\nfunction padWithZeroes(number, length) {\n  let myString = `${number}`;\n\n  while (myString.length < length) {\n    myString = `0${myString}`;\n  }\n\n  return myString;\n} // converts hex strings to the Uint8Array format used by nacl\n\n\nfunction nacl_decodeHex(msgHex) {\n  const msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');\n  return naclUtil.decodeBase64(msgBase64);\n}","map":{"version":3,"mappings":"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","names":["TYPED_MESSAGE_SCHEMA","type","properties","types","additionalProperties","items","name","required","primaryType","domain","message","exports","TypedDataUtils","encodeData","data","useV4","encodedTypes","encodedValues","hashType","encodeField","value","undefined","ethUtil","keccak","Error","Buffer","from","lastIndexOf","length","parsedType","slice","typeValuePairs","map","item","ethAbi","rawEncode","t","v","field","push","encodeType","result","deps","findTypeDependencies","filter","dep","concat","sort","children","join","results","match","includes","hashStruct","sanitizeData","sanitizedData","key","Object","EIP712Domain","sign","typedData","parts","concatSig","r","s","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","padWithZeroes","toUnsigned","toString","sStr","vStr","stripHexPrefix","intToHex","addHexPrefix","normalize","input","buffer","toBuffer","bufferToHex","msg","toLowerCase","personalSign","privateKey","msgParams","msgHash","hashPersonalMessage","sig","ecsign","serialized","recoverPersonalSignature","publicKey","getPublicKeyFor","sender","publicToAddress","senderHex","extractPublicKey","externalTypedSignatureHash","hashBuffer","typedSignatureHash","signTypedDataLegacy","recoverTypedSignatureLegacy","recoverPublicKey","encrypt","receiverPublicKey","version","ephemeralKeyPair","nacl","box","keyPair","pubKeyUInt8Array","naclUtil","decodeBase64","err","msgParamsUInt8Array","decodeUTF8","nonce","randomBytes","nonceLength","encryptedMessage","secretKey","output","encodeBase64","ephemPublicKey","ciphertext","encryptSafely","DEFAULT_PADDING_LENGTH","NACL_EXTRA_BYTES","dataWithPadding","padding","dataLength","byteLength","JSON","stringify","modVal","padLength","repeat","paddedMsgParams","decrypt","encryptedData","receiverPrivateKey","recieverPrivateKeyUint8Array","nacl_decodeHex","recieverEncryptionPrivateKey","fromSecretKey","decryptedMessage","open","encodeUTF8","decryptSafely","parse","getEncryptionPublicKey","privateKeyUint8Array","encryptionPublicKey","signTypedMessage","signTypedData","signTypedData_v4","recoverTypedMessage","recoverTypedSignature","recoverTypedSignature_v4","error","e","schema","soliditySHA3","Array","fill","hash","signature","sigParams","fromRpcSig","ecrecover","number","myString","msgHex","msgBase64"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}