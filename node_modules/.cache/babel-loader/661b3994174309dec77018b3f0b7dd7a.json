{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extend = exports.PathComponent = exports.ScriptExpressions = exports.MultiKey = exports.CryptoPSBT = exports.CryptoOutput = exports.CryptoECKey = exports.CryptoCoinInfoNetwork = exports.CryptoCoinInfoType = exports.CryptoCoinInfo = exports.CryptoKeypath = exports.CryptoHDKey = exports.CryptoAccount = exports.Bytes = exports.URRegistryDecoder = exports.RegistryItem = exports.DataItem = void 0;\n\nrequire(\"./patchCBOR\");\n\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\n\nObject.defineProperty(exports, \"CryptoHDKey\", {\n  enumerable: true,\n  get: function () {\n    return CryptoHDKey_1.CryptoHDKey;\n  }\n});\n\nconst CryptoKeypath_1 = require(\"./CryptoKeypath\");\n\nObject.defineProperty(exports, \"CryptoKeypath\", {\n  enumerable: true,\n  get: function () {\n    return CryptoKeypath_1.CryptoKeypath;\n  }\n});\n\nconst CryptoCoinInfo_1 = require(\"./CryptoCoinInfo\");\n\nObject.defineProperty(exports, \"CryptoCoinInfo\", {\n  enumerable: true,\n  get: function () {\n    return CryptoCoinInfo_1.CryptoCoinInfo;\n  }\n});\nObject.defineProperty(exports, \"CryptoCoinInfoType\", {\n  enumerable: true,\n  get: function () {\n    return CryptoCoinInfo_1.Type;\n  }\n});\nObject.defineProperty(exports, \"CryptoCoinInfoNetwork\", {\n  enumerable: true,\n  get: function () {\n    return CryptoCoinInfo_1.Network;\n  }\n});\n\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\n\nObject.defineProperty(exports, \"CryptoECKey\", {\n  enumerable: true,\n  get: function () {\n    return CryptoECKey_1.CryptoECKey;\n  }\n});\n\nconst Bytes_1 = require(\"./Bytes\");\n\nObject.defineProperty(exports, \"Bytes\", {\n  enumerable: true,\n  get: function () {\n    return Bytes_1.Bytes;\n  }\n});\n\nconst CryptoOutput_1 = require(\"./CryptoOutput\");\n\nObject.defineProperty(exports, \"CryptoOutput\", {\n  enumerable: true,\n  get: function () {\n    return CryptoOutput_1.CryptoOutput;\n  }\n});\n\nconst CryptoPSBT_1 = require(\"./CryptoPSBT\");\n\nObject.defineProperty(exports, \"CryptoPSBT\", {\n  enumerable: true,\n  get: function () {\n    return CryptoPSBT_1.CryptoPSBT;\n  }\n});\n\nconst CryptoAccount_1 = require(\"./CryptoAccount\");\n\nObject.defineProperty(exports, \"CryptoAccount\", {\n  enumerable: true,\n  get: function () {\n    return CryptoAccount_1.CryptoAccount;\n  }\n});\n\nconst Decoder_1 = require(\"./Decoder\");\n\nObject.defineProperty(exports, \"URRegistryDecoder\", {\n  enumerable: true,\n  get: function () {\n    return Decoder_1.URRegistryDecoder;\n  }\n});\n\nconst MultiKey_1 = require(\"./MultiKey\");\n\nObject.defineProperty(exports, \"MultiKey\", {\n  enumerable: true,\n  get: function () {\n    return MultiKey_1.MultiKey;\n  }\n});\n\nconst ScriptExpression_1 = require(\"./ScriptExpression\");\n\nObject.defineProperty(exports, \"ScriptExpressions\", {\n  enumerable: true,\n  get: function () {\n    return ScriptExpression_1.ScriptExpressions;\n  }\n});\n\nconst PathComponent_1 = require(\"./PathComponent\");\n\nObject.defineProperty(exports, \"PathComponent\", {\n  enumerable: true,\n  get: function () {\n    return PathComponent_1.PathComponent;\n  }\n});\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nconst lib_1 = require(\"./lib\");\n\nvar lib_2 = require(\"./lib\");\n\nObject.defineProperty(exports, \"DataItem\", {\n  enumerable: true,\n  get: function () {\n    return lib_2.DataItem;\n  }\n});\n\nvar RegistryItem_1 = require(\"./RegistryItem\");\n\nObject.defineProperty(exports, \"RegistryItem\", {\n  enumerable: true,\n  get: function () {\n    return RegistryItem_1.RegistryItem;\n  }\n});\n\nconst utils_1 = require(\"./utils\");\n\nconst URlib = {\n  URRegistryDecoder: Decoder_1.URRegistryDecoder,\n  Bytes: Bytes_1.Bytes,\n  CryptoAccount: CryptoAccount_1.CryptoAccount,\n  CryptoHDKey: CryptoHDKey_1.CryptoHDKey,\n  CryptoKeypath: CryptoKeypath_1.CryptoKeypath,\n  CryptoCoinInfo: CryptoCoinInfo_1.CryptoCoinInfo,\n  CryptoCoinInfoType: CryptoCoinInfo_1.Type,\n  CryptoCoinInfoNetwork: CryptoCoinInfo_1.Network,\n  CryptoECKey: CryptoECKey_1.CryptoECKey,\n  CryptoOutput: CryptoOutput_1.CryptoOutput,\n  CryptoPSBT: CryptoPSBT_1.CryptoPSBT,\n  MultiKey: MultiKey_1.MultiKey,\n  ScriptExpressions: ScriptExpression_1.ScriptExpressions,\n  PathComponent: PathComponent_1.PathComponent\n};\nconst cbor = {\n  addReader: lib_1.addReader,\n  addSemanticDecode: lib_1.addSemanticDecode,\n  addSemanticEncode: lib_1.addSemanticEncode,\n  addWriter: lib_1.addWriter,\n  patchTags: utils_1.patchTags\n};\nconst extend = {\n  RegistryTypes: RegistryType_1.RegistryTypes,\n  RegistryType: RegistryType_1.RegistryType,\n  decodeToDataItem: lib_1.decodeToDataItem,\n  encodeDataItem: lib_1.encodeDataItem,\n  cbor\n};\nexports.extend = extend;\nexports.default = URlib;","map":{"version":3,"mappings":";;;;;;;AAAAA;;AAEA;;AAwEEC;AAAAC;AAAAC;AAAA,WAxEOC,yBAwEP;AAxEkB;AAwElB;;AAvEF;;AAwEEH;AAAAC;AAAAC;AAAA,WAxEOE,6BAwEP;AAxEoB;AAwEpB;;AAvEF;;AAwEEJ;AAAAC;AAAAC;AAAA,WAvEAG,+BAuEA;AAvEc;AAuEd;AACAL;AAAAC;AAAAC;AAAA,WAvEQG,qBAuER;AAvE0B;AAuE1B;AACAL;AAAAC;AAAAC;AAAA,WAvEWG,wBAuEX;AAvEgC;AAuEhC;;AArEF;;AAsEEL;AAAAC;AAAAC;AAAA,WAtEOI,yBAsEP;AAtEkB;AAsElB;;AArEF;;AA8DEN;AAAAC;AAAAC;AAAA,WA9DOK,aA8DP;AA9DY;AA8DZ;;AA7DF;;AAqEEP;AAAAC;AAAAC;AAAA,WArEOM,2BAqEP;AArEmB;AAqEnB;;AApEF;;AAqEER;AAAAC;AAAAC;AAAA,WArEOO,uBAqEP;AArEiB;AAqEjB;;AApEF;;AA4DET;AAAAC;AAAAC;AAAA,WA5DOQ,6BA4DP;AA5DoB;AA4DpB;;AA3DF;;AAyDEV;AAAAC;AAAAC;AAAA,WAzDOS,2BAyDP;AAzDwB;AAyDxB;;AAvDF;;AAkEEX;AAAAC;AAAAC;AAAA,WAlEOU,mBAkEP;AAlEe;AAkEf;;AAhEF;;AAiEEZ;AAAAC;AAAAC;AAAA,WAjEOW,oCAiEP;AAjEwB;AAiExB;;AAhEF;;AAiEEb;AAAAC;AAAAC;AAAA,WAjEOY,6BAiEP;AAjEoB;AAiEpB;;AA/DF;;AAEA;;AASA;;AAASd;AAAAC;AAAAC;AAAA;AAAQ;AAAR;;AACT;;AAASF;AAAAC;AAAAC;AAAA;AAAY;AAAZ;;AAET;;AAEA,MAAMa,KAAK,GAAG;AACZC,mBAAiB,EAAjBL,2BADY;AAEZM,OAAK,EAALV,aAFY;AAGZW,eAAa,EAAbR,6BAHY;AAIZS,aAAW,EAAXhB,yBAJY;AAKZiB,eAAa,EAAbhB,6BALY;AAMZiB,gBAAc,EAAdhB,+BANY;AAOZiB,oBAAkB,EAAlBjB,qBAPY;AAQZkB,uBAAqB,EAArBlB,wBARY;AASZmB,aAAW,EAAXlB,yBATY;AAUZmB,cAAY,EAAZjB,2BAVY;AAWZkB,YAAU,EAAVjB,uBAXY;AAYZkB,UAAQ,EAARf,mBAZY;AAaZgB,mBAAiB,EAAjBf,oCAbY;AAcZgB,eAAa,EAAbf;AAdY,CAAd;AAiBA,MAAMgB,IAAI,GAAG;AACXC,WAAS,EAATC,eADW;AAEXC,mBAAiB,EAAjBD,uBAFW;AAGXE,mBAAiB,EAAjBF,uBAHW;AAIXG,WAAS,EAATH,eAJW;AAKXI,WAAS,EAATC;AALW,CAAb;AAQA,MAAMC,MAAM,GAAG;AACbC,eAAa,EAAbC,4BADa;AAEbC,cAAY,EAAZD,2BAFa;AAGbE,kBAAgB,EAAhBV,sBAHa;AAIbW,gBAAc,EAAdX,oBAJa;AAKbF;AALa,CAAf;AAuBEc;AAGFA,kBAAe7B,KAAf","names":["require","Object","enumerable","get","CryptoHDKey_1","CryptoKeypath_1","CryptoCoinInfo_1","CryptoECKey_1","Bytes_1","CryptoOutput_1","CryptoPSBT_1","CryptoAccount_1","Decoder_1","MultiKey_1","ScriptExpression_1","PathComponent_1","URlib","URRegistryDecoder","Bytes","CryptoAccount","CryptoHDKey","CryptoKeypath","CryptoCoinInfo","CryptoCoinInfoType","CryptoCoinInfoNetwork","CryptoECKey","CryptoOutput","CryptoPSBT","MultiKey","ScriptExpressions","PathComponent","cbor","addReader","lib_1","addSemanticDecode","addSemanticEncode","addWriter","patchTags","utils_1","extend","RegistryTypes","RegistryType_1","RegistryType","decodeToDataItem","encodeDataItem","exports"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}