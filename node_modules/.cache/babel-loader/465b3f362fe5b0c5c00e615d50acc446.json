{"ast":null,"code":"'use strict'; // Copyright (c) 2017-2018 Emilio Almansi\n// Copyright (c) 2017 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst validation_1 = require('./validation');\n/**\n * Converts an array of integers made up of 'from' bits into an\n * array of integers made up of 'to' bits. The output array is\n * zero-padded if necessary, unless strict mode is true.\n * Throws a {@link ValidationError} if input is invalid.\n * Original by Pieter Wuille: https://github.com/sipa/bech32.\n *\n * @param {Uint8Array} data Array of integers made up of 'from' bits.\n * @param {number} from Length in bits of elements in the input array.\n * @param {number} to Length in bits of elements in the output array.\n * @param {bool} strictMode Require the conversion to be completed without padding.\n * @returns {Uint8Array}\n */\n\n\nfunction convertBits(data, from, to, strictMode) {\n  const length = strictMode ? Math.floor(data.length * from / to) : Math.ceil(data.length * from / to);\n  const mask = (1 << to) - 1;\n  const result = new Uint8Array(length);\n  let index = 0;\n  let accumulator = 0;\n  let bits = 0;\n\n  for (const value of data) {\n    validation_1.validate(0 <= value && value >> from === 0, 'Invalid value: ' + value + '.');\n    accumulator = accumulator << from | value;\n    bits += from;\n\n    while (bits >= to) {\n      bits -= to;\n      result[index] = accumulator >> bits & mask;\n      ++index;\n    }\n  }\n\n  if (!strictMode) {\n    if (bits > 0) {\n      result[index] = accumulator << to - bits & mask;\n      ++index;\n    }\n  } else {\n    validation_1.validate(bits < from && (accumulator << to - bits & mask) === 0, 'Input cannot be converted to ' + to + ' bits without padding, but strict mode was used.');\n  }\n\n  return result;\n}\n\nexports.convertBits = convertBits;","map":{"version":3,"sources":["/Users/massimilianoalbini/Documents/gain-drop/node_modules/@shapeshiftoss/bitcoinjs-lib/src/cashaddr/convertBits.js"],"names":["Object","defineProperty","exports","value","validation_1","require","convertBits","data","from","to","strictMode","length","Math","floor","ceil","mask","result","Uint8Array","index","accumulator","bits","validate"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,EAAjC,EAAqCC,UAArC,EAAiD;AAC/C,QAAMC,MAAM,GAAGD,UAAU,GACrBE,IAAI,CAACC,KAAL,CAAYN,IAAI,CAACI,MAAL,GAAcH,IAAf,GAAuBC,EAAlC,CADqB,GAErBG,IAAI,CAACE,IAAL,CAAWP,IAAI,CAACI,MAAL,GAAcH,IAAf,GAAuBC,EAAjC,CAFJ;AAGA,QAAMM,IAAI,GAAG,CAAC,KAAKN,EAAN,IAAY,CAAzB;AACA,QAAMO,MAAM,GAAG,IAAIC,UAAJ,CAAeN,MAAf,CAAf;AACA,MAAIO,KAAK,GAAG,CAAZ;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,IAAI,GAAG,CAAX;;AACA,OAAK,MAAMjB,KAAX,IAAoBI,IAApB,EAA0B;AACxBH,IAAAA,YAAY,CAACiB,QAAb,CACE,KAAKlB,KAAL,IAAcA,KAAK,IAAIK,IAAT,KAAkB,CADlC,EAEE,oBAAoBL,KAApB,GAA4B,GAF9B;AAIAgB,IAAAA,WAAW,GAAIA,WAAW,IAAIX,IAAhB,GAAwBL,KAAtC;AACAiB,IAAAA,IAAI,IAAIZ,IAAR;;AACA,WAAOY,IAAI,IAAIX,EAAf,EAAmB;AACjBW,MAAAA,IAAI,IAAIX,EAAR;AACAO,MAAAA,MAAM,CAACE,KAAD,CAAN,GAAiBC,WAAW,IAAIC,IAAhB,GAAwBL,IAAxC;AACA,QAAEG,KAAF;AACD;AACF;;AACD,MAAI,CAACR,UAAL,EAAiB;AACf,QAAIU,IAAI,GAAG,CAAX,EAAc;AACZJ,MAAAA,MAAM,CAACE,KAAD,CAAN,GAAiBC,WAAW,IAAKV,EAAE,GAAGW,IAAtB,GAA+BL,IAA/C;AACA,QAAEG,KAAF;AACD;AACF,GALD,MAKO;AACLd,IAAAA,YAAY,CAACiB,QAAb,CACED,IAAI,GAAGZ,IAAP,IAAe,CAAEW,WAAW,IAAKV,EAAE,GAAGW,IAAtB,GAA+BL,IAAhC,MAA0C,CAD3D,EAEE,kCACEN,EADF,GAEE,kDAJJ;AAMD;;AACD,SAAOO,MAAP;AACD;;AACDd,OAAO,CAACI,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n// Copyright (c) 2017-2018 Emilio Almansi\n// Copyright (c) 2017 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nObject.defineProperty(exports, '__esModule', { value: true });\nconst validation_1 = require('./validation');\n/**\n * Converts an array of integers made up of 'from' bits into an\n * array of integers made up of 'to' bits. The output array is\n * zero-padded if necessary, unless strict mode is true.\n * Throws a {@link ValidationError} if input is invalid.\n * Original by Pieter Wuille: https://github.com/sipa/bech32.\n *\n * @param {Uint8Array} data Array of integers made up of 'from' bits.\n * @param {number} from Length in bits of elements in the input array.\n * @param {number} to Length in bits of elements in the output array.\n * @param {bool} strictMode Require the conversion to be completed without padding.\n * @returns {Uint8Array}\n */\nfunction convertBits(data, from, to, strictMode) {\n  const length = strictMode\n    ? Math.floor((data.length * from) / to)\n    : Math.ceil((data.length * from) / to);\n  const mask = (1 << to) - 1;\n  const result = new Uint8Array(length);\n  let index = 0;\n  let accumulator = 0;\n  let bits = 0;\n  for (const value of data) {\n    validation_1.validate(\n      0 <= value && value >> from === 0,\n      'Invalid value: ' + value + '.',\n    );\n    accumulator = (accumulator << from) | value;\n    bits += from;\n    while (bits >= to) {\n      bits -= to;\n      result[index] = (accumulator >> bits) & mask;\n      ++index;\n    }\n  }\n  if (!strictMode) {\n    if (bits > 0) {\n      result[index] = (accumulator << (to - bits)) & mask;\n      ++index;\n    }\n  } else {\n    validation_1.validate(\n      bits < from && ((accumulator << (to - bits)) & mask) === 0,\n      'Input cannot be converted to ' +\n        to +\n        ' bits without padding, but strict mode was used.',\n    );\n  }\n  return result;\n}\nexports.convertBits = convertBits;\n"]},"metadata":{},"sourceType":"script"}