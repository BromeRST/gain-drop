{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getOnionDomain = getOnionDomain;\nexports.getOrigin = void 0;\n\nvar getOrigin = function getOrigin(url) {\n  if (typeof url !== 'string') return 'unknown';\n  if (url.indexOf('file://') === 0) return 'file://'; // eslint-disable-next-line no-useless-escape\n\n  var parts = url.match(/^.+\\:\\/\\/[^\\/]+/);\n  return Array.isArray(parts) && parts.length > 0 ? parts[0] : 'unknown';\n};\n\nexports.getOrigin = getOrigin;\n\nfunction getOnionDomain(url, dict) {\n  if (Array.isArray(url)) {\n    return url.map(function (u) {\n      return getOnionDomain(u, dict);\n    });\n  }\n\n  if (typeof url === 'string') {\n    var _url$match;\n\n    var _ref = (_url$match = url.match(/^(http|ws)s?:\\/\\/([^:/]+\\.)?([^/.]+\\.[^/.]+)(\\/.*)?$/i)) != null ? _url$match : [],\n        protocol = _ref[1],\n        subdomain = _ref[2],\n        _domain = _ref[3],\n        rest = _ref[4]; // ^(http|ws)s?:\\/\\/ - required http(s)/ws(s) protocol\n    // ([^:/]+\\.)? - optional subdomains, e.g. 'blog.'\n    // ([^/.]+\\.[^/.]+) - required two-part domain name, e.g. 'trezor.io'\n    // (\\/.*)?$ - optional path and/or query, e.g. '/api/data?id=1234'\n\n\n    if (!_domain || !dict[_domain]) return url; // $FlowIssue cannot return string if url is string :)\n\n    return protocol + \"://\" + (subdomain || '') + dict[_domain] + (rest || '');\n  }\n\n  return url;\n}","map":{"version":3,"sources":["/Users/massimilianoalbini/Documents/gain-drop/node_modules/trezor-connect/lib/utils/urlUtils.js"],"names":["exports","__esModule","getOnionDomain","getOrigin","url","indexOf","parts","match","Array","isArray","length","dict","map","u","_url$match","_ref","protocol","subdomain","_domain","rest"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,cAAR,GAAyBA,cAAzB;AACAF,OAAO,CAACG,SAAR,GAAoB,KAAK,CAAzB;;AAEA,IAAIA,SAAS,GAAG,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACtC,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAO,SAAP;AAC7B,MAAIA,GAAG,CAACC,OAAJ,CAAY,SAAZ,MAA2B,CAA/B,EAAkC,OAAO,SAAP,CAFI,CAEc;;AAEpD,MAAIC,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,iBAAV,CAAZ;AACA,SAAOC,KAAK,CAACC,OAAN,CAAcH,KAAd,KAAwBA,KAAK,CAACI,MAAN,GAAe,CAAvC,GAA2CJ,KAAK,CAAC,CAAD,CAAhD,GAAsD,SAA7D;AACD,CAND;;AAQAN,OAAO,CAACG,SAAR,GAAoBA,SAApB;;AAEA,SAASD,cAAT,CAAwBE,GAAxB,EAA6BO,IAA7B,EAAmC;AACjC,MAAIH,KAAK,CAACC,OAAN,CAAcL,GAAd,CAAJ,EAAwB;AACtB,WAAOA,GAAG,CAACQ,GAAJ,CAAQ,UAAUC,CAAV,EAAa;AAC1B,aAAOX,cAAc,CAACW,CAAD,EAAIF,IAAJ,CAArB;AACD,KAFM,CAAP;AAGD;;AAED,MAAI,OAAOP,GAAP,KAAe,QAAnB,EAA6B;AAC3B,QAAIU,UAAJ;;AAEA,QAAIC,IAAI,GAAG,CAACD,UAAU,GAAGV,GAAG,CAACG,KAAJ,CAAU,uDAAV,CAAd,KAAqF,IAArF,GAA4FO,UAA5F,GAAyG,EAApH;AAAA,QACIE,QAAQ,GAAGD,IAAI,CAAC,CAAD,CADnB;AAAA,QAEIE,SAAS,GAAGF,IAAI,CAAC,CAAD,CAFpB;AAAA,QAGIG,OAAO,GAAGH,IAAI,CAAC,CAAD,CAHlB;AAAA,QAIII,IAAI,GAAGJ,IAAI,CAAC,CAAD,CAJf,CAH2B,CAOP;AACpB;AACA;AACA;;;AAGA,QAAI,CAACG,OAAD,IAAY,CAACP,IAAI,CAACO,OAAD,CAArB,EAAgC,OAAOd,GAAP,CAbL,CAaiB;;AAE5C,WAAOY,QAAQ,GAAG,KAAX,IAAoBC,SAAS,IAAI,EAAjC,IAAuCN,IAAI,CAACO,OAAD,CAA3C,IAAwDC,IAAI,IAAI,EAAhE,CAAP;AACD;;AAED,SAAOf,GAAP;AACD","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.getOnionDomain = getOnionDomain;\nexports.getOrigin = void 0;\n\nvar getOrigin = function getOrigin(url) {\n  if (typeof url !== 'string') return 'unknown';\n  if (url.indexOf('file://') === 0) return 'file://'; // eslint-disable-next-line no-useless-escape\n\n  var parts = url.match(/^.+\\:\\/\\/[^\\/]+/);\n  return Array.isArray(parts) && parts.length > 0 ? parts[0] : 'unknown';\n};\n\nexports.getOrigin = getOrigin;\n\nfunction getOnionDomain(url, dict) {\n  if (Array.isArray(url)) {\n    return url.map(function (u) {\n      return getOnionDomain(u, dict);\n    });\n  }\n\n  if (typeof url === 'string') {\n    var _url$match;\n\n    var _ref = (_url$match = url.match(/^(http|ws)s?:\\/\\/([^:/]+\\.)?([^/.]+\\.[^/.]+)(\\/.*)?$/i)) != null ? _url$match : [],\n        protocol = _ref[1],\n        subdomain = _ref[2],\n        _domain = _ref[3],\n        rest = _ref[4]; // ^(http|ws)s?:\\/\\/ - required http(s)/ws(s) protocol\n    // ([^:/]+\\.)? - optional subdomains, e.g. 'blog.'\n    // ([^/.]+\\.[^/.]+) - required two-part domain name, e.g. 'trezor.io'\n    // (\\/.*)?$ - optional path and/or query, e.g. '/api/data?id=1234'\n\n\n    if (!_domain || !dict[_domain]) return url; // $FlowIssue cannot return string if url is string :)\n\n    return protocol + \"://\" + (subdomain || '') + dict[_domain] + (rest || '');\n  }\n\n  return url;\n}"]},"metadata":{},"sourceType":"script"}