{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoOutput = void 0;\n\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\n\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\n\nconst lib_1 = require(\"./lib\");\n\nconst MultiKey_1 = require(\"./MultiKey\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nconst ScriptExpression_1 = require(\"./ScriptExpression\");\n\nclass CryptoOutput extends RegistryItem_1.RegistryItem {\n  constructor(scriptExpressions, cryptoKey) {\n    super();\n    this.scriptExpressions = scriptExpressions;\n    this.cryptoKey = cryptoKey;\n\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_OUTPUT;\n    };\n\n    this.getCryptoKey = () => this.cryptoKey;\n\n    this.getHDKey = () => {\n      if (this.cryptoKey instanceof CryptoHDKey_1.CryptoHDKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n\n    this.getECKey = () => {\n      if (this.cryptoKey instanceof CryptoECKey_1.CryptoECKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n\n    this.getMultiKey = () => {\n      if (this.cryptoKey instanceof MultiKey_1.MultiKey) {\n        return this.cryptoKey;\n      } else {\n        return undefined;\n      }\n    };\n\n    this.getScriptExpressions = () => this.scriptExpressions;\n\n    this.toDataItem = () => {\n      let dataItem = this.cryptoKey.toDataItem();\n\n      if (this.cryptoKey instanceof CryptoECKey_1.CryptoECKey || this.cryptoKey instanceof CryptoHDKey_1.CryptoHDKey) {\n        dataItem.setTag(this.cryptoKey.getRegistryType().getTag());\n      }\n\n      const clonedSe = [...this.scriptExpressions];\n      clonedSe.reverse().forEach(se => {\n        const tagValue = se.getTag();\n\n        if (dataItem.getTag() === undefined) {\n          dataItem.setTag(tagValue);\n        } else {\n          dataItem = new lib_1.DataItem(dataItem, tagValue);\n        }\n      });\n      return dataItem;\n    };\n  }\n\n}\n\nexports.CryptoOutput = CryptoOutput;\n\nCryptoOutput.fromDataItem = dataItem => {\n  const scriptExpressions = [];\n  let _dataItem = dataItem;\n\n  while (true) {\n    let _tag = _dataItem.getTag() || undefined;\n\n    const se = ScriptExpression_1.ScriptExpression.fromTag(_tag);\n\n    if (se) {\n      scriptExpressions.push(se);\n\n      if (_dataItem.getData() instanceof lib_1.DataItem) {\n        _dataItem = _dataItem.getData();\n        _tag = _dataItem.getTag();\n      } else {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n\n  const seLength = scriptExpressions.length;\n  const isMultiKey = seLength > 0 && (scriptExpressions[seLength - 1].getExpression() === ScriptExpression_1.ScriptExpressions.MULTISIG.getExpression() || scriptExpressions[seLength - 1].getExpression() === ScriptExpression_1.ScriptExpressions.SORTED_MULTISIG.getExpression());\n\n  if (isMultiKey) {\n    const multiKey = MultiKey_1.MultiKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, multiKey);\n  }\n\n  if (_dataItem.getTag() === RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getTag()) {\n    const cryptoHDKey = CryptoHDKey_1.CryptoHDKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, cryptoHDKey);\n  } else {\n    const cryptoECKey = CryptoECKey_1.CryptoECKey.fromDataItem(_dataItem);\n    return new CryptoOutput(scriptExpressions, cryptoECKey);\n  }\n};\n\nCryptoOutput.fromCBOR = _cborPayload => {\n  const dataItem = lib_1.decodeToDataItem(_cborPayload);\n  return CryptoOutput.fromDataItem(dataItem);\n};","map":{"version":3,"mappings":"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","names":["CryptoOutput","RegistryItem_1","constructor","scriptExpressions","cryptoKey","RegistryType_1","CRYPTO_OUTPUT","CryptoHDKey_1","undefined","CryptoECKey_1","MultiKey_1","dataItem","toDataItem","setTag","getRegistryType","getTag","clonedSe","reverse","forEach","se","tagValue","lib_1","exports","_dataItem","_tag","ScriptExpression_1","fromTag","push","getData","seLength","length","isMultiKey","getExpression","MULTISIG","SORTED_MULTISIG","multiKey","fromDataItem","CRYPTO_HDKEY","cryptoHDKey","cryptoECKey","_cborPayload"],"sourceRoot":"","sources":["../src/CryptoOutput.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}