{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSimpleCBOR = exports.encodeSimpleCBOR = exports.composeHeader = void 0;\n/*\n    this an simple cbor implementation which is just using\n    on BCR-05\n*/\n\nvar composeHeader = function (length) {\n  var header;\n\n  if (length > 0 && length <= 23) {\n    header = Buffer.from([0x40 + length]);\n  } else if (length >= 24 && length <= 255) {\n    var headerLength = Buffer.alloc(1);\n    headerLength.writeUInt8(length, 0);\n    header = Buffer.concat([Buffer.from([0x58]), headerLength]);\n  } else if (length >= 256 && length <= 65535) {\n    var headerLength = Buffer.alloc(2);\n    headerLength.writeUInt16BE(length, 0);\n    header = Buffer.concat([Buffer.from([0x59]), headerLength]);\n  } else if (length >= 65536 && length <= Math.pow(2, 32) - 1) {\n    var headerLength = Buffer.alloc(4);\n    headerLength.writeUInt32BE(length, 0);\n    header = Buffer.concat([Buffer.from([0x60]), headerLength]);\n  } else {\n    throw new Error('length exceeded');\n  }\n\n  return header;\n};\n\nexports.composeHeader = composeHeader;\n\nvar encodeSimpleCBOR = function (data) {\n  var bufferData = Buffer.from(data, 'hex');\n\n  if (bufferData.length <= 0 || bufferData.length >= Math.pow(2, 32)) {\n    throw new Error('data is too large');\n  }\n\n  var header = exports.composeHeader(bufferData.length);\n  var endcoded = Buffer.concat([header, bufferData]);\n  return endcoded.toString('hex');\n};\n\nexports.encodeSimpleCBOR = encodeSimpleCBOR;\n\nvar decodeSimpleCBOR = function (data) {\n  var dataBuffer = Buffer.from(data, 'hex');\n\n  if (dataBuffer.length <= 0) {\n    throw new Error('invalid input');\n  }\n\n  var header = dataBuffer[0];\n\n  if (header < 0x58) {\n    var dataLength = header - 0x40;\n    return dataBuffer.slice(1, 1 + dataLength).toString('hex');\n  } else if (header == 0x58) {\n    var dataLength = dataBuffer.slice(1, 2).readUInt8(0);\n    return dataBuffer.slice(2, 2 + dataLength).toString('hex');\n  } else if (header == 0x59) {\n    var dataLength = dataBuffer.slice(1, 3).readUInt16BE(0);\n    return dataBuffer.slice(3, 3 + dataLength).toString('hex');\n  } else if (header == 0x60) {\n    var dataLength = dataBuffer.slice(1, 5).readUInt32BE(0);\n    return dataBuffer.slice(5, 5 + dataLength).toString('hex');\n  } else {\n    throw new Error('invalid input');\n  }\n};\n\nexports.decodeSimpleCBOR = decodeSimpleCBOR;","map":{"version":3,"mappings":"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","names":["composeHeader","length","header","Buffer","from","headerLength","alloc","writeUInt8","concat","writeUInt16BE","Math","writeUInt32BE","Error","exports","encodeSimpleCBOR","data","bufferData","endcoded","toString","decodeSimpleCBOR","dataBuffer","dataLength","slice","readUInt8","readUInt16BE","readUInt32BE"],"sourceRoot":"","sources":["../src/miniCbor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}