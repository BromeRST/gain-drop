{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Safe = void 0;\n\nconst ethers_1 = require(\"ethers\");\n\nconst signatures_1 = require(\"./signatures\");\n\nconst methods_1 = require(\"../communication/methods\");\n\nconst constants_1 = require(\"../eth/constants\");\n\nclass Safe {\n  constructor(communicator) {\n    this.communicator = communicator;\n  }\n\n  async getChainInfo() {\n    const response = await this.communicator.send(methods_1.Methods.getChainInfo, undefined);\n    return response.data;\n  }\n\n  async getInfo() {\n    const response = await this.communicator.send(methods_1.Methods.getSafeInfo, undefined);\n    return response.data;\n  } // There is a possibility that this method will change because we may add pagination to the endpoint\n\n\n  async experimental_getBalances() {\n    let {\n      currency = 'usd'\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const response = await this.communicator.send(methods_1.Methods.getSafeBalances, {\n      currency\n    });\n    return response.data;\n  }\n\n  async check1271Signature(messageHash) {\n    let signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0x';\n    const safeInfo = await this.getInfo();\n    const encodedIsValidSignatureCall = signatures_1.EIP_1271_INTERFACE.encodeFunctionData('isValidSignature', [messageHash, signature]);\n    const payload = {\n      call: constants_1.RPC_CALLS.eth_call,\n      params: [{\n        to: safeInfo.safeAddress,\n        data: encodedIsValidSignatureCall\n      }, 'latest']\n    };\n\n    try {\n      const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n      return response.data.slice(0, 10).toLowerCase() === signatures_1.MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  async check1271SignatureBytes(messageHash) {\n    let signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0x';\n    const safeInfo = await this.getInfo();\n    const msgBytes = ethers_1.ethers.utils.arrayify(messageHash);\n    const encodedIsValidSignatureCall = signatures_1.EIP_1271_BYTES_INTERFACE.encodeFunctionData('isValidSignature', [msgBytes, signature]);\n    const payload = {\n      call: constants_1.RPC_CALLS.eth_call,\n      params: [{\n        to: safeInfo.safeAddress,\n        data: encodedIsValidSignatureCall\n      }, 'latest']\n    };\n\n    try {\n      const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n      return response.data.slice(0, 10).toLowerCase() === signatures_1.MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  calculateMessageHash(message) {\n    return ethers_1.ethers.utils.hashMessage(message);\n  }\n\n  async isMessageSigned(message) {\n    let signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0x';\n    const messageHash = this.calculateMessageHash(message);\n    const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n    return messageHashSigned;\n  }\n\n  async isMessageHashSigned(messageHash) {\n    let signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0x';\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n\n      if (isValid) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nexports.Safe = Safe;","map":{"version":3,"mappings":"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","names":["Safe","constructor","communicator","getChainInfo","response","send","methods_1","undefined","data","getInfo","getSafeInfo","experimental_getBalances","currency","getSafeBalances","check1271Signature","messageHash","signature","safeInfo","encodedIsValidSignatureCall","signatures_1","encodeFunctionData","payload","call","constants_1","eth_call","params","to","safeAddress","rpcCall","slice","toLowerCase","err","check1271SignatureBytes","msgBytes","ethers_1","utils","arrayify","calculateMessageHash","message","hashMessage","isMessageSigned","messageHashSigned","isMessageHashSigned","checks","bind","check","isValid","exports"],"sourceRoot":"","sources":["../../../src/safe/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}