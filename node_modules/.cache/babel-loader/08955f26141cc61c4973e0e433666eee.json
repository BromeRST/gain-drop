{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeBc32Data = exports.encodeBc32Data = exports.encodeSegwitAddress = exports.decodeSegwitAddress = exports.Bech32Version = void 0;\n\nvar bech32_1 = __importDefault(require(\"./bech32\"));\n\nvar Bech32Version;\n\n(function (Bech32Version) {\n  Bech32Version[Bech32Version[\"Origin\"] = 1] = \"Origin\";\n  Bech32Version[Bech32Version[\"bis\"] = 2] = \"bis\";\n})(Bech32Version = exports.Bech32Version || (exports.Bech32Version = {}));\n\nvar convertBits = function (data, fromBits, toBits, pad) {\n  var acc = 0;\n  var bits = 0;\n  var ret = [];\n  var maxv = (1 << toBits) - 1;\n\n  for (var p = 0; p < data.length; ++p) {\n    var value = data[p];\n\n    if (value < 0 || value >> fromBits !== 0) {\n      return null;\n    }\n\n    acc = acc << fromBits | value;\n    bits += fromBits;\n\n    while (bits >= toBits) {\n      bits -= toBits;\n      ret.push(acc >> bits & maxv);\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      ret.push(acc << toBits - bits & maxv);\n    }\n  } else if (bits >= fromBits || acc << toBits - bits & maxv) {\n    return null;\n  }\n\n  return ret;\n};\n\nvar decodeSegwitAddress = function (hrp, addr) {\n  var dec = bech32_1.default.decode(addr);\n\n  if (dec === null || dec.hrp !== hrp || dec.data.length < 1 || dec.data[0] > 16) {\n    return null;\n  }\n\n  var res = convertBits(Uint8Array.from(dec.data.slice(1)), 5, 8, false);\n\n  if (res === null || res.length < 2 || res.length > 40) {\n    return null;\n  }\n\n  if (dec.data[0] === 0 && res.length !== 20 && res.length !== 32) {\n    return null;\n  }\n\n  return {\n    version: dec.data[0],\n    program: res\n  };\n};\n\nexports.decodeSegwitAddress = decodeSegwitAddress;\n\nvar encodeSegwitAddress = function (hrp, version, program) {\n  var u82u5 = convertBits(program, 8, 5, true);\n\n  if (!u82u5) {\n    return null;\n  }\n\n  var ret = bech32_1.default.encode(hrp, [version].concat(u82u5), Bech32Version.Origin);\n\n  if (exports.decodeSegwitAddress(hrp, ret) === null) {\n    return null;\n  }\n\n  return ret;\n};\n\nexports.encodeSegwitAddress = encodeSegwitAddress;\n\nvar encodeBc32Data = function (hex) {\n  var data = Buffer.from(hex, 'hex');\n  var u82u5 = convertBits(data, 8, 5, true);\n\n  if (!u82u5) {\n    throw new Error('invalid input');\n  } else {\n    return bech32_1.default.encode(undefined, u82u5, Bech32Version.bis);\n  }\n};\n\nexports.encodeBc32Data = encodeBc32Data;\n\nvar decodeBc32Data = function (data) {\n  var result = bech32_1.default.decode(data);\n\n  if (result) {\n    var res = convertBits(Buffer.from(result.data), 5, 8, false);\n    if (res) return Buffer.from(res).toString('hex');\n    return null;\n  } else {\n    return null;\n  }\n};\n\nexports.decodeBc32Data = decodeBc32Data;","map":{"version":3,"mappings":"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","names":["Bech32Version","exports","convertBits","data","fromBits","toBits","pad","acc","bits","ret","maxv","p","length","value","push","decodeSegwitAddress","hrp","addr","dec","bech32_1","decode","res","Uint8Array","from","slice","version","program","encodeSegwitAddress","u82u5","encode","concat","Origin","encodeBc32Data","hex","Buffer","Error","undefined","bis","decodeBc32Data","result","toString"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}