{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ethVerifyMessage = exports.ethSignMessage = exports.ethGetAddress = exports.ethSignTx = exports.ethGetAccountPaths = exports.ethSupportsNativeShapeShift = exports.ethSupportsSecureTransfer = exports.ethSupportsNetwork = void 0;\n\nconst Exchange = __importStar(require(\"@keepkey/device-protocol/lib/exchange_pb\"));\n\nconst Messages = __importStar(require(\"@keepkey/device-protocol/lib/messages_pb\"));\n\nconst Types = __importStar(require(\"@keepkey/device-protocol/lib/types_pb\"));\n\nconst core = __importStar(require(\"@shapeshiftoss/hdwallet-core\"));\n\nconst common_1 = __importDefault(require(\"@ethereumjs/common\"));\n\nconst tx_1 = require(\"@ethereumjs/tx\");\n\nconst eip55 = __importStar(require(\"eip55\"));\n\nconst utils_1 = require(\"./utils\");\n\nfunction ethSupportsNetwork(chain_id) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return true;\n  });\n}\n\nexports.ethSupportsNetwork = ethSupportsNetwork;\n\nfunction ethSupportsSecureTransfer() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return true;\n  });\n}\n\nexports.ethSupportsSecureTransfer = ethSupportsSecureTransfer;\n\nfunction ethSupportsNativeShapeShift() {\n  return true;\n}\n\nexports.ethSupportsNativeShapeShift = ethSupportsNativeShapeShift;\n\nfunction ethGetAccountPaths(msg) {\n  const slip44 = core.slip44ByCoin(msg.coin);\n  if (slip44 === undefined) return [];\n  return [{\n    addressNList: [0x80000000 + 44, 0x80000000 + slip44, 0x80000000 + msg.accountIdx, 0, 0],\n    hardenedPath: [0x80000000 + 44, 0x80000000 + slip44, 0x80000000 + msg.accountIdx],\n    relPath: [0, 0],\n    description: \"KeepKey\"\n  }];\n}\n\nexports.ethGetAccountPaths = ethGetAccountPaths;\n\nfunction stripLeadingZeroes(buf) {\n  const firstZeroIndex = buf.findIndex(x => x !== 0);\n  return buf.slice(firstZeroIndex !== -1 ? firstZeroIndex : buf.length);\n}\n\nfunction ethSignTx(transport, msg) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {\n      const est = new Messages.EthereumSignTx();\n      est.setAddressNList(msg.addressNList);\n      est.setNonce(stripLeadingZeroes(core.arrayify(msg.nonce)));\n      est.setGasLimit(core.arrayify(msg.gasLimit));\n\n      if (msg.gasPrice) {\n        est.setGasPrice(core.arrayify(msg.gasPrice));\n      }\n\n      if (msg.maxFeePerGas) {\n        est.setMaxFeePerGas(core.arrayify(msg.maxFeePerGas));\n        est.setType(core.ETHTransactionType.ETH_TX_TYPE_EIP_1559);\n\n        if (msg.maxPriorityFeePerGas) {\n          est.setMaxPriorityFeePerGas(core.arrayify(msg.maxPriorityFeePerGas));\n        }\n      }\n\n      if (msg.value.match(\"^0x0*$\") === null) {\n        est.setValue(core.arrayify(msg.value));\n      }\n\n      if (msg.toAddressNList) {\n        est.setAddressType(Types.OutputAddressType.SPEND);\n        est.setToAddressNList(msg.toAddressNList);\n      } else if (msg.exchangeType) {\n        est.setAddressType(Types.OutputAddressType.EXCHANGE);\n        const signedHex = core.base64toHEX(msg.exchangeType.signedExchangeResponse);\n        const signedExchangeOut = Exchange.SignedExchangeResponse.deserializeBinary(core.arrayify(signedHex));\n        const exchangeType = new Types.ExchangeType();\n        exchangeType.setSignedExchangeResponse(signedExchangeOut);\n        exchangeType.setWithdrawalCoinName(msg.exchangeType.withdrawalCoinName); // KeepKey firmware will complain if this doesn't match signed exchange response\n\n        exchangeType.setWithdrawalAddressNList(msg.exchangeType.withdrawalAddressNList);\n        exchangeType.setWithdrawalScriptType(utils_1.translateInputScriptType(msg.exchangeType.withdrawalScriptType || core.BTCInputScriptType.SpendAddress));\n        exchangeType.setReturnAddressNList(msg.exchangeType.returnAddressNList);\n        exchangeType.setReturnScriptType(utils_1.translateInputScriptType(msg.exchangeType.returnScriptType || core.BTCInputScriptType.SpendAddress));\n        est.setExchangeType(exchangeType);\n      } else {\n        est.setAddressType(Types.OutputAddressType.SPEND);\n      }\n\n      if (msg.to) {\n        est.setTo(core.arrayify(msg.to));\n      }\n\n      let dataChunk = null;\n      let dataRemaining = undefined;\n\n      if (msg.data) {\n        dataRemaining = core.arrayify(msg.data);\n        est.setDataLength(dataRemaining.length);\n        dataChunk = dataRemaining.slice(0, 1024);\n        dataRemaining = dataRemaining.slice(dataChunk.length);\n        est.setDataInitialChunk(dataChunk);\n      }\n\n      if (msg.chainId !== undefined) {\n        est.setChainId(msg.chainId);\n      }\n\n      let response;\n      let nextResponse = yield transport.call(Messages.MessageType.MESSAGETYPE_ETHEREUMSIGNTX, est, {\n        msgTimeout: core.LONG_TIMEOUT,\n        omitLock: true\n      });\n      response = nextResponse.proto;\n\n      try {\n        const esa = new Messages.EthereumTxAck();\n\n        while (response.hasDataLength()) {\n          const dataLength = response.getDataLength();\n          dataRemaining = core.mustBeDefined(dataRemaining);\n          dataChunk = dataRemaining.slice(0, dataLength);\n          dataRemaining = dataRemaining.slice(dataLength, dataRemaining.length);\n          esa.setDataChunk(dataChunk);\n          nextResponse = yield transport.call(Messages.MessageType.MESSAGETYPE_ETHEREUMTXACK, esa, {\n            msgTimeout: core.LONG_TIMEOUT,\n            omitLock: true\n          });\n          response = nextResponse.proto;\n        }\n      } catch (error) {\n        console.error({\n          error\n        });\n        throw new Error(\"Failed to sign ETH transaction\");\n      }\n\n      const utxBase = {\n        to: msg.to,\n        value: msg.value,\n        data: msg.data,\n        chainId: msg.chainId,\n        nonce: msg.nonce,\n        gasLimit: msg.gasLimit,\n        maxFeePerGas: msg.maxFeePerGas,\n        maxPriorityFeePerGas: msg.maxPriorityFeePerGas\n      };\n      const r = \"0x\" + core.toHexString(response.getSignatureR_asU8());\n      const s = \"0x\" + core.toHexString(response.getSignatureS_asU8());\n      if (!response.hasSignatureV()) throw new Error(\"could not get v\");\n      const v = core.mustBeDefined(response.getSignatureV());\n      const v2 = \"0x\" + v.toString(16);\n      const common = new common_1.default({\n        chain: \"mainnet\",\n        hardfork: \"london\"\n      });\n      const tx = msg.maxFeePerGas ? tx_1.FeeMarketEIP1559Transaction.fromTxData(Object.assign(Object.assign({}, utxBase), {\n        maxFeePerGas: msg.maxFeePerGas,\n        maxPriorityFeePerGas: msg.maxPriorityFeePerGas,\n        r: r,\n        s: s,\n        v: v2\n      })) : tx_1.Transaction.fromTxData(Object.assign(Object.assign({}, utxBase), {\n        gasPrice: msg.gasPrice,\n        r: r,\n        s: s,\n        v: v2\n      }), {\n        common\n      });\n      return {\n        r,\n        s,\n        v,\n        serialized: \"0x\" + core.toHexString(tx.serialize())\n      };\n    }));\n  });\n}\n\nexports.ethSignTx = ethSignTx;\n\nfunction ethGetAddress(transport, msg) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const getAddr = new Messages.EthereumGetAddress();\n    getAddr.setAddressNList(msg.addressNList);\n    getAddr.setShowDisplay(msg.showDisplay !== false);\n    const response = yield transport.call(Messages.MessageType.MESSAGETYPE_ETHEREUMGETADDRESS, getAddr, {\n      msgTimeout: core.LONG_TIMEOUT\n    });\n    const ethAddress = response.proto;\n    let address;\n    if (ethAddress.hasAddressStr()) address = ethAddress.getAddressStr();else if (ethAddress.hasAddress()) address = \"0x\" + core.toHexString(ethAddress.getAddress_asU8());else throw new Error(\"Unable to obtain ETH address from device.\");\n    return address;\n  });\n}\n\nexports.ethGetAddress = ethGetAddress;\n\nfunction ethSignMessage(transport, msg) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const m = new Messages.EthereumSignMessage();\n    m.setAddressNList(msg.addressNList);\n    m.setMessage(utils_1.toUTF8Array(msg.message));\n    const response = yield transport.call(Messages.MessageType.MESSAGETYPE_ETHEREUMSIGNMESSAGE, m, {\n      msgTimeout: core.LONG_TIMEOUT\n    });\n    const sig = response.proto;\n    return {\n      address: eip55.encode(\"0x\" + core.toHexString(sig.getAddress_asU8())),\n      signature: \"0x\" + core.toHexString(sig.getSignature_asU8())\n    };\n  });\n}\n\nexports.ethSignMessage = ethSignMessage;\n\nfunction ethVerifyMessage(transport, msg) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const m = new Messages.EthereumVerifyMessage();\n    m.setAddress(core.arrayify(msg.address));\n    m.setSignature(core.arrayify(msg.signature));\n    m.setMessage(utils_1.toUTF8Array(msg.message));\n    let event;\n\n    try {\n      event = yield transport.call(Messages.MessageType.MESSAGETYPE_ETHEREUMVERIFYMESSAGE, m, {\n        msgTimeout: core.LONG_TIMEOUT\n      });\n    } catch (e) {\n      if (core.isIndexable(e) && e.message_enum === Messages.MessageType.MESSAGETYPE_FAILURE) {\n        return false;\n      }\n\n      throw e;\n    }\n\n    const success = event.proto;\n    return success.getMessage() === \"Message verified\";\n  });\n}\n\nexports.ethVerifyMessage = ethVerifyMessage;","map":{"version":3,"mappings":"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","names":["ethSupportsNetwork","chain_id","exports","ethSupportsSecureTransfer","ethSupportsNativeShapeShift","ethGetAccountPaths","msg","slip44","core","slip44ByCoin","coin","undefined","addressNList","accountIdx","hardenedPath","relPath","description","stripLeadingZeroes","buf","firstZeroIndex","findIndex","x","slice","length","ethSignTx","transport","lockDuring","__awaiter","est","Messages","EthereumSignTx","setAddressNList","setNonce","arrayify","nonce","setGasLimit","gasLimit","gasPrice","setGasPrice","maxFeePerGas","setMaxFeePerGas","setType","ETHTransactionType","ETH_TX_TYPE_EIP_1559","maxPriorityFeePerGas","setMaxPriorityFeePerGas","value","match","setValue","toAddressNList","setAddressType","Types","OutputAddressType","SPEND","setToAddressNList","exchangeType","EXCHANGE","signedHex","base64toHEX","signedExchangeResponse","signedExchangeOut","Exchange","SignedExchangeResponse","deserializeBinary","ExchangeType","setSignedExchangeResponse","setWithdrawalCoinName","withdrawalCoinName","setWithdrawalAddressNList","withdrawalAddressNList","setWithdrawalScriptType","utils_1","withdrawalScriptType","BTCInputScriptType","SpendAddress","setReturnAddressNList","returnAddressNList","setReturnScriptType","returnScriptType","setExchangeType","to","setTo","dataChunk","dataRemaining","data","setDataLength","setDataInitialChunk","chainId","setChainId","response","nextResponse","call","MessageType","MESSAGETYPE_ETHEREUMSIGNTX","msgTimeout","LONG_TIMEOUT","omitLock","proto","esa","EthereumTxAck","hasDataLength","dataLength","getDataLength","mustBeDefined","setDataChunk","MESSAGETYPE_ETHEREUMTXACK","error","console","Error","utxBase","r","toHexString","getSignatureR_asU8","s","getSignatureS_asU8","hasSignatureV","v","getSignatureV","v2","toString","common","common_1","chain","hardfork","tx","tx_1","fromTxData","Object","serialized","serialize","ethGetAddress","getAddr","EthereumGetAddress","setShowDisplay","showDisplay","MESSAGETYPE_ETHEREUMGETADDRESS","ethAddress","address","hasAddressStr","getAddressStr","hasAddress","getAddress_asU8","ethSignMessage","m","EthereumSignMessage","setMessage","message","MESSAGETYPE_ETHEREUMSIGNMESSAGE","sig","eip55","encode","signature","getSignature_asU8","ethVerifyMessage","EthereumVerifyMessage","setAddress","setSignature","event","MESSAGETYPE_ETHEREUMVERIFYMESSAGE","e","isIndexable","message_enum","MESSAGETYPE_FAILURE","success","getMessage"],"sourceRoot":"","sources":["../src/ethereum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}