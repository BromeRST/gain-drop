{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Eth = void 0;\n\nconst constants_1 = require(\"../eth/constants\");\n\nconst methods_1 = require(\"../communication/methods\");\n\nconst inputFormatters = {\n  defaultBlockParam: function () {\n    let arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'latest';\n    return arg;\n  },\n  returnFullTxObjectParam: function () {\n    let arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return arg;\n  },\n  blockNumberToHex: arg => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg\n};\n\nclass Eth {\n  constructor(communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getBalance = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getCode = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getStorageAt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam]\n    });\n    this.getPastLogs = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getLogs\n    });\n    this.getBlockByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getBlockByNumber = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getTransactionByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionByHash\n    });\n    this.getTransactionReceipt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionReceipt\n    });\n    this.getTransactionCount = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getGasPrice = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_gasPrice\n    });\n\n    this.getEstimateGas = transaction => this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_estimateGas\n    })([transaction]);\n  }\n\n  buildRequest(args) {\n    const {\n      call,\n      formatters\n    } = args;\n    return async params => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n\n      const payload = {\n        call,\n        params: params || []\n      };\n      const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n      return response.data;\n    };\n  }\n\n}\n\nexports.Eth = Eth;","map":{"version":3,"mappings":"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","names":["inputFormatters","defaultBlockParam","arg","returnFullTxObjectParam","blockNumberToHex","Number","isInteger","toString","Eth","constructor","communicator","call","buildRequest","constants_1","eth_call","formatters","getBalance","eth_getBalance","getCode","eth_getCode","getStorageAt","eth_getStorageAt","getPastLogs","eth_getLogs","getBlockByHash","eth_getBlockByHash","getBlockByNumber","eth_getBlockByNumber","getTransactionByHash","eth_getTransactionByHash","getTransactionReceipt","eth_getTransactionReceipt","getTransactionCount","eth_getTransactionCount","getGasPrice","eth_gasPrice","getEstimateGas","transaction","eth_estimateGas","args","params","Array","isArray","forEach","formatter","i","payload","response","send","methods_1","rpcCall","data","exports"],"sourceRoot":"","sources":["../../../src/eth/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}