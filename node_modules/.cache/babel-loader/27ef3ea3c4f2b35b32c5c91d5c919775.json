{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar defaults = require(\"lodash.defaults\");\n\nvar SHOULD_RECONNECT_FALSE_MESSAGE = \"Provided shouldReconnect() returned false. Closing permanently.\";\nvar SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE = \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nvar SturdyWebSocket =\n/** @class */\nfunction () {\n  function SturdyWebSocket(url, protocolsOrOptions, options) {\n    this.url = url;\n    this.onclose = null;\n    this.onerror = null;\n    this.onmessage = null;\n    this.onopen = null;\n    this.ondown = null;\n    this.onreopen = null;\n    this.CONNECTING = SturdyWebSocket.CONNECTING;\n    this.OPEN = SturdyWebSocket.OPEN;\n    this.CLOSING = SturdyWebSocket.CLOSING;\n    this.CLOSED = SturdyWebSocket.CLOSED;\n    this.hasBeenOpened = false;\n    this.isClosed = false;\n    this.messageBuffer = [];\n    this.nextRetryTime = 0;\n    this.reconnectCount = 0;\n    this.lastKnownExtensions = \"\";\n    this.lastKnownProtocol = \"\";\n    this.listeners = {};\n\n    if (protocolsOrOptions == null || typeof protocolsOrOptions === \"string\" || Array.isArray(protocolsOrOptions)) {\n      this.protocols = protocolsOrOptions;\n    } else {\n      options = protocolsOrOptions;\n    }\n\n    this.options = defaults({}, options, SturdyWebSocket.DEFAULT_OPTIONS);\n\n    if (!this.options.wsConstructor) {\n      if (typeof WebSocket !== \"undefined\") {\n        this.options.wsConstructor = WebSocket;\n      } else {\n        throw new Error(\"WebSocket not present in global scope and no \" + \"wsConstructor option was provided.\");\n      }\n    }\n\n    this.openNewWebSocket();\n  }\n\n  Object.defineProperty(SturdyWebSocket.prototype, \"binaryType\", {\n    get: function () {\n      return this.binaryTypeInternal || \"blob\";\n    },\n    set: function (binaryType) {\n      this.binaryTypeInternal = binaryType;\n\n      if (this.ws) {\n        this.ws.binaryType = binaryType;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"bufferedAmount\", {\n    get: function () {\n      var sum = this.ws ? this.ws.bufferedAmount : 0;\n      var hasUnknownAmount = false;\n      this.messageBuffer.forEach(function (data) {\n        var byteLength = getDataByteLength(data);\n\n        if (byteLength != null) {\n          sum += byteLength;\n        } else {\n          hasUnknownAmount = true;\n        }\n      });\n\n      if (hasUnknownAmount) {\n        this.debugLog(\"Some buffered data had unknown length. bufferedAmount()\" + \" return value may be below the correct amount.\");\n      }\n\n      return sum;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"extensions\", {\n    get: function () {\n      return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"protocol\", {\n    get: function () {\n      return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"readyState\", {\n    get: function () {\n      return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SturdyWebSocket.prototype.close = function (code, reason) {\n    if (this.ws) {\n      this.ws.close(code, reason);\n    }\n\n    this.shutdown();\n    this.debugLog(\"WebSocket permanently closed by client.\");\n  };\n\n  SturdyWebSocket.prototype.send = function (data) {\n    if (this.ws && this.ws.readyState === this.OPEN) {\n      this.ws.send(data);\n    } else {\n      this.messageBuffer.push(data);\n    }\n  };\n\n  SturdyWebSocket.prototype.addEventListener = function (type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n\n    this.listeners[type].push(listener);\n  };\n\n  SturdyWebSocket.prototype.dispatchEvent = function (event) {\n    return this.dispatchEventOfType(event.type, event);\n  };\n\n  SturdyWebSocket.prototype.removeEventListener = function (type, listener) {\n    if (this.listeners[type]) {\n      this.listeners[type] = this.listeners[type].filter(function (l) {\n        return l !== listener;\n      });\n    }\n  };\n\n  SturdyWebSocket.prototype.openNewWebSocket = function () {\n    var _this = this;\n\n    if (this.isClosed) {\n      return;\n    }\n\n    var _a = this.options,\n        connectTimeout = _a.connectTimeout,\n        wsConstructor = _a.wsConstructor;\n    this.debugLog(\"Opening new WebSocket to \" + this.url + \".\");\n    var ws = new wsConstructor(this.url, this.protocols);\n\n    ws.onclose = function (event) {\n      return _this.handleClose(event);\n    };\n\n    ws.onerror = function (event) {\n      return _this.handleError(event);\n    };\n\n    ws.onmessage = function (event) {\n      return _this.handleMessage(event);\n    };\n\n    ws.onopen = function (event) {\n      return _this.handleOpen(event);\n    };\n\n    this.connectTimeoutId = setTimeout(function () {\n      // If this is running, we still haven't opened the websocket.\n      // Kill it so we can try again.\n      _this.clearConnectTimeout();\n\n      ws.close();\n    }, connectTimeout);\n    this.ws = ws;\n  };\n\n  SturdyWebSocket.prototype.handleOpen = function (event) {\n    var _this = this;\n\n    if (!this.ws || this.isClosed) {\n      return;\n    }\n\n    var allClearResetTime = this.options.allClearResetTime;\n    this.debugLog(\"WebSocket opened.\");\n\n    if (this.binaryTypeInternal != null) {\n      this.ws.binaryType = this.binaryTypeInternal;\n    } else {\n      this.binaryTypeInternal = this.ws.binaryType;\n    }\n\n    this.clearConnectTimeout();\n\n    if (this.hasBeenOpened) {\n      this.dispatchEventOfType(\"reopen\", event);\n    } else {\n      this.dispatchEventOfType(\"open\", event);\n      this.hasBeenOpened = true;\n    }\n\n    this.messageBuffer.forEach(function (message) {\n      return _this.send(message);\n    });\n    this.messageBuffer = [];\n    this.allClearTimeoutId = setTimeout(function () {\n      _this.clearAllClearTimeout();\n\n      _this.nextRetryTime = 0;\n      _this.reconnectCount = 0;\n      var openTime = allClearResetTime / 1000 | 0;\n\n      _this.debugLog(\"WebSocket remained open for \" + openTime + \" seconds. Resetting\" + \" retry time and count.\");\n    }, allClearResetTime);\n  };\n\n  SturdyWebSocket.prototype.handleMessage = function (event) {\n    if (this.isClosed) {\n      return;\n    }\n\n    this.dispatchEventOfType(\"message\", event);\n  };\n\n  SturdyWebSocket.prototype.handleClose = function (event) {\n    var _this = this;\n\n    if (this.isClosed) {\n      return;\n    }\n\n    var _a = this.options,\n        maxReconnectAttempts = _a.maxReconnectAttempts,\n        shouldReconnect = _a.shouldReconnect;\n    this.clearConnectTimeout();\n    this.clearAllClearTimeout();\n\n    if (this.ws) {\n      this.lastKnownExtensions = this.ws.extensions;\n      this.lastKnownProtocol = this.ws.protocol;\n      this.ws = undefined;\n    }\n\n    this.dispatchEventOfType(\"down\", event);\n\n    if (this.reconnectCount >= maxReconnectAttempts) {\n      this.stopReconnecting(event, this.getTooManyFailedReconnectsMessage());\n      return;\n    }\n\n    var willReconnect = shouldReconnect(event);\n\n    if (typeof willReconnect === \"boolean\") {\n      this.handleWillReconnect(willReconnect, event, SHOULD_RECONNECT_FALSE_MESSAGE);\n    } else {\n      willReconnect.then(function (willReconnectResolved) {\n        if (_this.isClosed) {\n          return;\n        }\n\n        _this.handleWillReconnect(willReconnectResolved, event, SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE);\n      });\n    }\n  };\n\n  SturdyWebSocket.prototype.handleError = function (event) {\n    this.dispatchEventOfType(\"error\", event);\n    this.debugLog(\"WebSocket encountered an error.\");\n  };\n\n  SturdyWebSocket.prototype.handleWillReconnect = function (willReconnect, event, denialReason) {\n    if (willReconnect) {\n      this.reconnect();\n    } else {\n      this.stopReconnecting(event, denialReason);\n    }\n  };\n\n  SturdyWebSocket.prototype.reconnect = function () {\n    var _this = this;\n\n    var _a = this.options,\n        minReconnectDelay = _a.minReconnectDelay,\n        maxReconnectDelay = _a.maxReconnectDelay,\n        reconnectBackoffFactor = _a.reconnectBackoffFactor;\n    this.reconnectCount++;\n    var retryTime = this.nextRetryTime;\n    this.nextRetryTime = Math.max(minReconnectDelay, Math.min(this.nextRetryTime * reconnectBackoffFactor, maxReconnectDelay));\n    setTimeout(function () {\n      return _this.openNewWebSocket();\n    }, retryTime);\n    var retryTimeSeconds = retryTime / 1000 | 0;\n    this.debugLog(\"WebSocket was closed. Re-opening in \" + retryTimeSeconds + \" seconds.\");\n  };\n\n  SturdyWebSocket.prototype.stopReconnecting = function (event, debugReason) {\n    this.debugLog(debugReason);\n    this.shutdown();\n    this.dispatchEventOfType(\"close\", event);\n  };\n\n  SturdyWebSocket.prototype.shutdown = function () {\n    this.isClosed = true;\n    this.clearAllTimeouts();\n    this.messageBuffer = [];\n  };\n\n  SturdyWebSocket.prototype.clearAllTimeouts = function () {\n    this.clearConnectTimeout();\n    this.clearAllClearTimeout();\n  };\n\n  SturdyWebSocket.prototype.clearConnectTimeout = function () {\n    if (this.connectTimeoutId != null) {\n      clearTimeout(this.connectTimeoutId);\n      this.connectTimeoutId = undefined;\n    }\n  };\n\n  SturdyWebSocket.prototype.clearAllClearTimeout = function () {\n    if (this.allClearTimeoutId != null) {\n      clearTimeout(this.allClearTimeoutId);\n      this.allClearTimeoutId = undefined;\n    }\n  };\n\n  SturdyWebSocket.prototype.dispatchEventOfType = function (type, event) {\n    var _this = this;\n\n    switch (type) {\n      case \"close\":\n        if (this.onclose) {\n          this.onclose(event);\n        }\n\n        break;\n\n      case \"error\":\n        if (this.onerror) {\n          this.onerror(event);\n        }\n\n        break;\n\n      case \"message\":\n        if (this.onmessage) {\n          this.onmessage(event);\n        }\n\n        break;\n\n      case \"open\":\n        if (this.onopen) {\n          this.onopen(event);\n        }\n\n        break;\n\n      case \"down\":\n        if (this.ondown) {\n          this.ondown(event);\n        }\n\n        break;\n\n      case \"reopen\":\n        if (this.onreopen) {\n          this.onreopen(event);\n        }\n\n        break;\n    }\n\n    if (type in this.listeners) {\n      this.listeners[type].slice().forEach(function (listener) {\n        return _this.callListener(listener, event);\n      });\n    }\n\n    return !event || !event.defaultPrevented;\n  };\n\n  SturdyWebSocket.prototype.callListener = function (listener, event) {\n    if (typeof listener === \"function\") {\n      listener.call(this, event);\n    } else {\n      listener.handleEvent.call(this, event);\n    }\n  };\n\n  SturdyWebSocket.prototype.debugLog = function (message) {\n    if (this.options.debug) {\n      // tslint:disable-next-line:no-console\n      console.log(message);\n    }\n  };\n\n  SturdyWebSocket.prototype.getTooManyFailedReconnectsMessage = function () {\n    var maxReconnectAttempts = this.options.maxReconnectAttempts;\n    return \"Failed to reconnect after \" + maxReconnectAttempts + \" \" + pluralize(\"attempt\", maxReconnectAttempts) + \". Closing permanently.\";\n  };\n\n  SturdyWebSocket.DEFAULT_OPTIONS = {\n    allClearResetTime: 5000,\n    connectTimeout: 5000,\n    debug: false,\n    minReconnectDelay: 1000,\n    maxReconnectDelay: 30000,\n    maxReconnectAttempts: Number.POSITIVE_INFINITY,\n    reconnectBackoffFactor: 1.5,\n    shouldReconnect: function () {\n      return true;\n    },\n    wsConstructor: undefined\n  };\n  SturdyWebSocket.CONNECTING = 0;\n  SturdyWebSocket.OPEN = 1;\n  SturdyWebSocket.CLOSING = 2;\n  SturdyWebSocket.CLOSED = 3;\n  return SturdyWebSocket;\n}();\n\nexports.default = SturdyWebSocket;\n\nfunction getDataByteLength(data) {\n  if (typeof data === \"string\") {\n    // UTF-16 strings use two bytes per character.\n    return 2 * data.length;\n  } else if (data instanceof ArrayBuffer) {\n    return data.byteLength;\n  } else if (data instanceof Blob) {\n    return data.size;\n  } else {\n    return undefined;\n  }\n}\n\nfunction pluralize(s, n) {\n  return n === 1 ? s : s + \"s\";\n}","map":{"version":3,"mappings":"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","names":["SHOULD_RECONNECT_FALSE_MESSAGE","SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE","url","protocolsOrOptions","options","SturdyWebSocket","CONNECTING","OPEN","CLOSING","CLOSED","Array","isArray","protocols","defaults","DEFAULT_OPTIONS","wsConstructor","WebSocket","Error","openNewWebSocket","Object","binaryTypeInternal","binaryType","ws","sum","bufferedAmount","hasUnknownAmount","messageBuffer","forEach","byteLength","getDataByteLength","data","debugLog","extensions","lastKnownExtensions","protocol","lastKnownProtocol","isClosed","code","reason","close","shutdown","readyState","send","push","type","listener","listeners","event","dispatchEventOfType","filter","connectTimeout","onclose","handleClose","onerror","handleError","onmessage","handleMessage","onopen","handleOpen","connectTimeoutId","setTimeout","_this","clearConnectTimeout","hasBeenOpened","message","allClearTimeoutId","clearAllClearTimeout","nextRetryTime","reconnectCount","openTime","allClearResetTime","maxReconnectAttempts","shouldReconnect","undefined","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","then","willReconnectResolved","denialReason","reconnect","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","Math","max","min","retryTimeSeconds","debugReason","clearAllTimeouts","clearTimeout","ondown","onreopen","slice","callListener","defaultPrevented","call","handleEvent","debug","console","log","pluralize","Number","POSITIVE_INFINITY","length","ArrayBuffer","Blob","size","s","n"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":["import defaults = require(\"lodash.defaults\");\n\nexport interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (\n        url: string,\n        protocols?: string | string[],\n    ) => WebSocket;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options?: Options,\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = defaults({}, options, SturdyWebSocket.DEFAULT_OPTIONS);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        if (this.ws) {\n            this.ws.close(code, reason);\n        }\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            ws.close();\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.ws = undefined;\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reconnect();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reconnect(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(event: CloseEvent, debugReason: string): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        this.dispatchEventOfType(\"close\", event);\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n"]},"metadata":{},"sourceType":"script"}