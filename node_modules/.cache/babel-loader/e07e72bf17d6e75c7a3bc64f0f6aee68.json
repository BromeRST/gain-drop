{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n/**\n * @license\n * https://github.com/bitcoincashjs/cashaddr\n * Copyright (c) 2017-2018 Emilio Almansi\n * Distributed under the MIT software license, see the accompanying\n * file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n */\n\nconst validation_1 = require('./validation');\n/**\n * Base32 encoding and decoding.\n *\n * @module base32\n */\n\n/**\n * Charset containing the 32 symbols used in the base32 encoding.\n * @private\n */\n\n\nconst CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n/**\n * Inverted index mapping each symbol into its index within the charset.\n * @private\n */\n\nconst CHARSET_INVERSE_INDEX = {\n  q: 0,\n  p: 1,\n  z: 2,\n  r: 3,\n  y: 4,\n  9: 5,\n  x: 6,\n  8: 7,\n  g: 8,\n  f: 9,\n  2: 10,\n  t: 11,\n  v: 12,\n  d: 13,\n  w: 14,\n  0: 15,\n  s: 16,\n  3: 17,\n  j: 18,\n  n: 19,\n  5: 20,\n  4: 21,\n  k: 22,\n  h: 23,\n  c: 24,\n  e: 25,\n  6: 26,\n  m: 27,\n  u: 28,\n  a: 29,\n  7: 30,\n  l: 31\n};\n/**\n * Encodes the given array of 5-bit integers as a base32-encoded string.\n *\n * @static\n * @param {Uint8Array} data Array of integers between 0 and 31 inclusive.\n * @returns {string}\n * @throws {ValidationError}\n */\n\nfunction encode(data) {\n  validation_1.validate(data instanceof Uint8Array, 'Invalid data: ' + data + '.');\n  let base32 = '';\n\n  for (const value of data) {\n    validation_1.validate(0 <= value && value < 32, 'Invalid value: ' + value + '.');\n    base32 += CHARSET[value];\n  }\n\n  return base32;\n}\n\nexports.encode = encode;\n/**\n * Decodes the given base32-encoded string into an array of 5-bit integers.\n *\n * @static\n * @param {string} string\n * @returns {Uint8Array}\n * @throws {ValidationError}\n */\n\nfunction decode(strng) {\n  validation_1.validate(typeof strng === 'string', 'Invalid base32-encoded string: ' + strng + '.');\n  const data = new Uint8Array(strng.length);\n\n  for (let i = 0; i < strng.length; ++i) {\n    const value = strng[i];\n    validation_1.validate(value in CHARSET_INVERSE_INDEX, 'Invalid value: ' + value + '.');\n    data[i] = CHARSET_INVERSE_INDEX[value];\n  }\n\n  return data;\n}\n\nexports.decode = decode;","map":{"version":3,"sources":["/Users/massimilianoalbini/Documents/gain-drop/gain-drop/node_modules/@shapeshiftoss/bitcoinjs-lib/src/cashaddr/base32.js"],"names":["Object","defineProperty","exports","value","validation_1","require","CHARSET","CHARSET_INVERSE_INDEX","q","p","z","r","y","x","g","f","t","v","d","w","s","j","n","k","h","c","e","m","u","a","l","encode","data","validate","Uint8Array","base32","decode","strng","length","i"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\n/**\n * @license\n * https://github.com/bitcoincashjs/cashaddr\n * Copyright (c) 2017-2018 Emilio Almansi\n * Distributed under the MIT software license, see the accompanying\n * file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n */\nconst validation_1 = require('./validation');\n/**\n * Base32 encoding and decoding.\n *\n * @module base32\n */\n/**\n * Charset containing the 32 symbols used in the base32 encoding.\n * @private\n */\nconst CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n/**\n * Inverted index mapping each symbol into its index within the charset.\n * @private\n */\nconst CHARSET_INVERSE_INDEX = {\n  q: 0,\n  p: 1,\n  z: 2,\n  r: 3,\n  y: 4,\n  9: 5,\n  x: 6,\n  8: 7,\n  g: 8,\n  f: 9,\n  2: 10,\n  t: 11,\n  v: 12,\n  d: 13,\n  w: 14,\n  0: 15,\n  s: 16,\n  3: 17,\n  j: 18,\n  n: 19,\n  5: 20,\n  4: 21,\n  k: 22,\n  h: 23,\n  c: 24,\n  e: 25,\n  6: 26,\n  m: 27,\n  u: 28,\n  a: 29,\n  7: 30,\n  l: 31,\n};\n/**\n * Encodes the given array of 5-bit integers as a base32-encoded string.\n *\n * @static\n * @param {Uint8Array} data Array of integers between 0 and 31 inclusive.\n * @returns {string}\n * @throws {ValidationError}\n */\nfunction encode(data) {\n  validation_1.validate(\n    data instanceof Uint8Array,\n    'Invalid data: ' + data + '.',\n  );\n  let base32 = '';\n  for (const value of data) {\n    validation_1.validate(\n      0 <= value && value < 32,\n      'Invalid value: ' + value + '.',\n    );\n    base32 += CHARSET[value];\n  }\n  return base32;\n}\nexports.encode = encode;\n/**\n * Decodes the given base32-encoded string into an array of 5-bit integers.\n *\n * @static\n * @param {string} string\n * @returns {Uint8Array}\n * @throws {ValidationError}\n */\nfunction decode(strng) {\n  validation_1.validate(\n    typeof strng === 'string',\n    'Invalid base32-encoded string: ' + strng + '.',\n  );\n  const data = new Uint8Array(strng.length);\n  for (let i = 0; i < strng.length; ++i) {\n    const value = strng[i];\n    validation_1.validate(\n      value in CHARSET_INVERSE_INDEX,\n      'Invalid value: ' + value + '.',\n    );\n    data[i] = CHARSET_INVERSE_INDEX[value];\n  }\n  return data;\n}\nexports.decode = decode;\n"]},"metadata":{},"sourceType":"script"}