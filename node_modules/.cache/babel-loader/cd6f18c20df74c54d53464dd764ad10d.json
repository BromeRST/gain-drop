{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoHDKey = void 0;\n\nconst bs58check_1 = require(\"bs58check\");\n\nconst CryptoCoinInfo_1 = require(\"./CryptoCoinInfo\");\n\nconst CryptoKeypath_1 = require(\"./CryptoKeypath\");\n\nconst lib_1 = require(\"./lib\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"is_master\"] = 1] = \"is_master\";\n  Keys[Keys[\"is_private\"] = 2] = \"is_private\";\n  Keys[Keys[\"key_data\"] = 3] = \"key_data\";\n  Keys[Keys[\"chain_code\"] = 4] = \"chain_code\";\n  Keys[Keys[\"use_info\"] = 5] = \"use_info\";\n  Keys[Keys[\"origin\"] = 6] = \"origin\";\n  Keys[Keys[\"children\"] = 7] = \"children\";\n  Keys[Keys[\"parent_fingerprint\"] = 8] = \"parent_fingerprint\";\n  Keys[Keys[\"name\"] = 9] = \"name\";\n  Keys[Keys[\"note\"] = 10] = \"note\";\n})(Keys || (Keys = {}));\n\nclass CryptoHDKey extends RegistryItem_1.RegistryItem {\n  constructor(args) {\n    super();\n\n    this.getKey = () => this.key;\n\n    this.getChainCode = () => this.chainCode;\n\n    this.isMaster = () => this.master;\n\n    this.isPrivateKey = () => !!this.privateKey;\n\n    this.getUseInfo = () => this.useInfo;\n\n    this.getOrigin = () => this.origin;\n\n    this.getChildren = () => this.children;\n\n    this.getParentFingerprint = () => this.parentFingerprint;\n\n    this.getName = () => this.name;\n\n    this.getNote = () => this.note;\n\n    this.getBip32Key = () => {\n      let version;\n      let depth;\n      let index;\n      let parentFingerprint = Buffer.alloc(4).fill(0);\n\n      if (this.isMaster()) {\n        version = Buffer.from(\"0488ADE4\", \"hex\");\n        depth = 0;\n        index = 0;\n      } else {\n        depth = this.getOrigin().getComponents().length || this.getOrigin().getDepth();\n        const paths = this.getOrigin().getComponents();\n        const lastPath = paths[paths.length - 1];\n\n        if (lastPath) {\n          index = lastPath.isHardened() ? lastPath.getIndex() + 0x80000000 : lastPath.getIndex();\n          parentFingerprint = this.getParentFingerprint();\n        }\n\n        if (this.isPrivateKey()) {\n          version = Buffer.from('0488ADE4', 'hex');\n        } else {\n          version = Buffer.from('0488B21E', 'hex');\n        }\n      }\n\n      const depthBuffer = Buffer.alloc(1);\n      depthBuffer.writeUInt8(depth, 0);\n      const indexBuffer = Buffer.alloc(4);\n      indexBuffer.writeUInt32BE(index, 0);\n      const chainCode = this.getChainCode();\n      const key = this.getKey();\n      return bs58check_1.encode(Buffer.concat([version, depthBuffer, parentFingerprint, indexBuffer, chainCode, key]));\n    };\n\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_HDKEY;\n    };\n\n    this.setupMasterKey = args => {\n      this.master = true;\n      this.key = args.key;\n      this.chainCode = args.chainCode;\n    };\n\n    this.setupDeriveKey = args => {\n      this.master = false;\n      this.privateKey = args.isPrivateKey;\n      this.key = args.key;\n      this.chainCode = args.chainCode;\n      this.useInfo = args.useInfo;\n      this.origin = args.origin;\n      this.children = args.children;\n      this.parentFingerprint = args.parentFingerprint;\n      this.name = args.name;\n      this.note = args.note;\n    };\n\n    this.toDataItem = () => {\n      const map = {};\n\n      if (this.master) {\n        map[Keys.is_master] = true;\n        map[Keys.key_data] = this.key;\n        map[Keys.chain_code] = this.chainCode;\n      } else {\n        if (this.privateKey !== undefined) {\n          map[Keys.is_private] = this.privateKey;\n        }\n\n        map[Keys.key_data] = this.key;\n\n        if (this.chainCode) {\n          map[Keys.chain_code] = this.chainCode;\n        }\n\n        if (this.useInfo) {\n          const useInfo = this.useInfo.toDataItem();\n          useInfo.setTag(this.useInfo.getRegistryType().getTag());\n          map[Keys.use_info] = useInfo;\n        }\n\n        if (this.origin) {\n          const origin = this.origin.toDataItem();\n          origin.setTag(this.origin.getRegistryType().getTag());\n          map[Keys.origin] = origin;\n        }\n\n        if (this.children) {\n          const children = this.children.toDataItem();\n          children.setTag(this.children.getRegistryType().getTag());\n          map[Keys.children] = children;\n        }\n\n        if (this.parentFingerprint) {\n          map[Keys.parent_fingerprint] = this.parentFingerprint.readUInt32BE(0);\n        }\n\n        if (this.name !== undefined) {\n          map[Keys.name] = this.name;\n        }\n\n        if (this.note !== undefined) {\n          map[Keys.note] = this.note;\n        }\n      }\n\n      return new lib_1.DataItem(map);\n    };\n\n    if (args.isMaster) {\n      this.setupMasterKey(args);\n    } else {\n      this.setupDeriveKey(args);\n    }\n  }\n\n}\n\nexports.CryptoHDKey = CryptoHDKey;\n\nCryptoHDKey.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const isMaster = !!map[Keys.is_master];\n  const isPrivateKey = map[Keys.is_private];\n  const key = map[Keys.key_data];\n  const chainCode = map[Keys.chain_code];\n  const useInfo = map[Keys.use_info] ? CryptoCoinInfo_1.CryptoCoinInfo.fromDataItem(map[Keys.use_info]) : undefined;\n  const origin = map[Keys.origin] ? CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.origin]) : undefined;\n  const children = map[Keys.children] ? CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.children]) : undefined;\n  let _parentFingerprint = map[Keys.parent_fingerprint];\n  let parentFingerprint;\n\n  if (_parentFingerprint) {\n    parentFingerprint = Buffer.alloc(4);\n    parentFingerprint.writeUInt32BE(_parentFingerprint, 0);\n  }\n\n  const name = map[Keys.name];\n  const note = map[Keys.note];\n  return new CryptoHDKey({\n    isMaster,\n    isPrivateKey,\n    key,\n    chainCode,\n    useInfo,\n    origin,\n    children,\n    parentFingerprint,\n    name,\n    note\n  });\n};\n\nCryptoHDKey.fromCBOR = _cborPayload => {\n  const dataItem = lib_1.decodeToDataItem(_cborPayload);\n  return CryptoHDKey.fromDataItem(dataItem);\n};","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAKA,IAAL;;AAAA,WAAKA,IAAL,EAAS;AACPA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACD,CAXD,EAAKA,IAAI,KAAJA,IAAI,MAAT;;AA+BA,MAAaC,WAAb,SAAiCC,2BAAjC,CAA6C;AA2D3CC,cAAYC,IAAZ,EAAiD;AAC/C;;AAhDK,kBAAS,MAAM,KAAKC,GAApB;;AACA,wBAAe,MAAM,KAAKC,SAA1B;;AACA,oBAAW,MAAM,KAAKC,MAAtB;;AACA,wBAAe,MAAM,CAAC,CAAC,KAAKC,UAA5B;;AACA,sBAAa,MAAM,KAAKC,OAAxB;;AACA,qBAAY,MAAM,KAAKC,MAAvB;;AACA,uBAAc,MAAM,KAAKC,QAAzB;;AACA,gCAAuB,MAAM,KAAKC,iBAAlC;;AACA,mBAAU,MAAM,KAAKC,IAArB;;AACA,mBAAU,MAAM,KAAKC,IAArB;;AACA,uBAAc,MAAK;AACxB,UAAIC,OAAJ;AACA,UAAIC,KAAJ;AACA,UAAIC,KAAJ;AACA,UAAIL,iBAAiB,GAAWM,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgBC,IAAhB,CAAqB,CAArB,CAAhC;;AACA,UAAG,KAAKC,QAAL,EAAH,EAAoB;AAElBN,eAAO,GAAGG,MAAM,CAACI,IAAP,CAAY,UAAZ,EAAwB,KAAxB,CAAV;AACAN,aAAK,GAAG,CAAR;AACAC,aAAK,GAAG,CAAR;AACD,OALD,MAKO;AACLD,aAAK,GAAG,KAAKO,SAAL,GAAiBC,aAAjB,GAAiCC,MAAjC,IAA2C,KAAKF,SAAL,GAAiBG,QAAjB,EAAnD;AACA,cAAMC,KAAK,GAAG,KAAKJ,SAAL,GAAiBC,aAAjB,EAAd;AACA,cAAMI,QAAQ,GAAGD,KAAK,CAACA,KAAK,CAACF,MAAN,GAAe,CAAhB,CAAtB;;AACA,YAAGG,QAAH,EAAa;AACXX,eAAK,GAAGW,QAAQ,CAACC,UAAT,KAAwBD,QAAQ,CAACE,QAAT,KAAuB,UAA/C,GAA4DF,QAAQ,CAACE,QAAT,EAApE;AACAlB,2BAAiB,GAAG,KAAKmB,oBAAL,EAApB;AACD;;AACD,YAAG,KAAKC,YAAL,EAAH,EAAwB;AACtBjB,iBAAO,GAAGG,MAAM,CAACI,IAAP,CAAY,UAAZ,EAAwB,KAAxB,CAAV;AACD,SAFD,MAEO;AACLP,iBAAO,GAAGG,MAAM,CAACI,IAAP,CAAY,UAAZ,EAAwB,KAAxB,CAAV;AACD;AACF;;AACD,YAAMW,WAAW,GAAGf,MAAM,CAACC,KAAP,CAAa,CAAb,CAApB;AACAc,iBAAW,CAACC,UAAZ,CAAuBlB,KAAvB,EAA8B,CAA9B;AACA,YAAMmB,WAAW,GAAGjB,MAAM,CAACC,KAAP,CAAa,CAAb,CAApB;AACAgB,iBAAW,CAACC,aAAZ,CAA0BnB,KAA1B,EAAiC,CAAjC;AACA,YAAMX,SAAS,GAAG,KAAK+B,YAAL,EAAlB;AACA,YAAMhC,GAAG,GAAG,KAAKiC,MAAL,EAAZ;AACA,aAAOC,mBAAOrB,MAAM,CAACsB,MAAP,CAAc,CAACzB,OAAD,EAAUkB,WAAV,EAAuBrB,iBAAvB,EAA0CuB,WAA1C,EAAuD7B,SAAvD,EAAkED,GAAlE,CAAd,CAAP,CAAP;AACD,KA/BM;;AAiCA,2BAAkB,MAAK;AAC5B,aAAOoC,6BAAcC,YAArB;AACD,KAFM;;AAaC,0BAAkBtC,IAAD,IAAyB;AAChD,WAAKG,MAAL,GAAc,IAAd;AACA,WAAKF,GAAL,GAAWD,IAAI,CAACC,GAAhB;AACA,WAAKC,SAAL,GAAiBF,IAAI,CAACE,SAAtB;AACD,KAJO;;AAMA,0BAAkBF,IAAD,IAAyB;AAChD,WAAKG,MAAL,GAAc,KAAd;AACA,WAAKC,UAAL,GAAkBJ,IAAI,CAAC4B,YAAvB;AACA,WAAK3B,GAAL,GAAWD,IAAI,CAACC,GAAhB;AACA,WAAKC,SAAL,GAAiBF,IAAI,CAACE,SAAtB;AACA,WAAKG,OAAL,GAAeL,IAAI,CAACK,OAApB;AACA,WAAKC,MAAL,GAAcN,IAAI,CAACM,MAAnB;AACA,WAAKC,QAAL,GAAgBP,IAAI,CAACO,QAArB;AACA,WAAKC,iBAAL,GAAyBR,IAAI,CAACQ,iBAA9B;AACA,WAAKC,IAAL,GAAYT,IAAI,CAACS,IAAjB;AACA,WAAKC,IAAL,GAAYV,IAAI,CAACU,IAAjB;AACD,KAXO;;AAaD,sBAAa,MAAK;AACvB,YAAM6B,GAAG,GAAG,EAAZ;;AACA,UAAI,KAAKpC,MAAT,EAAiB;AACfoC,WAAG,CAAC3C,IAAI,CAAC4C,SAAN,CAAH,GAAsB,IAAtB;AACAD,WAAG,CAAC3C,IAAI,CAAC6C,QAAN,CAAH,GAAqB,KAAKxC,GAA1B;AACAsC,WAAG,CAAC3C,IAAI,CAAC8C,UAAN,CAAH,GAAuB,KAAKxC,SAA5B;AACD,OAJD,MAIO;AACL,YAAI,KAAKE,UAAL,KAAoBuC,SAAxB,EAAmC;AACjCJ,aAAG,CAAC3C,IAAI,CAACgD,UAAN,CAAH,GAAuB,KAAKxC,UAA5B;AACD;;AACDmC,WAAG,CAAC3C,IAAI,CAAC6C,QAAN,CAAH,GAAqB,KAAKxC,GAA1B;;AACA,YAAI,KAAKC,SAAT,EAAoB;AAClBqC,aAAG,CAAC3C,IAAI,CAAC8C,UAAN,CAAH,GAAuB,KAAKxC,SAA5B;AACD;;AACD,YAAI,KAAKG,OAAT,EAAkB;AAChB,gBAAMA,OAAO,GAAG,KAAKA,OAAL,CAAawC,UAAb,EAAhB;AACAxC,iBAAO,CAACyC,MAAR,CAAe,KAAKzC,OAAL,CAAa0C,eAAb,GAA+BC,MAA/B,EAAf;AACAT,aAAG,CAAC3C,IAAI,CAACqD,QAAN,CAAH,GAAqB5C,OAArB;AACD;;AACD,YAAI,KAAKC,MAAT,EAAiB;AACf,gBAAMA,MAAM,GAAG,KAAKA,MAAL,CAAYuC,UAAZ,EAAf;AACAvC,gBAAM,CAACwC,MAAP,CAAc,KAAKxC,MAAL,CAAYyC,eAAZ,GAA8BC,MAA9B,EAAd;AACAT,aAAG,CAAC3C,IAAI,CAACU,MAAN,CAAH,GAAmBA,MAAnB;AACD;;AACD,YAAI,KAAKC,QAAT,EAAmB;AACjB,gBAAMA,QAAQ,GAAG,KAAKA,QAAL,CAAcsC,UAAd,EAAjB;AACAtC,kBAAQ,CAACuC,MAAT,CAAgB,KAAKvC,QAAL,CAAcwC,eAAd,GAAgCC,MAAhC,EAAhB;AACAT,aAAG,CAAC3C,IAAI,CAACW,QAAN,CAAH,GAAqBA,QAArB;AACD;;AACD,YAAI,KAAKC,iBAAT,EAA4B;AAC1B+B,aAAG,CAAC3C,IAAI,CAACsD,kBAAN,CAAH,GAA+B,KAAK1C,iBAAL,CAAuB2C,YAAvB,CAAoC,CAApC,CAA/B;AACD;;AACD,YAAI,KAAK1C,IAAL,KAAckC,SAAlB,EAA6B;AAC3BJ,aAAG,CAAC3C,IAAI,CAACa,IAAN,CAAH,GAAiB,KAAKA,IAAtB;AACD;;AACD,YAAI,KAAKC,IAAL,KAAciC,SAAlB,EAA6B;AAC3BJ,aAAG,CAAC3C,IAAI,CAACc,IAAN,CAAH,GAAiB,KAAKA,IAAtB;AACD;AACF;;AACD,aAAO,IAAI0C,cAAJ,CAAab,GAAb,CAAP;AACD,KAxCM;;AA1BL,QAAIvC,IAAI,CAACiB,QAAT,EAAmB;AACjB,WAAKoC,cAAL,CAAoBrD,IAApB;AACD,KAFD,MAEO;AACL,WAAKsD,cAAL,CAAoBtD,IAApB;AACD;AACF;;AAlE0C;;AAA7CuD;;AAiIgB1D,2BAAgB2D,QAAD,IAAuB;AAClD,QAAMjB,GAAG,GAAGiB,QAAQ,CAACC,OAAT,EAAZ;AACA,QAAMxC,QAAQ,GAAG,CAAC,CAACsB,GAAG,CAAC3C,IAAI,CAAC4C,SAAN,CAAtB;AACA,QAAMZ,YAAY,GAAGW,GAAG,CAAC3C,IAAI,CAACgD,UAAN,CAAxB;AACA,QAAM3C,GAAG,GAAGsC,GAAG,CAAC3C,IAAI,CAAC6C,QAAN,CAAf;AACA,QAAMvC,SAAS,GAAGqC,GAAG,CAAC3C,IAAI,CAAC8C,UAAN,CAArB;AACA,QAAMrC,OAAO,GAAGkC,GAAG,CAAC3C,IAAI,CAACqD,QAAN,CAAH,GACZS,gCAAeC,YAAf,CAA4BpB,GAAG,CAAC3C,IAAI,CAACqD,QAAN,CAA/B,CADY,GAEZN,SAFJ;AAGA,QAAMrC,MAAM,GAAGiC,GAAG,CAAC3C,IAAI,CAACU,MAAN,CAAH,GACXsD,8BAAcD,YAAd,CAA2BpB,GAAG,CAAC3C,IAAI,CAACU,MAAN,CAA9B,CADW,GAEXqC,SAFJ;AAGA,QAAMpC,QAAQ,GAAGgC,GAAG,CAAC3C,IAAI,CAACW,QAAN,CAAH,GACbqD,8BAAcD,YAAd,CAA2BpB,GAAG,CAAC3C,IAAI,CAACW,QAAN,CAA9B,CADa,GAEboC,SAFJ;AAGA,MAAIkB,kBAAkB,GAAGtB,GAAG,CAAC3C,IAAI,CAACsD,kBAAN,CAA5B;AACA,MAAI1C,iBAAJ;;AACA,MAAIqD,kBAAJ,EAAwB;AACtBrD,qBAAiB,GAAGM,MAAM,CAACC,KAAP,CAAa,CAAb,CAApB;AACAP,qBAAiB,CAACwB,aAAlB,CAAgC6B,kBAAhC,EAAoD,CAApD;AACD;;AACD,QAAMpD,IAAI,GAAG8B,GAAG,CAAC3C,IAAI,CAACa,IAAN,CAAhB;AACA,QAAMC,IAAI,GAAG6B,GAAG,CAAC3C,IAAI,CAACc,IAAN,CAAhB;AAEA,SAAO,IAAIb,WAAJ,CAAgB;AACrBoB,YADqB;AAErBW,gBAFqB;AAGrB3B,OAHqB;AAIrBC,aAJqB;AAKrBG,WALqB;AAMrBC,UANqB;AAOrBC,YAPqB;AAQrBC,qBARqB;AASrBC,QATqB;AAUrBC;AAVqB,GAAhB,CAAP;AAYD,CApCa;;AAsCAb,uBAAYiE,YAAD,IAAyB;AAChD,QAAMN,QAAQ,GAAGJ,uBAAiBU,YAAjB,CAAjB;AACA,SAAOjE,WAAW,CAAC8D,YAAZ,CAAyBH,QAAzB,CAAP;AACD,CAHa","names":["Keys","CryptoHDKey","RegistryItem_1","constructor","args","key","chainCode","master","privateKey","useInfo","origin","children","parentFingerprint","name","note","version","depth","index","Buffer","alloc","fill","isMaster","from","getOrigin","getComponents","length","getDepth","paths","lastPath","isHardened","getIndex","getParentFingerprint","isPrivateKey","depthBuffer","writeUInt8","indexBuffer","writeUInt32BE","getChainCode","getKey","bs58check_1","concat","RegistryType_1","CRYPTO_HDKEY","map","is_master","key_data","chain_code","undefined","is_private","toDataItem","setTag","getRegistryType","getTag","use_info","parent_fingerprint","readUInt32BE","lib_1","setupMasterKey","setupDeriveKey","exports","dataItem","getData","CryptoCoinInfo_1","fromDataItem","CryptoKeypath_1","_parentFingerprint","_cborPayload"],"sourceRoot":"","sources":["../src/CryptoHDKey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}