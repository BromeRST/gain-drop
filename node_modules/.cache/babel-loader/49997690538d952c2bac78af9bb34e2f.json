{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.btcIsSameAccount = exports.btcGetAccountPaths = exports.btcVerifyMessage = exports.btcSignMessage = exports.btcSupportsNativeShapeShift = exports.btcSupportsSecureTransfer = exports.btcSignTx = exports.btcGetAddress = exports.btcSupportsScriptType = exports.btcSupportsCoin = void 0;\n\nconst Exchange = __importStar(require(\"@keepkey/device-protocol/lib/exchange_pb\"));\n\nconst Messages = __importStar(require(\"@keepkey/device-protocol/lib/messages_pb\"));\n\nconst Types = __importStar(require(\"@keepkey/device-protocol/lib/types_pb\"));\n\nconst core = __importStar(require(\"@shapeshiftoss/hdwallet-core\"));\n\nconst bitcoinjs = __importStar(require(\"@shapeshiftoss/bitcoinjs-lib\"));\n\nconst utils_1 = require(\"./utils\");\n\nconst icepick_1 = require(\"icepick\"); // FIXME: load this from the device's coin table, or from some static features\n// table... instead of, you know, adding another God-forsaken coin table.\n// :facepalm:\n\n\nconst supportedCoins = [\"Bitcoin\", \"Testnet\", \"BitcoinCash\", \"BitcoinGold\", \"Litecoin\", \"Dash\", \"DigiByte\", \"Dogecoin\"];\nconst segwitCoins = [\"Bitcoin\", \"Testnet\", \"BitcoinGold\", \"Litecoin\"];\n\nfunction legacyAccount(coin, slip44, accountIdx) {\n  return {\n    coin,\n    scriptType: core.BTCInputScriptType.SpendAddress,\n    addressNList: [0x80000000 + 44, 0x80000000 + slip44, 0x80000000 + accountIdx]\n  };\n}\n\nfunction segwitAccount(coin, slip44, accountIdx) {\n  return {\n    coin,\n    scriptType: core.BTCInputScriptType.SpendP2SHWitness,\n    addressNList: [0x80000000 + 49, 0x80000000 + slip44, 0x80000000 + accountIdx]\n  };\n}\n\nfunction segwitNativeAccount(coin, slip44, accountIdx) {\n  return {\n    coin,\n    scriptType: core.BTCInputScriptType.SpendWitness,\n    addressNList: [0x80000000 + 84, 0x80000000 + slip44, 0x80000000 + accountIdx]\n  };\n}\n\nfunction packVarint(n) {\n  if (n < 253) return n.toString(16).padStart(2, \"0\");else if (n < 0xffff) return \"FD\" + n.toString(16).padStart(4, \"0\");else if (n < 0xffffffff) return \"FE\" + n.toString(16).padStart(8, \"0\");else return \"FF\" + n.toString(16).padStart(16, \"0\");\n}\n\nfunction prepareSignTx(coin, inputs, outputs) {\n  const unsignedTx = new Types.TransactionType();\n  unsignedTx.setInputsCnt(inputs.length);\n  unsignedTx.setOutputsCnt(outputs.length);\n  inputs.forEach((input, i) => {\n    const utxo = new Types.TxInputType();\n    utxo.setPrevHash(core.fromHexString(input.txid));\n    utxo.setPrevIndex(input.vout);\n    if (input.sequence !== undefined) utxo.setSequence(input.sequence);\n    utxo.setScriptType(utils_1.translateInputScriptType(input.scriptType));\n    utxo.setAddressNList(input.addressNList);\n    utxo.setAmount(Number(input.amount));\n    unsignedTx.addInputs(utxo, i);\n  });\n  outputs.forEach((o, k) => {\n    var _a, _b;\n\n    const output = o;\n    const newOutput = new Types.TxOutputType();\n    newOutput.setAmount(Number(output.amount));\n\n    if (output.exchangeType) {\n      // BTCSignTxOutputExchange\n      // convert the base64 encoded signedExchangeResponse message into the correct object\n      const signedHex = core.base64toHEX(output.exchangeType.signedExchangeResponse);\n      const signedExchange = Exchange.SignedExchangeResponse.deserializeBinary(core.arrayify(signedHex)); // decode the deposit amount from a little-endian Uint8Array into an unsigned uint64\n\n      let depAmt = core.mustBeDefined(signedExchange.getResponsev2()).getDepositAmount_asU8();\n      let val = 0;\n\n      for (let jj = depAmt.length - 1; jj >= 0; jj--) {\n        val += depAmt[jj] * Math.pow(2, 8 * (depAmt.length - jj - 1)); // TODO validate is uint64\n      }\n\n      const outExchangeType = new Types.ExchangeType();\n      outExchangeType.setSignedExchangeResponse(signedExchange);\n      outExchangeType.setWithdrawalCoinName(output.exchangeType.withdrawalCoinName);\n      outExchangeType.setWithdrawalAddressNList(output.exchangeType.withdrawalAddressNList);\n      outExchangeType.setWithdrawalScriptType(utils_1.translateInputScriptType(output.exchangeType.withdrawalScriptType || core.BTCInputScriptType.SpendAddress));\n      outExchangeType.setReturnAddressNList(output.exchangeType.returnAddressNList);\n      outExchangeType.setReturnScriptType(utils_1.translateInputScriptType(output.exchangeType.returnScriptType || core.BTCInputScriptType.SpendAddress));\n      newOutput.setAmount(val);\n      newOutput.setAddress(core.mustBeDefined((_b = (_a = signedExchange.toObject().responsev2) === null || _a === void 0 ? void 0 : _a.depositAddress) === null || _b === void 0 ? void 0 : _b.address));\n      newOutput.setScriptType(Types.OutputScriptType.PAYTOADDRESS);\n      newOutput.setAddressType(Types.OutputAddressType.EXCHANGE);\n      newOutput.setExchangeType(outExchangeType);\n    } else if (output.isChange || output.addressType === core.BTCOutputAddressType.Transfer) {\n      // BTCSignTxOutputTranfer ||  BTCSignTxOutputChange\n      newOutput.setScriptType(utils_1.translateOutputScriptType(output.scriptType));\n      newOutput.setAddressNList(output.addressNList);\n      newOutput.setAddressType(output.isChange ? Types.OutputAddressType.CHANGE : Types.OutputAddressType.TRANSFER);\n    } else if (output.opReturnData !== undefined && output.opReturnData !== null) {\n      // BTCSignTxOutputMemo\n      newOutput.setScriptType(Types.OutputScriptType.PAYTOOPRETURN);\n      newOutput.setAddressType(Types.OutputAddressType.SPEND);\n      newOutput.setOpReturnData(output.opReturnData);\n    } else {\n      // BTCSignTxOutputSpend\n      newOutput.setScriptType(Types.OutputScriptType.PAYTOADDRESS);\n      newOutput.setAddress(output.address);\n      newOutput.setAddressType(Types.OutputAddressType.SPEND);\n    }\n\n    unsignedTx.addOutputs(newOutput, k);\n  });\n  const txmap = {}; // Create a map of transactions by txid needed for the KeepKey signing flow.\n\n  txmap[\"unsigned\"] = unsignedTx;\n  const forceBip143Coins = [\"BitcoinGold\", \"BitcoinCash\", \"BitcoinSV\"];\n  if (forceBip143Coins.includes(coin)) return txmap;\n  inputs.forEach(inputTx => {\n    if (inputTx.txid in txmap) return;\n    if (inputTx.scriptType === core.BTCInputScriptType.SpendP2SHWitness || inputTx.scriptType === core.BTCInputScriptType.SpendWitness || inputTx.scriptType === core.BTCInputScriptType.External) return;\n\n    const prevTx = (() => {\n      if (inputTx.tx) return inputTx.tx;\n      if (!inputTx.hex) throw new Error(\"non-segwit inputs must have the associated prev tx\");\n      const tx = bitcoinjs.Transaction.fromHex(inputTx.hex);\n      return {\n        version: tx.version,\n        locktime: tx.locktime,\n        vin: tx.ins.map(input => ({\n          txid: Buffer.from(input.hash).reverse().toString(\"hex\"),\n          vout: input.index,\n          scriptSig: {\n            hex: input.script.toString(\"hex\")\n          },\n          sequence: input.sequence\n        })),\n        vout: tx.outs.map((output, i) => ({\n          value: String(output.value),\n          scriptPubKey: {\n            hex: output.script.toString(\"hex\")\n          }\n        }))\n      };\n    })();\n\n    const tx = new Types.TransactionType();\n    tx.setVersion(prevTx.version);\n    tx.setLockTime(prevTx.locktime);\n    tx.setInputsCnt(prevTx.vin.length);\n    tx.setOutputsCnt(prevTx.vout.length);\n    prevTx.vin.forEach((vin, i) => {\n      const txInput = new Types.TxInputType();\n\n      if (\"coinbase\" in vin) {\n        txInput.setPrevHash(core.fromHexString(\"\\0\".repeat(64)));\n        txInput.setPrevIndex(0xffffffff);\n        txInput.setScriptSig(core.fromHexString(core.mustBeDefined(vin.coinbase)));\n        txInput.setSequence(vin.sequence);\n      } else {\n        txInput.setPrevHash(core.fromHexString(vin.txid));\n        txInput.setPrevIndex(vin.vout);\n        txInput.setScriptSig(core.fromHexString(vin.scriptSig.hex));\n        txInput.setSequence(vin.sequence);\n      }\n\n      tx.addInputs(txInput, i);\n    });\n    prevTx.vout.forEach((vout, i) => {\n      const txOutput = new Types.TxOutputBinType();\n      txOutput.setAmount(core.satsFromStr(vout.value));\n      txOutput.setScriptPubkey(core.fromHexString(vout.scriptPubKey.hex));\n      tx.addBinOutputs(txOutput, i);\n    });\n\n    if (coin === \"Dash\") {\n      let dip2_type = prevTx.type || 0; // DIP2 Special Tx with payload\n\n      if (prevTx.version === 3 && dip2_type !== 0) {\n        if (!prevTx.extraPayload) throw new Error(\"Payload missing in DIP2 transaction\");\n        tx.setExtraData(core.fromHexString(packVarint(prevTx.extraPayload.length * 2) + prevTx.extraPayload));\n      } // Trezor (and therefore KeepKey) firmware doesn't understand the\n      // split of version and type, so let's mimic the old serialization\n      // format\n\n\n      tx.setVersion(prevTx.version | dip2_type << 16);\n    }\n\n    txmap[inputTx.txid] = tx;\n  });\n  return txmap;\n}\n\nfunction ensureCoinSupport(wallet, coin) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!supportedCoins.includes(coin)) throw new Error(`'${coin}' not yet supported in HDWalletKeepKey`);\n    if (!wallet.btcSupportsCoin(coin)) throw new Error(`'${coin} is not supported in this firmware version`);\n  });\n}\n\nfunction validateVoutOrdering(msg) {\n  // From THORChain specification:\n\n  /* ignoreTx checks if we can already ignore a tx according to preset rules\n    \n     we expect array of \"vout\" for a BTC to have this format\n     OP_RETURN is mandatory only on inbound tx\n     vout:0 is our vault\n     vout:1 is any any change back to themselves\n     vout:2 is OP_RETURN (first 80 bytes)\n     vout:3 is OP_RETURN (next 80 bytes)\n    \n     Rules to ignore a tx are:\n     - vout:0 doesn't have coins (value)\n     - vout:0 doesn't have address\n     - count vouts > 4\n     - count vouts with coins (value) > 2\n  */\n  var _a; // Check that vout:0 contains the vault address\n\n\n  if (msg.outputs[0].address != msg.vaultAddress) {\n    return false;\n  } // Check that vout:1 is change address\n\n\n  if (msg.outputs[1].addressType != core.BTCOutputAddressType.Change) {\n    return false;\n  } // Check and make sure vout:2 has OP_RETURN data\n\n\n  if (!(msg.outputs[2] && ((_a = msg.outputs[2]) === null || _a === void 0 ? void 0 : _a.opReturnData))) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction btcSupportsCoin(coin) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // FIXME: inspect the CoinTable to determine which coins are actually supported by the device.\n    return supportedCoins.includes(coin);\n  });\n}\n\nexports.btcSupportsCoin = btcSupportsCoin;\n\nfunction btcSupportsScriptType(coin, scriptType) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!supportedCoins.includes(coin)) return false;\n    if (!segwitCoins.includes(coin) && scriptType === core.BTCInputScriptType.SpendP2SHWitness) return false;\n    if (!segwitCoins.includes(coin) && scriptType === core.BTCInputScriptType.SpendWitness) return false;\n    return true;\n  });\n}\n\nexports.btcSupportsScriptType = btcSupportsScriptType;\n\nfunction btcGetAddress(wallet, transport, msg) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ensureCoinSupport(wallet, msg.coin);\n    const addr = new Messages.GetAddress();\n    addr.setAddressNList(msg.addressNList);\n    addr.setCoinName(msg.coin);\n    addr.setShowDisplay(msg.showDisplay || false);\n    addr.setScriptType(utils_1.translateInputScriptType(msg.scriptType || core.BTCInputScriptType.SpendAddress));\n    const response = yield transport.call(Messages.MessageType.MESSAGETYPE_GETADDRESS, addr, {\n      msgTimeout: core.LONG_TIMEOUT\n    });\n    if (response.message_type === core.Events.CANCEL) throw response;\n    const btcAddress = response.proto;\n    return core.mustBeDefined(btcAddress.getAddress());\n  });\n}\n\nexports.btcGetAddress = btcGetAddress;\n\nfunction btcSignTx(wallet, transport, msgIn) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {\n      // Make a copy of the input parameter so as to not mutate the caller's data.\n      // Unfreezing a recursively-frozen object is nontrivial, so we leverage an existing package\n      const msg = icepick_1.thaw(msgIn);\n      msg.outputs = icepick_1.thaw(msgIn.outputs);\n      yield ensureCoinSupport(wallet, msg.coin);\n\n      if (msg.opReturnData) {\n        if (msg.opReturnData.length > 80) {\n          throw new Error(\"OP_RETURN output character count is too damn high.\");\n        }\n\n        msg.outputs.push({\n          addressType: core.BTCOutputAddressType.Spend,\n          opReturnData: Buffer.from(msg.opReturnData).toString(\"base64\"),\n          amount: \"0\",\n          isChange: false\n        });\n      } // If this is a THORChain transaction, validate the vout ordering\n\n\n      if (msg.vaultAddress && !validateVoutOrdering(msg)) {\n        throw new Error(\"Improper vout ordering for BTC Thorchain transaction\");\n      }\n\n      const txmap = prepareSignTx(msg.coin, msg.inputs, msg.outputs); // Prepare and send initial message\n\n      const tx = new Messages.SignTx();\n      tx.setInputsCount(msg.inputs.length);\n      tx.setOutputsCount(msg.outputs.length);\n      tx.setCoinName(msg.coin);\n      if (msg.version !== undefined) tx.setVersion(msg.version);\n      tx.setLockTime(msg.locktime || 0);\n      let responseType;\n      let response;\n      const {\n        message_enum,\n        proto\n      } = yield transport.call(Messages.MessageType.MESSAGETYPE_SIGNTX, tx, {\n        msgTimeout: core.LONG_TIMEOUT,\n        omitLock: true\n      }); // 5 Minute timeout\n\n      responseType = message_enum;\n      response = proto; // Prepare structure for signatures\n\n      const signatures = new Array(msg.inputs.length).fill(null);\n      let serializedTx = \"\";\n\n      try {\n        // Begin callback loop\n        while (true) {\n          if (responseType !== Messages.MessageType.MESSAGETYPE_TXREQUEST) {\n            throw new Error(`Unexpected message type: ${responseType}`);\n          }\n\n          let txRequest = response; // If there's some part of signed transaction, add it\n\n          if (txRequest.hasSerialized() && txRequest.getSerialized().hasSerializedTx()) {\n            serializedTx += core.toHexString(txRequest.getSerialized().getSerializedTx_asU8());\n          }\n\n          if (txRequest.hasSerialized() && txRequest.getSerialized().hasSignatureIndex()) {\n            const sigIdx = txRequest.getSerialized().getSignatureIndex();\n\n            if (signatures[sigIdx] !== null) {\n              throw new Error(`Signature for index ${sigIdx} already filled`);\n            }\n\n            signatures[sigIdx] = core.toHexString(txRequest.getSerialized().getSignature_asU8());\n          }\n\n          if (txRequest.getRequestType() === Types.RequestType.TXFINISHED) {\n            // Device didn't ask for more information, finish workflow\n            break;\n          }\n\n          let currentTx;\n          let msg;\n          let txAck; // Device asked for one more information, let's process it.\n\n          if (!txRequest.hasDetails()) throw new Error(\"expected details\");\n          const reqDetails = txRequest.getDetails();\n\n          if (!reqDetails.hasTxHash()) {\n            currentTx = txmap[\"unsigned\"];\n          } else {\n            currentTx = txmap[core.toHexString(reqDetails.getTxHash_asU8())];\n          }\n\n          if (txRequest.getRequestType() === Types.RequestType.TXMETA) {\n            msg = new Types.TransactionType();\n            if (currentTx.hasVersion()) msg.setVersion(currentTx.getVersion());\n            if (currentTx.hasLockTime()) msg.setLockTime(currentTx.getLockTime());\n            if (currentTx.hasInputsCnt()) msg.setInputsCnt(currentTx.getInputsCnt());\n\n            if (reqDetails.hasTxHash()) {\n              msg.setOutputsCnt(currentTx.getBinOutputsList().length);\n            } else {\n              msg.setOutputsCnt(currentTx.getOutputsList().length);\n            }\n\n            if (currentTx.hasExtraData()) {\n              msg.setExtraDataLen(currentTx.getExtraData_asU8().length);\n            } else {\n              msg.setExtraDataLen(0);\n            }\n\n            txAck = new Messages.TxAck();\n            txAck.setTx(msg);\n            const message = yield transport.call(Messages.MessageType.MESSAGETYPE_TXACK, txAck, {\n              msgTimeout: core.LONG_TIMEOUT,\n              omitLock: true\n            }); // 5 Minute timeout\n\n            responseType = message.message_enum;\n            response = message.proto;\n            continue;\n          }\n\n          if (txRequest.getRequestType() === Types.RequestType.TXINPUT) {\n            if (!reqDetails.hasRequestIndex()) throw new Error(\"expected request index\");\n            const reqIndex = reqDetails.getRequestIndex();\n            msg = new Types.TransactionType();\n            msg.setInputsList([currentTx.getInputsList()[reqIndex]]);\n            txAck = new Messages.TxAck();\n            txAck.setTx(msg);\n            const message = yield transport.call(Messages.MessageType.MESSAGETYPE_TXACK, txAck, {\n              msgTimeout: core.LONG_TIMEOUT,\n              omitLock: true\n            }); // 5 Minute timeout\n\n            responseType = message.message_enum;\n            response = message.proto;\n            continue;\n          }\n\n          if (txRequest.getRequestType() === Types.RequestType.TXOUTPUT) {\n            if (!reqDetails.hasRequestIndex()) throw new Error(\"expected request index\");\n            const reqIndex = reqDetails.getRequestIndex();\n            msg = new Types.TransactionType();\n\n            if (reqDetails.hasTxHash()) {\n              msg.setBinOutputsList([currentTx.getBinOutputsList()[reqIndex]]);\n            } else {\n              msg.setOutputsList([currentTx.getOutputsList()[reqIndex]]);\n              msg.setOutputsCnt(1);\n            }\n\n            txAck = new Messages.TxAck();\n            txAck.setTx(msg);\n            const message = yield transport.call(Messages.MessageType.MESSAGETYPE_TXACK, txAck, {\n              msgTimeout: core.LONG_TIMEOUT,\n              omitLock: true\n            }); // 5 Minute timeout\n\n            responseType = message.message_enum;\n            response = message.proto;\n            continue;\n          }\n\n          if (txRequest.getRequestType() === Types.RequestType.TXEXTRADATA) {\n            if (!reqDetails.hasExtraDataOffset() || !reqDetails.hasExtraDataLen()) throw new Error(\"missing extra data offset and length\");\n            let offset = reqDetails.getExtraDataOffset();\n            let length = reqDetails.getExtraDataLen();\n            msg = new Types.TransactionType();\n            msg.setExtraData(currentTx.getExtraData_asU8().slice(offset, offset + length));\n            txAck = new Messages.TxAck();\n            txAck.setTx(msg);\n            const message = yield transport.call(Messages.MessageType.MESSAGETYPE_TXACK, txAck, {\n              msgTimeout: core.LONG_TIMEOUT,\n              omitLock: true\n            }); // 5 Minute timeout\n\n            responseType = message.message_enum;\n            response = message.proto;\n            continue;\n          }\n        }\n      } catch (error) {\n        console.error({\n          error\n        });\n        throw new Error(\"Failed to sign BTC transaction\");\n      }\n\n      if (signatures.includes(null)) {\n        throw new Error(\"Some signatures are missing!\");\n      }\n\n      return {\n        signatures: signatures,\n        serializedTx: serializedTx\n      };\n    }));\n  });\n}\n\nexports.btcSignTx = btcSignTx;\n\nfunction btcSupportsSecureTransfer() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return true;\n  });\n}\n\nexports.btcSupportsSecureTransfer = btcSupportsSecureTransfer;\n\nfunction btcSupportsNativeShapeShift() {\n  return true;\n}\n\nexports.btcSupportsNativeShapeShift = btcSupportsNativeShapeShift;\n\nfunction btcSignMessage(wallet, transport, msg) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ensureCoinSupport(wallet, msg.coin);\n    const sign = new Messages.SignMessage();\n    sign.setAddressNList(msg.addressNList);\n    sign.setMessage(utils_1.toUTF8Array(msg.message));\n    sign.setCoinName(msg.coin || \"Bitcoin\");\n    sign.setScriptType(utils_1.translateInputScriptType((_a = msg.scriptType) !== null && _a !== void 0 ? _a : core.BTCInputScriptType.SpendAddress));\n    const event = yield transport.call(Messages.MessageType.MESSAGETYPE_SIGNMESSAGE, sign, {\n      msgTimeout: core.LONG_TIMEOUT\n    });\n    const messageSignature = event.proto;\n    const address = messageSignature.getAddress();\n    if (!address) throw new Error(\"btcSignMessage failed\");\n    return {\n      address,\n      signature: core.toHexString(messageSignature.getSignature_asU8())\n    };\n  });\n}\n\nexports.btcSignMessage = btcSignMessage;\n\nfunction btcVerifyMessage(wallet, transport, msg) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield ensureCoinSupport(wallet, msg.coin);\n    const verify = new Messages.VerifyMessage();\n    verify.setAddress(msg.address);\n    verify.setSignature(core.arrayify(\"0x\" + msg.signature));\n    verify.setMessage(utils_1.toUTF8Array(msg.message));\n    verify.setCoinName(msg.coin);\n    let event;\n\n    try {\n      event = yield transport.call(Messages.MessageType.MESSAGETYPE_VERIFYMESSAGE, verify);\n    } catch (e) {\n      if (core.isIndexable(e) && e.message_enum === Messages.MessageType.MESSAGETYPE_FAILURE) {\n        return false;\n      }\n\n      throw e;\n    }\n\n    const success = event.proto;\n    return success.getMessage() === \"Message verified\";\n  });\n}\n\nexports.btcVerifyMessage = btcVerifyMessage;\n\nfunction btcGetAccountPaths(msg) {\n  var _a;\n\n  const slip44 = core.slip44ByCoin(msg.coin);\n  if (slip44 === undefined) return [];\n  const bip44 = legacyAccount(msg.coin, slip44, msg.accountIdx);\n  const bip49 = segwitAccount(msg.coin, slip44, msg.accountIdx);\n  const bip84 = segwitNativeAccount(msg.coin, slip44, msg.accountIdx); // For BTC Forks\n\n  const btcLegacy = legacyAccount(msg.coin, core.slip44ByCoin(\"Bitcoin\"), msg.accountIdx);\n  const btcSegwit = segwitAccount(msg.coin, core.slip44ByCoin(\"Bitcoin\"), msg.accountIdx);\n  const btcSegwitNative = segwitNativeAccount(msg.coin, core.slip44ByCoin(\"Bitcoin\"), msg.accountIdx); // For BCH Forks\n\n  const bchLegacy = legacyAccount(msg.coin, core.slip44ByCoin(\"BitcoinCash\"), msg.accountIdx);\n  let paths = (_a = {\n    Bitcoin: [bip44, bip49, bip84],\n    Litecoin: [bip44, bip49, bip84],\n    Dash: [bip44],\n    DigiByte: [bip44, bip49, bip84],\n    Dogecoin: [bip44],\n    Testnet: [bip44, bip49, bip84],\n    BitcoinCash: [bip44, btcLegacy],\n    BitcoinSV: [bip44, bchLegacy, btcLegacy],\n    BitcoinGold: [bip44, bip49, bip84, btcLegacy, btcSegwit, btcSegwitNative]\n  }[msg.coin]) !== null && _a !== void 0 ? _a : [];\n  if (msg.scriptType !== undefined) paths = paths.filter(path => {\n    return path.scriptType === msg.scriptType;\n  });\n  return paths;\n}\n\nexports.btcGetAccountPaths = btcGetAccountPaths;\n\nfunction btcIsSameAccount(msg) {\n  if (msg.length < 1) return false;\n  if (msg.length > 3) return false;\n  const account0 = msg[0];\n  if (account0.addressNList.length != 3) return false; // Make sure Purpose and ScriptType match\n\n  const purpose = account0.addressNList[0];\n  const purposeForScriptType = {\n    [core.BTCInputScriptType.SpendAddress]: 0x80000000 + 44,\n    [core.BTCInputScriptType.SpendP2SHWitness]: 0x80000000 + 49,\n    [core.BTCInputScriptType.SpendWitness]: 0x80000000 + 84\n  };\n  if (purposeForScriptType[account0.scriptType] !== purpose) return false; // Coin must be hardened\n\n  const slip44 = account0.addressNList[1];\n  if (slip44 < 0x80000000) return false; // Account Idx must be hardened\n\n  const idx = account0.addressNList[2];\n  if (idx < 0x80000000) return false; // Accounts must have the same SLIP44 and Account Idx, but may have differing\n  // purpose fields (so long as they're BIP44/BIP49/BIP84)\n\n  if (msg.find(path => {\n    if (path.addressNList.length != 3) return true;\n    if (![0x80000000 + 44, 0x80000000 + 49, 0x80000000 + 84].includes(path.addressNList[0])) return true;\n    if (purposeForScriptType[path.scriptType] !== path.addressNList[0]) return true;\n    if (path.addressNList[1] != slip44) return true;\n    if (path.addressNList[2] != idx) return true;\n  })) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.btcIsSameAccount = btcIsSameAccount;","map":{"version":3,"mappings":"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","names":["supportedCoins","segwitCoins","legacyAccount","coin","slip44","accountIdx","scriptType","core","BTCInputScriptType","SpendAddress","addressNList","segwitAccount","SpendP2SHWitness","segwitNativeAccount","SpendWitness","packVarint","n","toString","padStart","prepareSignTx","inputs","outputs","unsignedTx","Types","TransactionType","setInputsCnt","length","setOutputsCnt","forEach","input","i","utxo","TxInputType","setPrevHash","fromHexString","txid","setPrevIndex","vout","sequence","undefined","setSequence","setScriptType","utils_1","setAddressNList","setAmount","Number","amount","addInputs","o","k","output","newOutput","TxOutputType","exchangeType","signedHex","base64toHEX","signedExchangeResponse","signedExchange","Exchange","SignedExchangeResponse","deserializeBinary","arrayify","depAmt","mustBeDefined","getResponsev2","getDepositAmount_asU8","val","jj","Math","pow","outExchangeType","ExchangeType","setSignedExchangeResponse","setWithdrawalCoinName","withdrawalCoinName","setWithdrawalAddressNList","withdrawalAddressNList","setWithdrawalScriptType","withdrawalScriptType","setReturnAddressNList","returnAddressNList","setReturnScriptType","returnScriptType","setAddress","toObject","responsev2","_a","depositAddress","_b","address","OutputScriptType","PAYTOADDRESS","setAddressType","OutputAddressType","EXCHANGE","setExchangeType","isChange","addressType","BTCOutputAddressType","Transfer","CHANGE","TRANSFER","opReturnData","PAYTOOPRETURN","SPEND","setOpReturnData","addOutputs","txmap","forceBip143Coins","includes","inputTx","External","prevTx","tx","hex","Error","bitcoinjs","Transaction","fromHex","version","locktime","vin","ins","map","Buffer","from","hash","reverse","index","scriptSig","script","outs","value","String","scriptPubKey","setVersion","setLockTime","txInput","repeat","setScriptSig","coinbase","txOutput","TxOutputBinType","satsFromStr","setScriptPubkey","addBinOutputs","dip2_type","type","extraPayload","setExtraData","ensureCoinSupport","wallet","btcSupportsCoin","validateVoutOrdering","msg","vaultAddress","Change","exports","btcSupportsScriptType","btcGetAddress","transport","addr","Messages","GetAddress","setCoinName","setShowDisplay","showDisplay","response","call","MessageType","MESSAGETYPE_GETADDRESS","msgTimeout","LONG_TIMEOUT","message_type","Events","CANCEL","btcAddress","proto","getAddress","btcSignTx","msgIn","lockDuring","__awaiter","icepick_1","push","Spend","SignTx","setInputsCount","setOutputsCount","responseType","message_enum","MESSAGETYPE_SIGNTX","omitLock","signatures","Array","fill","serializedTx","MESSAGETYPE_TXREQUEST","txRequest","hasSerialized","getSerialized","hasSerializedTx","toHexString","getSerializedTx_asU8","hasSignatureIndex","sigIdx","getSignatureIndex","getSignature_asU8","getRequestType","RequestType","TXFINISHED","currentTx","txAck","hasDetails","reqDetails","getDetails","hasTxHash","getTxHash_asU8","TXMETA","hasVersion","getVersion","hasLockTime","getLockTime","hasInputsCnt","getInputsCnt","getBinOutputsList","getOutputsList","hasExtraData","setExtraDataLen","getExtraData_asU8","TxAck","setTx","message","MESSAGETYPE_TXACK","TXINPUT","hasRequestIndex","reqIndex","getRequestIndex","setInputsList","getInputsList","TXOUTPUT","setBinOutputsList","setOutputsList","TXEXTRADATA","hasExtraDataOffset","hasExtraDataLen","offset","getExtraDataOffset","getExtraDataLen","slice","error","console","btcSupportsSecureTransfer","btcSupportsNativeShapeShift","btcSignMessage","sign","SignMessage","setMessage","event","MESSAGETYPE_SIGNMESSAGE","messageSignature","signature","btcVerifyMessage","verify","VerifyMessage","setSignature","MESSAGETYPE_VERIFYMESSAGE","e","isIndexable","MESSAGETYPE_FAILURE","success","getMessage","btcGetAccountPaths","slip44ByCoin","bip44","bip49","bip84","btcLegacy","btcSegwit","btcSegwitNative","bchLegacy","paths","Bitcoin","Litecoin","Dash","DigiByte","Dogecoin","Testnet","BitcoinCash","BitcoinSV","BitcoinGold","filter","path","btcIsSameAccount","account0","purpose","purposeForScriptType","idx","find"],"sourceRoot":"","sources":["../src/bitcoin.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}