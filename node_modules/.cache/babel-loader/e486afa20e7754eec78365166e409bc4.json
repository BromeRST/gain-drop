{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-dupe-class-members */\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar buffer_1 = require(\"buffer\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar common_1 = __importDefault(require(\"@ethereumjs/common\")); // secp256k1n/2\n\n\nvar N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * An Ethereum transaction.\n */\n\nvar Transaction =\n/** @class */\nfunction () {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   * Use the static factory methods to assist in creating a Transaction object from varying data types.\n   * @note Transaction objects implement EIP155 by default. To disable it, pass in an `@ethereumjs/common` object set before EIP155 activation (i.e. before Spurious Dragon).\n   */\n  function Transaction(txData, opts) {\n    var e_1, _a;\n\n    var _b;\n\n    var nonce = txData.nonce,\n        gasPrice = txData.gasPrice,\n        gasLimit = txData.gasLimit,\n        to = txData.to,\n        value = txData.value,\n        data = txData.data,\n        v = txData.v,\n        r = txData.r,\n        s = txData.s;\n    this.nonce = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(nonce));\n    this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasPrice));\n    this.gasLimit = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasLimit));\n    this.to = to ? new ethereumjs_util_1.Address(ethereumjs_util_1.toBuffer(to)) : undefined;\n    this.value = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(value));\n    this.data = ethereumjs_util_1.toBuffer(data);\n    this.v = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(v));\n    this.r = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(r));\n    this.s = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(s));\n    var validateCannotExceedMaxInteger = {\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      value: this.value,\n      r: this.r,\n      s: this.s\n    };\n\n    try {\n      for (var _c = __values(Object.entries(validateCannotExceedMaxInteger)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var _e = __read(_d.value, 2),\n            key = _e[0],\n            value_1 = _e[1];\n\n        if (value_1 && value_1.gt(ethereumjs_util_1.MAX_INTEGER)) {\n          throw new Error(key + \" cannot exceed MAX_INTEGER, given \" + value_1);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    if (opts === null || opts === void 0 ? void 0 : opts.common) {\n      this.common = opts.common;\n    } else {\n      var DEFAULT_CHAIN = 'mainnet';\n      this.common = new common_1.default({\n        chain: DEFAULT_CHAIN\n      });\n    }\n\n    this._validateTxV(this.v);\n\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n\n  Transaction.fromTxData = function (txData, opts) {\n    return new Transaction(txData, opts);\n  };\n\n  Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    var values = ethereumjs_util_1.rlp.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n\n    return this.fromValuesArray(values, opts);\n  };\n\n  Transaction.fromValuesArray = function (values, opts) {\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n\n    var _a = __read(values, 9),\n        nonce = _a[0],\n        gasPrice = _a[1],\n        gasLimit = _a[2],\n        to = _a[3],\n        value = _a[4],\n        data = _a[5],\n        v = _a[6],\n        r = _a[7],\n        s = _a[8];\n\n    return new Transaction({\n      nonce: new ethereumjs_util_1.BN(nonce),\n      gasPrice: new ethereumjs_util_1.BN(gasPrice),\n      gasLimit: new ethereumjs_util_1.BN(gasLimit),\n      to: to && to.length > 0 ? new ethereumjs_util_1.Address(to) : undefined,\n      value: new ethereumjs_util_1.BN(value),\n      data: data || buffer_1.Buffer.from([]),\n      v: v ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r ? new ethereumjs_util_1.BN(r) : undefined,\n      s: s ? new ethereumjs_util_1.BN(s) : undefined\n    }, opts);\n  };\n  /**\n   * If the tx's `to` is to the creation address\n   */\n\n\n  Transaction.prototype.toCreationAddress = function () {\n    return this.to === undefined || this.to.buf.length === 0;\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   */\n\n\n  Transaction.prototype.hash = function () {\n    var values = [ethereumjs_util_1.bnToRlp(this.nonce), ethereumjs_util_1.bnToRlp(this.gasPrice), ethereumjs_util_1.bnToRlp(this.gasLimit), this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]), ethereumjs_util_1.bnToRlp(this.value), this.data, this.v ? ethereumjs_util_1.bnToRlp(this.v) : buffer_1.Buffer.from([]), this.r ? ethereumjs_util_1.bnToRlp(this.r) : buffer_1.Buffer.from([]), this.s ? ethereumjs_util_1.bnToRlp(this.s) : buffer_1.Buffer.from([])];\n    return ethereumjs_util_1.rlphash(values);\n  };\n\n  Transaction.prototype.getMessageToSign = function () {\n    return this._getMessageToSign(this._unsignedTxImplementsEIP155());\n  };\n\n  Transaction.prototype.getMessageToVerifySignature = function () {\n    return this._getMessageToSign(this._signedTxImplementsEIP155());\n  };\n  /**\n   * Returns chain ID\n   */\n\n\n  Transaction.prototype.getChainId = function () {\n    return this.common.chainId();\n  };\n  /**\n   * Returns the sender's address\n   */\n\n\n  Transaction.prototype.getSenderAddress = function () {\n    return new ethereumjs_util_1.Address(ethereumjs_util_1.publicToAddress(this.getSenderPublicKey()));\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function () {\n    var msgHash = this.getMessageToVerifySignature(); // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n\n    if (this.common.gteHardfork('homestead') && this.s && this.s.gt(N_DIV_2)) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var _a = this,\n        v = _a.v,\n        r = _a.r,\n        s = _a.s;\n\n    if (!v || !r || !s) {\n      throw new Error('Missing values to derive sender public key from signed tx');\n    }\n\n    try {\n      return ethereumjs_util_1.ecrecover(msgHash, v.toNumber(), ethereumjs_util_1.bnToRlp(r), ethereumjs_util_1.bnToRlp(s), this._signedTxImplementsEIP155() ? this.getChainId() : undefined);\n    } catch (e) {\n      throw new Error('Invalid Signature');\n    }\n  };\n  /**\n   * Determines if the signature is valid\n   */\n\n\n  Transaction.prototype.verifySignature = function () {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      var publicKey = this.getSenderPublicKey();\n      return ethereumjs_util_1.unpadBuffer(publicKey).length !== 0;\n    } catch (e) {\n      return false;\n    }\n  };\n  /**\n   * Sign a transaction with a given private key.\n   * Returns a new Transaction object (the original tx will not be modified).\n   * Example:\n   * ```typescript\n   * const unsignedTx = Transaction.fromTxData(txData)\n   * const signedTx = unsignedTx.sign(privKey)\n   * ```\n   * @param privateKey Must be 32 bytes in length.\n   */\n\n\n  Transaction.prototype.sign = function (privateKey) {\n    if (privateKey.length !== 32) {\n      throw new Error('Private key must be 32 bytes in length.');\n    }\n\n    var msgHash = this.getMessageToSign(); // Only `v` is reassigned.\n\n    /* eslint-disable-next-line prefer-const */\n\n    var _a = ethereumjs_util_1.ecsign(msgHash, privateKey),\n        v = _a.v,\n        r = _a.r,\n        s = _a.s;\n\n    if (this._unsignedTxImplementsEIP155()) {\n      v += this.getChainId() * 2 + 8;\n    }\n\n    var opts = {\n      common: this.common\n    };\n    return new Transaction({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v: new ethereumjs_util_1.BN(v),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  Transaction.prototype.getDataFee = function () {\n    var txDataZero = this.common.param('gasPrices', 'txDataZero');\n    var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n    var cost = 0;\n\n    for (var i = 0; i < this.data.length; i++) {\n      this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;\n    }\n\n    return new ethereumjs_util_1.BN(cost);\n  };\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n\n\n  Transaction.prototype.getBaseFee = function () {\n    var fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'));\n\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this.common.param('gasPrices', 'txCreation'));\n    }\n\n    return fee;\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n\n  Transaction.prototype.validate = function (stringError) {\n    if (stringError === void 0) {\n      stringError = false;\n    }\n\n    var errors = [];\n\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().gt(this.gasLimit)) {\n      errors.push(\"gasLimit is too low. given \" + this.gasLimit + \", need at least \" + this.getBaseFee());\n    }\n\n    return stringError ? errors : errors.length === 0;\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of this transaction, in order.\n   */\n\n\n  Transaction.prototype.raw = function () {\n    return [ethereumjs_util_1.bnToRlp(this.nonce), ethereumjs_util_1.bnToRlp(this.gasPrice), ethereumjs_util_1.bnToRlp(this.gasLimit), this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]), ethereumjs_util_1.bnToRlp(this.value), this.data, this.v !== undefined ? ethereumjs_util_1.bnToRlp(this.v) : buffer_1.Buffer.from([]), this.r !== undefined ? ethereumjs_util_1.bnToRlp(this.r) : buffer_1.Buffer.from([]), this.s !== undefined ? ethereumjs_util_1.bnToRlp(this.s) : buffer_1.Buffer.from([])];\n  };\n  /**\n   * Returns the rlp encoding of the transaction.\n   */\n\n\n  Transaction.prototype.serialize = function () {\n    return ethereumjs_util_1.rlp.encode(this.raw());\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n\n\n  Transaction.prototype.toJSON = function () {\n    return {\n      nonce: ethereumjs_util_1.bnToHex(this.nonce),\n      gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n      gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: ethereumjs_util_1.bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined\n    };\n  };\n\n  Transaction.prototype.isSigned = function () {\n    var _a = this,\n        v = _a.v,\n        r = _a.r,\n        s = _a.s;\n\n    return !!v && !!r && !!s;\n  };\n\n  Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n    return this.common.gteHardfork('spuriousDragon');\n  };\n\n  Transaction.prototype._signedTxImplementsEIP155 = function () {\n    var _a;\n\n    if (!this.isSigned()) {\n      throw Error('This transaction is not signed');\n    }\n\n    var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon'); // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\n    var v = (_a = this.v) === null || _a === void 0 ? void 0 : _a.toNumber();\n    var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n\n  Transaction.prototype._getMessageToSign = function (withEIP155) {\n    var values = [ethereumjs_util_1.bnToRlp(this.nonce), ethereumjs_util_1.bnToRlp(this.gasPrice), ethereumjs_util_1.bnToRlp(this.gasLimit), this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]), ethereumjs_util_1.bnToRlp(this.value), this.data];\n\n    if (withEIP155) {\n      values.push(ethereumjs_util_1.toBuffer(this.getChainId()));\n      values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n      values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n    }\n\n    return ethereumjs_util_1.rlphash(values);\n  };\n  /**\n   * Validates tx's `v` value\n   */\n\n\n  Transaction.prototype._validateTxV = function (v) {\n    if (v === undefined || v.toNumber() === 0) {\n      return;\n    }\n\n    if (!this.common.gteHardfork('spuriousDragon')) {\n      return;\n    }\n\n    var vInt = v.toNumber();\n\n    if (vInt === 27 || vInt === 28) {\n      return;\n    }\n\n    var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;\n\n    if (!isValidEIP155V) {\n      throw new Error(\"Incompatible EIP155-based V \" + vInt + \" and chain id \" + this.getChainId() + \". See the Common parameter of the Transaction constructor to set the chain id.\");\n    }\n  };\n\n  return Transaction;\n}();\n\nexports.default = Transaction;","map":{"version":3,"mappings":"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","names":["N_DIV_2","ethereumjs_util_1","txData","opts","gasPrice","gasLimit","to","value","data","v","r","s","nonce","undefined","validateCannotExceedMaxInteger","entries","_d","key","value_1","gt","Error","common","DEFAULT_CHAIN","common_1","chain","_validateTxV","freeze","_b","Object","Transaction","serialized","values","decode","Array","isArray","fromValuesArray","length","buffer_1","from","buf","_getMessageToSign","_unsignedTxImplementsEIP155","_signedTxImplementsEIP155","chainId","getSenderPublicKey","msgHash","getMessageToVerifySignature","gteHardfork","toNumber","getChainId","e","publicKey","privateKey","getMessageToSign","txDataZero","param","txDataNonZero","cost","i","fee","getDataFee","addn","toCreationAddress","iaddn","mul","add","stringError","errors","verifySignature","push","getBaseFee","encode","raw","toString","isSigned","onEIP155BlockOrLater","_a","vAndChainIdMeetEIP155Conditions","withEIP155","vInt","isValidEIP155V"],"sourceRoot":"","sources":["../src/transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}