{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.translateOutputScriptType = exports.translateInputScriptType = exports.toUTF8Array = exports.protoFieldToSetMethod = exports.SEGMENT_SIZE = void 0;\n\nconst Types = __importStar(require(\"@keepkey/device-protocol/lib/types_pb\"));\n\nconst core = __importStar(require(\"@shapeshiftoss/hdwallet-core\"));\n\nexports.SEGMENT_SIZE = 63; // Shim until this exists for jspb https://github.com/protocolbuffers/protobuf/issues/1591\n\nfunction protoFieldToSetMethod(fieldName) {\n  return `set${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}`;\n}\n\nexports.protoFieldToSetMethod = protoFieldToSetMethod; // https://gist.github.com/joni/3760795/8f0c1a608b7f0c8b3978db68105c5b1d741d0446\n\nfunction toUTF8Array(str) {\n  var utf8 = [];\n\n  for (var i = 0; i < str.length; i++) {\n    var charcode = str.charCodeAt(i);\n    if (charcode < 0x80) utf8.push(charcode);else if (charcode < 0x800) {\n      utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n    } // surrogate pair\n    else {\n      i++;\n      charcode = (charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff;\n      utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n    }\n  }\n\n  return new Uint8Array(utf8);\n}\n\nexports.toUTF8Array = toUTF8Array;\n\nfunction translateInputScriptType(scriptType) {\n  switch (scriptType) {\n    case core.BTCInputScriptType.CashAddr:\n    case core.BTCInputScriptType.SpendAddress:\n      return Types.InputScriptType.SPENDADDRESS;\n\n    case core.BTCInputScriptType.SpendMultisig:\n      return Types.InputScriptType.SPENDMULTISIG;\n\n    case core.BTCInputScriptType.SpendP2SHWitness:\n      return Types.InputScriptType.SPENDP2SHWITNESS;\n\n    case core.BTCInputScriptType.SpendWitness:\n      return Types.InputScriptType.SPENDWITNESS;\n  }\n\n  throw new Error(\"unhandled InputSriptType enum: \" + scriptType);\n}\n\nexports.translateInputScriptType = translateInputScriptType;\n\nfunction translateOutputScriptType(scriptType) {\n  switch (scriptType) {\n    case core.BTCOutputScriptType.PayToAddress:\n      return Types.OutputScriptType.PAYTOADDRESS;\n\n    case core.BTCOutputScriptType.PayToMultisig:\n      return Types.OutputScriptType.PAYTOMULTISIG;\n\n    case core.BTCOutputScriptType.PayToP2SHWitness:\n      return Types.OutputScriptType.PAYTOP2SHWITNESS;\n\n    case core.BTCOutputScriptType.PayToWitness:\n      return Types.OutputScriptType.PAYTOWITNESS;\n  }\n\n  throw new Error(\"unhandled OutputScriptType enum: \" + scriptType);\n}\n\nexports.translateOutputScriptType = translateOutputScriptType;","map":{"version":3,"mappings":"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","names":["exports","protoFieldToSetMethod","fieldName","charAt","toUpperCase","slice","toUTF8Array","str","utf8","i","length","charcode","charCodeAt","push","Uint8Array","translateInputScriptType","scriptType","core","BTCInputScriptType","CashAddr","SpendAddress","Types","InputScriptType","SPENDADDRESS","SpendMultisig","SPENDMULTISIG","SpendP2SHWitness","SPENDP2SHWITNESS","SpendWitness","SPENDWITNESS","Error","translateOutputScriptType","BTCOutputScriptType","PayToAddress","OutputScriptType","PAYTOADDRESS","PayToMultisig","PAYTOMULTISIG","PayToP2SHWitness","PAYTOP2SHWITNESS","PayToWitness","PAYTOWITNESS"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}