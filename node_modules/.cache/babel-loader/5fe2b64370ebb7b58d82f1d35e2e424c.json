{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.segwitNativeAccount = exports.segwitAccount = exports.legacyAccount = exports.describeUTXOPath = exports.unknownUTXOPath = exports.BTCOutputAddressType = exports.BTCOutputScriptType = exports.BTCInputScriptType = void 0;\n\nconst ta = __importStar(require(\"type-assertions\"));\n\nconst utils_1 = require(\"./utils\");\n\nta.assert(); // Bech32 info https://en.bitcoin.it/wiki/BIP_0173\n\nvar BTCInputScriptType;\n\n(function (BTCInputScriptType) {\n  BTCInputScriptType[\"CashAddr\"] = \"cashaddr\";\n  BTCInputScriptType[\"Bech32\"] = \"bech32\";\n  BTCInputScriptType[\"SpendAddress\"] = \"p2pkh\";\n  BTCInputScriptType[\"SpendMultisig\"] = \"p2sh\";\n  BTCInputScriptType[\"External\"] = \"external\";\n  BTCInputScriptType[\"SpendWitness\"] = \"p2wpkh\";\n  BTCInputScriptType[\"SpendP2SHWitness\"] = \"p2sh-p2wpkh\";\n})(BTCInputScriptType = exports.BTCInputScriptType || (exports.BTCInputScriptType = {}));\n\nvar BTCOutputScriptType;\n\n(function (BTCOutputScriptType) {\n  BTCOutputScriptType[\"PayToAddress\"] = \"p2pkh\";\n  BTCOutputScriptType[\"PayToMultisig\"] = \"p2sh\";\n  BTCOutputScriptType[\"Bech32\"] = \"bech32\";\n  BTCOutputScriptType[\"PayToWitness\"] = \"p2wpkh\";\n  BTCOutputScriptType[\"PayToP2SHWitness\"] = \"p2sh-p2wpkh\";\n})(BTCOutputScriptType = exports.BTCOutputScriptType || (exports.BTCOutputScriptType = {}));\n\nvar BTCOutputAddressType;\n\n(function (BTCOutputAddressType) {\n  BTCOutputAddressType[\"Spend\"] = \"spend\";\n  BTCOutputAddressType[\"Transfer\"] = \"transfer\";\n  BTCOutputAddressType[\"Change\"] = \"change\";\n  BTCOutputAddressType[\"Exchange\"] = \"exchange\";\n})(BTCOutputAddressType = exports.BTCOutputAddressType || (exports.BTCOutputAddressType = {}));\n\nfunction unknownUTXOPath(path, coin, scriptType) {\n  return {\n    verbose: utils_1.addressNListToBIP32(path),\n    coin,\n    scriptType,\n    isKnown: false\n  };\n}\n\nexports.unknownUTXOPath = unknownUTXOPath;\n\nfunction describeUTXOPath(path, coin, scriptType) {\n  const unknown = unknownUTXOPath(path, coin, scriptType);\n  if (path.length !== 3 && path.length !== 5) return unknown;\n  if ((path[0] & 0x80000000) >>> 0 !== 0x80000000) return unknown;\n  let purpose = path[0] & 0x7fffffff;\n  if (![44, 49, 84].includes(purpose)) return unknown;\n  if (purpose === 44 && scriptType !== BTCInputScriptType.SpendAddress) return unknown;\n  if (purpose === 49 && scriptType !== BTCInputScriptType.SpendP2SHWitness) return unknown;\n  let wholeAccount = path.length === 3;\n  let script = {\n    [BTCInputScriptType.SpendAddress]: [\"Legacy\"],\n    [BTCInputScriptType.SpendP2SHWitness]: [],\n    [BTCInputScriptType.SpendWitness]: [\"Segwit\"],\n    [BTCInputScriptType.Bech32]: [\"Segwit Native\"]\n  }[scriptType];\n  let isPrefork = false;\n  const slip44 = utils_1.slip44ByCoin(coin);\n  if (slip44 === undefined) return unknown;\n\n  if (path[1] !== 0x80000000 + slip44) {\n    switch (coin) {\n      case \"BitcoinCash\":\n      case \"BitcoinGold\":\n        {\n          if (path[1] === 0x80000000 + utils_1.slip44ByCoin(\"Bitcoin\")) {\n            isPrefork = true;\n            break;\n          }\n\n          return unknown;\n        }\n\n      case \"BitcoinSV\":\n        {\n          if (path[1] === 0x80000000 + utils_1.slip44ByCoin(\"Bitcoin\") || path[1] === 0x80000000 + utils_1.slip44ByCoin(\"BitcoinCash\")) {\n            isPrefork = true;\n            break;\n          }\n\n          return unknown;\n        }\n\n      default:\n        return unknown;\n    }\n  }\n\n  let attributes = isPrefork ? [\"Prefork\"] : [];\n\n  switch (coin) {\n    case \"Bitcoin\":\n    case \"Litecoin\":\n    case \"BitcoinGold\":\n    case \"Testnet\":\n      {\n        if (script) attributes = attributes.concat(script);\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  let attr = attributes.length ? ` (${attributes.join(\", \")})` : \"\";\n  let accountIdx = path[2] & 0x7fffffff;\n\n  if (wholeAccount) {\n    return {\n      coin,\n      verbose: `${coin} Account #${accountIdx}${attr}`,\n      accountIdx,\n      wholeAccount: true,\n      isKnown: true,\n      scriptType,\n      isPrefork\n    };\n  } else {\n    let change = path[3] === 1 ? \"Change \" : \"\";\n    let addressIdx = path[4];\n    return {\n      coin,\n      verbose: `${coin} Account #${accountIdx}, ${change}Address #${addressIdx}${attr}`,\n      accountIdx,\n      addressIdx,\n      wholeAccount: false,\n      isKnown: true,\n      isChange: path[3] === 1,\n      scriptType,\n      isPrefork\n    };\n  }\n}\n\nexports.describeUTXOPath = describeUTXOPath;\n\nfunction legacyAccount(coin, slip44, accountIdx) {\n  return {\n    coin,\n    scriptType: BTCInputScriptType.SpendAddress,\n    addressNList: [0x80000000 + 44, 0x80000000 + slip44, 0x80000000 + accountIdx]\n  };\n}\n\nexports.legacyAccount = legacyAccount;\n\nfunction segwitAccount(coin, slip44, accountIdx) {\n  return {\n    coin,\n    scriptType: BTCInputScriptType.SpendP2SHWitness,\n    addressNList: [0x80000000 + 49, 0x80000000 + slip44, 0x80000000 + accountIdx]\n  };\n}\n\nexports.segwitAccount = segwitAccount;\n\nfunction segwitNativeAccount(coin, slip44, accountIdx) {\n  return {\n    coin,\n    scriptType: BTCInputScriptType.SpendWitness,\n    addressNList: [0x80000000 + 84, 0x80000000 + slip44, 0x80000000 + accountIdx]\n  };\n}\n\nexports.segwitNativeAccount = segwitNativeAccount;","map":{"version":3,"mappings":"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","names":["ta","assert","BTCInputScriptType","exports","BTCOutputScriptType","BTCOutputAddressType","unknownUTXOPath","path","coin","scriptType","verbose","utils_1","isKnown","describeUTXOPath","unknown","length","purpose","includes","SpendAddress","SpendP2SHWitness","wholeAccount","script","SpendWitness","Bech32","isPrefork","slip44","undefined","attributes","concat","attr","join","accountIdx","change","addressIdx","isChange","legacyAccount","addressNList","segwitAccount","segwitNativeAccount"],"sourceRoot":"","sources":["../src/bitcoin.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}