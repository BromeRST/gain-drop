{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst errors_1 = require(\"./errors\");\n\nconst utils_1 = require(\"./utils\");\n\nconst cbor_1 = require(\"./cbor\");\n\nclass UR {\n  constructor(_cborPayload) {\n    let _type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'bytes';\n\n    this._cborPayload = _cborPayload;\n    this._type = _type;\n\n    if (!utils_1.isURType(this._type)) {\n      throw new errors_1.InvalidTypeError();\n    }\n  }\n\n  static fromBuffer(buf) {\n    return new UR(cbor_1.cborEncode(buf));\n  }\n\n  static from(value, encoding) {\n    return UR.fromBuffer(Buffer.from(value, encoding));\n  }\n\n  decodeCBOR() {\n    return cbor_1.cborDecode(this._cborPayload);\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get cbor() {\n    return this._cborPayload;\n  }\n\n  equals(ur2) {\n    return this.type === ur2.type && this.cbor.equals(ur2.cbor);\n  }\n\n}\n\nexports.default = UR;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AACA;;AAEA,MAAqBA,EAArB,CAAuB;AACrBC,cACUC,YADV,EAEiC;AAAA,QAAvBC,KAAuB,uEAAP,OAAO;;AADvB;AACA;;AAER,QAAI,CAACC,iBAAS,KAAKD,KAAd,CAAL,EAA2B;AACzB,YAAM,IAAIE,yBAAJ,EAAN;AACD;AACF;;AAEuB,SAAVC,UAAU,CAACC,GAAD,EAAY;AAClC,WAAO,IAAIP,EAAJ,CAAOQ,kBAAWD,GAAX,CAAP,CAAP;AACD;;AAEiB,SAAJE,IAAI,CAACC,KAAD,EAAaC,QAAb,EAAsC;AACtD,WAAOX,EAAE,CAACM,UAAH,CAAcM,MAAM,CAACH,IAAP,CAAYC,KAAZ,EAAmBC,QAAnB,CAAd,CAAP;AACD;;AAEME,YAAU;AACf,WAAOL,kBAAW,KAAKN,YAAhB,CAAP;AACD;;AAEO,MAAJY,IAAI;AAAK,WAAO,KAAKX,KAAZ;AAAoB;;AACzB,MAAJY,IAAI;AAAK,WAAO,KAAKb,YAAZ;AAA2B;;AAEjCc,QAAM,CAACC,GAAD,EAAQ;AACnB,WAAO,KAAKH,IAAL,KAAcG,GAAG,CAACH,IAAlB,IAA0B,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,GAAG,CAACF,IAArB,CAAjC;AACD;;AA3BoB;;AAAvBG","names":["UR","constructor","_cborPayload","_type","utils_1","errors_1","fromBuffer","buf","cbor_1","from","value","encoding","Buffer","decodeCBOR","type","cbor","equals","ur2","exports"],"sourceRoot":"","sources":["../src/ur.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}