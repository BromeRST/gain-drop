{"ast":null,"code":"var _jsxFileName = \"/Users/massimilianoalbini/Documents/gain-drop/gain-drop/src/context/signer.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport Onboard from 'bnc-onboard';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SignerContext = /*#__PURE__*/createContext({});\nexport function SignerContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [signer, setSigner] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [onboard, setOnboard] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [address, setAddress] = useState('');\n  useEffect(() => {\n    const initOnboard = Onboard({\n      dappId: '682e29b1-cc78-4233-bd76-2dc200dda20c',\n      // [String] The API key created by step one above\n      networkId: 80001,\n      // [Integer] The Ethereum network ID your Dapp uses.\n      subscriptions: {\n        wallet: wallet => {\n          const initProvider = new ethers.providers.Web3Provider(wallet.provider, 'any');\n          setProvider(initProvider);\n        }\n      },\n      walletSelect: {\n        wallets: [{\n          walletName: 'metamask',\n          preferred: true\n        }]\n      }\n    });\n    setOnboard(initOnboard);\n  }, []);\n  useEffect(() => {\n    if (provider !== null && provider !== void 0 && provider.getSigner()) {\n      provider.getSigner().getAddress().then(signerAddress => {\n        setAddress(signerAddress);\n      });\n      setSigner(provider.getSigner());\n    }\n  }, [provider, connected]);\n\n  const login = async () => {\n    const select = await onboard.walletSelect();\n\n    if (select) {\n      const res = await onboard.walletCheck();\n\n      if (res) {\n        setConnected(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(SignerContext.Provider, {\n    value: useMemo(() => ({\n      signer,\n      onboard,\n      login,\n      provider,\n      connected,\n      signerAddress: address\n    }), [signer, onboard, login, provider, connected, address]),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this);\n}\n\n_s(SignerContextProvider, \"iN6a8EUOjEhh1V2Gp7VgEcgjgqM=\");\n\n_c = SignerContextProvider;\nexport const useSigner = () => {\n  _s2();\n\n  return useContext(SignerContext);\n};\n\n_s2(useSigner, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"SignerContextProvider\");","map":{"version":3,"sources":["/Users/massimilianoalbini/Documents/gain-drop/gain-drop/src/context/signer.tsx"],"names":["React","createContext","useContext","useEffect","useMemo","useState","Onboard","ethers","SignerContext","SignerContextProvider","children","signer","setSigner","provider","setProvider","onboard","setOnboard","connected","setConnected","address","setAddress","initOnboard","dappId","networkId","subscriptions","wallet","initProvider","providers","Web3Provider","walletSelect","wallets","walletName","preferred","getSigner","getAddress","then","signerAddress","login","select","res","walletCheck","useSigner"],"mappings":"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","sourcesContent":["import React, {\n    createContext, useContext, useEffect, useMemo, useState,\n  } from 'react';\n  import Onboard from 'bnc-onboard';\n  import { ethers } from 'ethers';\n  \n  interface ISignerContext {\n    signer?: ethers.providers.JsonRpcSigner,\n    onboard?: any,\n    login?: () => Promise<void>,\n    provider?: ethers.providers.Web3Provider,\n    connected?: boolean,\n    signerAddress?: string,\n  }\n  \n  export const SignerContext = createContext<ISignerContext>({});\n  \n  export function SignerContextProvider({ children }) {\n    const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner | null>(null);\n    const [provider, setProvider] = useState<ethers.providers.Web3Provider | null>(null);\n    const [onboard, setOnboard] = useState(null);\n    const [connected, setConnected] = useState(false);\n    const [address, setAddress] = useState('');\n  \n    useEffect(() => {\n      const initOnboard = Onboard({\n        dappId: '682e29b1-cc78-4233-bd76-2dc200dda20c', // [String] The API key created by step one above\n        networkId: 80001, // [Integer] The Ethereum network ID your Dapp uses.\n        subscriptions: {\n          wallet: (wallet) => {\n            const initProvider = new ethers.providers.Web3Provider(\n              wallet.provider,\n              'any',\n            );\n            setProvider(initProvider);\n          },\n        },\n        walletSelect: {\n          wallets: [{ walletName: 'metamask', preferred: true }],\n        },\n      });\n  \n      setOnboard(initOnboard);\n    }, []);\n  \n    useEffect(() => {\n      if (provider?.getSigner()) {\n        provider.getSigner().getAddress().then((signerAddress) => {\n          setAddress(signerAddress);\n        });\n        setSigner(provider.getSigner());\n      }\n    }, [provider, connected]);\n  \n    const login = async () => {\n      const select = await onboard.walletSelect();\n      if (select) {\n        const res = await onboard.walletCheck();\n        if (res) {\n          setConnected(true);\n        }\n      }\n    };\n  \n    return (\n      <SignerContext.Provider\n        value={useMemo(\n          () => ({\n            signer,\n            onboard,\n            login,\n            provider,\n            connected,\n            signerAddress: address,\n          }),\n          [signer, onboard, login, provider, connected, address],\n        )}\n      >\n        {children}\n      </SignerContext.Provider>\n    );\n  }\n  \n  export const useSigner = () => useContext(SignerContext);"]},"metadata":{},"sourceType":"module"}