{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateBnbTx = exports.decodeBnbTx = exports.encodeBnbTx = void 0;\n\nconst bnbSdk = __importStar(require(\"bnb-javascript-sdk-nobroadcast\"));\n\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\n\nconst tiny_secp256k1_1 = __importDefault(require(\"tiny-secp256k1\"));\n\nfunction encodeBnbTx(unsignedTx, publicKey, signature) {\n  const {\n    account_number,\n    chain_id,\n    sequence,\n    source\n  } = unsignedTx;\n  const msg = unsignedTx.msgs[0];\n\n  const amountToInt = x => Number(x);\n\n  const msgNormalizer = x => ({\n    address: bnbSdk.crypto.decodeAddress(x.address),\n    coins: x.coins.map(y => ({\n      // In particular, these keys are backwards because we can't have nice things.\n      denom: y.denom,\n      amount: amountToInt(y.amount)\n    }))\n  });\n\n  const baseMsg = {\n    inputs: msg.inputs.map(msgNormalizer),\n    outputs: msg.outputs.map(msgNormalizer),\n    aminoPrefix: \"2A2C87FA\"\n  };\n  const tx = new bnbSdk.Transaction(Object.assign({}, unsignedTx, {\n    chainId: chain_id,\n    accountNumber: Number(account_number),\n    source: Number(source !== null && source !== void 0 ? source : 0),\n    sequence: Number(sequence),\n    // A bug in the binance SDK makes this field required, even though it shouldn't be.\n    baseMsg: {\n      getMsg: () => baseMsg,\n      getBaseMsg: () => baseMsg,\n      getSignMsg: () => baseMsg\n    }\n  }));\n  const ecPubKey = bnbSdk.crypto.getPublicKey(Buffer.from(publicKey).toString(\"hex\"));\n  tx.addSignature(ecPubKey, signature);\n  const serializedTx = Buffer.from(tx.serialize(), \"hex\");\n  if (!validateBnbTx(serializedTx, chain_id)) throw new Error(\"serialized tx did not validate\");\n  return serializedTx;\n}\n\nexports.encodeBnbTx = encodeBnbTx;\n\nfunction decodeBnbTx(txBytes, chainId) {\n  const txDecoded = bnbSdk.amino.decoder.unMarshalBinaryLengthPrefixed(txBytes, {\n    aminoPrefix: \"f0625dee\",\n    msgs: [{\n      aminoPrefix: \"2a2c87fa\",\n      inputs: [{\n        address: Buffer.alloc(0),\n        coins: [{\n          denom: \"\",\n          amount: 0\n        }]\n      }],\n      outputs: [{\n        address: Buffer.alloc(0),\n        coins: [{\n          denom: \"\",\n          amount: 0\n        }]\n      }]\n    }],\n    signatures: [{\n      pubKey: Buffer.alloc(0),\n      signature: Buffer.alloc(0),\n      accountNumber: 0,\n      sequence: 0\n    }],\n    memo: \"\",\n    source: 0,\n    data: Buffer.alloc(0)\n  }).val;\n  if (txDecoded.data !== null) throw new Error(\"bad data length\");\n  if (txDecoded.msgs.length !== 1) throw new Error(\"bad msgs length\");\n  if (txDecoded.signatures.length !== 1) throw new Error(\"bad signatures length\");\n  const signBytes = JSON.stringify({\n    account_number: String(txDecoded.signatures[0].accountNumber),\n    chain_id: chainId,\n    data: null,\n    memo: txDecoded.memo,\n    msgs: [{\n      inputs: txDecoded.msgs[0].inputs.map(x => ({\n        address: bnbSdk.crypto.encodeAddress(x.address, \"bnb\"),\n        coins: x.coins.map(y => ({\n          amount: Number(y.amount),\n          denom: y.denom\n        }))\n      })),\n      outputs: txDecoded.msgs[0].outputs.map(x => ({\n        address: bnbSdk.crypto.encodeAddress(x.address, \"bnb\"),\n        coins: x.coins.map(y => ({\n          amount: Number(y.amount),\n          denom: y.denom\n        }))\n      }))\n    }],\n    sequence: String(txDecoded.signatures[0].sequence),\n    source: String(txDecoded.source)\n  });\n  const signBytesHash = crypto_js_1.default.SHA256(crypto_js_1.default.enc.Utf8.parse(signBytes)).toString();\n  const pubKeyAmino = Buffer.from(txDecoded.signatures[0].pubKey);\n  if (pubKeyAmino.readUInt32BE(0) !== 0xeb5ae987) throw new Error(\"bad pubkey aminoPrefix\");\n  if (pubKeyAmino.readUInt8(4) !== 33) throw new Error(\"bad pubKey length\");\n  const pubKey = pubKeyAmino.slice(5);\n  const signature = txDecoded.signatures[0].signature;\n  return {\n    signBytes,\n    signBytesHash,\n    pubKey,\n    signature\n  };\n}\n\nexports.decodeBnbTx = decodeBnbTx;\n\nfunction validateBnbTx(txBytes, chainId) {\n  const {\n    signBytesHash,\n    pubKey,\n    signature\n  } = decodeBnbTx(txBytes, chainId);\n  return tiny_secp256k1_1.default.verify(Buffer.from(signBytesHash, \"hex\"), pubKey, signature);\n}\n\nexports.validateBnbTx = validateBnbTx;","map":{"version":3,"mappings":"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","names":["encodeBnbTx","unsignedTx","publicKey","signature","account_number","chain_id","sequence","source","msg","msgs","amountToInt","x","Number","msgNormalizer","address","bnbSdk","crypto","decodeAddress","coins","map","y","denom","amount","baseMsg","inputs","outputs","aminoPrefix","tx","Transaction","Object","assign","chainId","accountNumber","getMsg","getBaseMsg","getSignMsg","ecPubKey","getPublicKey","Buffer","from","toString","addSignature","serializedTx","serialize","validateBnbTx","Error","exports","decodeBnbTx","txBytes","txDecoded","amino","decoder","unMarshalBinaryLengthPrefixed","alloc","signatures","pubKey","memo","data","val","length","signBytes","JSON","stringify","String","encodeAddress","signBytesHash","crypto_js_1","SHA256","enc","Utf8","parse","pubKeyAmino","readUInt32BE","readUInt8","slice","tiny_secp256k1_1","verify"],"sourceRoot":"","sources":["../src/bnbencoding.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}