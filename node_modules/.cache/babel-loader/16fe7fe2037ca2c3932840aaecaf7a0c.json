{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.messageTypeRegistry = exports.messageNameRegistry = void 0;\n\nconst BinanceMessages = __importStar(require(\"@keepkey/device-protocol/lib/messages-binance_pb\"));\n\nconst CosmosMessages = __importStar(require(\"@keepkey/device-protocol/lib/messages-cosmos_pb\"));\n\nconst EosMessages = __importStar(require(\"@keepkey/device-protocol/lib/messages-eos_pb\"));\n\nconst NanoMessages = __importStar(require(\"@keepkey/device-protocol/lib/messages-nano_pb\"));\n\nconst RippleMessages = __importStar(require(\"@keepkey/device-protocol/lib/messages-ripple_pb\"));\n\nconst ThorchainMessages = __importStar(require(\"@keepkey/device-protocol/lib/messages-thorchain_pb\"));\n\nconst Messages = __importStar(require(\"@keepkey/device-protocol/lib/messages_pb\"));\n\nconst lodash_1 = __importDefault(require(\"lodash\")); // Conflict between typedef and actual js export\n\n\nconst AllMessages = [].concat(Object.entries(lodash_1.default.omit(Messages, \"MessageType\", \"MessageTypeMap\"))).concat(Object.entries(CosmosMessages)).concat(Object.entries(BinanceMessages)).concat(Object.entries(RippleMessages)).concat(Object.entries(NanoMessages)).concat(Object.entries(lodash_1.default.omit(EosMessages, \"EosPublicKeyKind\", \"EosPublicKeyKindMap\"))).concat(Object.entries(ThorchainMessages));\nconst upperCasedMessageClasses = AllMessages.reduce((registry, entry) => {\n  registry[entry[0].toUpperCase()] = entry[1];\n  return registry;\n}, {}); // Map of message type enums to human readable message name\n\nexports.messageNameRegistry = Object.entries(Messages.MessageType).reduce((registry, entry) => {\n  registry[entry[1]] = entry[0].split(\"_\")[1];\n  return registry;\n}, {}); // Map of message type enum to their protobuf constructor\n\nexports.messageTypeRegistry = Object.entries(Messages.MessageType).reduce((registry, entry) => {\n  registry[entry[1]] = upperCasedMessageClasses[entry[0].split(\"_\")[1].toUpperCase()];\n  return registry;\n}, {});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA,oD,CAEA;;;AAEA,MAAMA,WAAW,GAAI,GAClBC,MADkB,CACXC,MAAM,CAACC,OAAP,CAAeC,iBAAEC,IAAF,CAAOC,QAAP,EAAiB,aAAjB,EAAgC,gBAAhC,CAAf,CADW,EAElBL,MAFkB,CAEXC,MAAM,CAACC,OAAP,CAAeI,cAAf,CAFW,EAGlBN,MAHkB,CAGXC,MAAM,CAACC,OAAP,CAAeK,eAAf,CAHW,EAIlBP,MAJkB,CAIXC,MAAM,CAACC,OAAP,CAAeM,cAAf,CAJW,EAKlBR,MALkB,CAKXC,MAAM,CAACC,OAAP,CAAeO,YAAf,CALW,EAMlBT,MANkB,CAMXC,MAAM,CAACC,OAAP,CAAeC,iBAAEC,IAAF,CAAOM,WAAP,EAAoB,kBAApB,EAAwC,qBAAxC,CAAf,CANW,EAOlBV,MAPkB,CAOXC,MAAM,CAACC,OAAP,CAAeS,iBAAf,CAPW,CAArB;AASA,MAAMC,wBAAwB,GAAGb,WAAW,CAACc,MAAZ,CAC/B,CAACC,QAAD,EAAWC,KAAX,KAA8D;AAC5DD,UAAQ,CAACC,KAAK,CAAC,CAAD,CAAL,CAASC,WAAT,EAAD,CAAR,GAAmCD,KAAK,CAAC,CAAD,CAAxC;AACA,SAAOD,QAAP;AACD,CAJ8B,EAK/B,EAL+B,CAAjC,C,CAQA;;AACaG,8BAAsBhB,MAAM,CAACC,OAAP,CAAeG,QAAQ,CAACa,WAAxB,EAAqCL,MAArC,CACjC,CAACC,QAAD,EAAWC,KAAX,KAAsC;AACpCD,UAAQ,CAACC,KAAK,CAAC,CAAD,CAAN,CAAR,GAAqBA,KAAK,CAAC,CAAD,CAAL,CAASI,KAAT,CAAe,GAAf,EAAoB,CAApB,CAArB;AACA,SAAOL,QAAP;AACD,CAJgC,EAKjC,EALiC,CAAtB,C,CAQb;;AACaG,8BAAsBhB,MAAM,CAACC,OAAP,CAAeG,QAAQ,CAACa,WAAxB,EAAqCL,MAArC,CACjC,CAACC,QAAD,EAAWC,KAAX,KAAsC;AACpCD,UAAQ,CAACC,KAAK,CAAC,CAAD,CAAN,CAAR,GAAqBH,wBAAwB,CAACG,KAAK,CAAC,CAAD,CAAL,CAASI,KAAT,CAAe,GAAf,EAAoB,CAApB,EAAuBH,WAAvB,EAAD,CAA7C;AACA,SAAOF,QAAP;AACD,CAJgC,EAKjC,EALiC,CAAtB","names":["AllMessages","concat","Object","entries","lodash_1","omit","Messages","CosmosMessages","BinanceMessages","RippleMessages","NanoMessages","EosMessages","ThorchainMessages","upperCasedMessageClasses","reduce","registry","entry","toUpperCase","exports","MessageType","split"],"sourceRoot":"","sources":["../src/typeRegistry.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}