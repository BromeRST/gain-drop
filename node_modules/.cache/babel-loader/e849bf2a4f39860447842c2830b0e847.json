{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst createHash = require('create-hash');\n\nconst AlgorithmLength = {\n  ripemd160: 20,\n  sha1: 20,\n  sha256: 32,\n  hash160: 20,\n  hash256: 32\n};\n\nfunction asDigest(buffer, preimage, algorithm) {\n  const out = Object.assign(buffer, {\n    preimage,\n    algorithm\n  });\n  const expectedLength = AlgorithmLength[algorithm];\n  if (out.length !== expectedLength) throw new Error('bad digest length');\n  return out;\n}\n\nfunction ripemd160(buffer) {\n  let out;\n\n  try {\n    out = createHash('rmd160').update(buffer).digest();\n  } catch (err) {\n    out = createHash('ripemd160').update(buffer).digest();\n  }\n\n  return asDigest(out, buffer, 'ripemd160');\n}\n\nexports.ripemd160 = ripemd160;\n\nfunction sha1(buffer) {\n  const out = createHash('sha1').update(buffer).digest();\n  return asDigest(out, buffer, 'sha1');\n}\n\nexports.sha1 = sha1;\n\nfunction sha256(buffer) {\n  const out = createHash('sha256').update(buffer).digest();\n  return asDigest(out, buffer, 'sha256');\n}\n\nexports.sha256 = sha256;\n\nfunction hash160(buffer) {\n  const out = ripemd160(sha256(buffer));\n  return asDigest(out, buffer, 'hash160');\n}\n\nexports.hash160 = hash160;\n\nfunction hash256(buffer) {\n  const out = sha256(sha256(buffer));\n  return asDigest(out, buffer, 'hash256');\n}\n\nexports.hash256 = hash256;","map":{"version":3,"sources":["/Users/massimilianoalbini/Documents/gain-drop/gain-drop/node_modules/@shapeshiftoss/bitcoinjs-lib/src/crypto.js"],"names":["Object","defineProperty","exports","value","createHash","require","AlgorithmLength","ripemd160","sha1","sha256","hash160","hash256","asDigest","buffer","preimage","algorithm","out","assign","expectedLength","length","Error","update","digest","err"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,SAAS,EAAE,EADW;AAEtBC,EAAAA,IAAI,EAAE,EAFgB;AAGtBC,EAAAA,MAAM,EAAE,EAHc;AAItBC,EAAAA,OAAO,EAAE,EAJa;AAKtBC,EAAAA,OAAO,EAAE;AALa,CAAxB;;AAOA,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,QAA1B,EAAoCC,SAApC,EAA+C;AAC7C,QAAMC,GAAG,GAAGhB,MAAM,CAACiB,MAAP,CAAcJ,MAAd,EAAsB;AAChCC,IAAAA,QADgC;AAEhCC,IAAAA;AAFgC,GAAtB,CAAZ;AAIA,QAAMG,cAAc,GAAGZ,eAAe,CAACS,SAAD,CAAtC;AACA,MAAIC,GAAG,CAACG,MAAJ,KAAeD,cAAnB,EAAmC,MAAM,IAAIE,KAAJ,CAAU,mBAAV,CAAN;AACnC,SAAOJ,GAAP;AACD;;AACD,SAAST,SAAT,CAAmBM,MAAnB,EAA2B;AACzB,MAAIG,GAAJ;;AACA,MAAI;AACFA,IAAAA,GAAG,GAAGZ,UAAU,CAAC,QAAD,CAAV,CACHiB,MADG,CACIR,MADJ,EAEHS,MAFG,EAAN;AAGD,GAJD,CAIE,OAAOC,GAAP,EAAY;AACZP,IAAAA,GAAG,GAAGZ,UAAU,CAAC,WAAD,CAAV,CACHiB,MADG,CACIR,MADJ,EAEHS,MAFG,EAAN;AAGD;;AACD,SAAOV,QAAQ,CAACI,GAAD,EAAMH,MAAN,EAAc,WAAd,CAAf;AACD;;AACDX,OAAO,CAACK,SAAR,GAAoBA,SAApB;;AACA,SAASC,IAAT,CAAcK,MAAd,EAAsB;AACpB,QAAMG,GAAG,GAAGZ,UAAU,CAAC,MAAD,CAAV,CACTiB,MADS,CACFR,MADE,EAETS,MAFS,EAAZ;AAGA,SAAOV,QAAQ,CAACI,GAAD,EAAMH,MAAN,EAAc,MAAd,CAAf;AACD;;AACDX,OAAO,CAACM,IAAR,GAAeA,IAAf;;AACA,SAASC,MAAT,CAAgBI,MAAhB,EAAwB;AACtB,QAAMG,GAAG,GAAGZ,UAAU,CAAC,QAAD,CAAV,CACTiB,MADS,CACFR,MADE,EAETS,MAFS,EAAZ;AAGA,SAAOV,QAAQ,CAACI,GAAD,EAAMH,MAAN,EAAc,QAAd,CAAf;AACD;;AACDX,OAAO,CAACO,MAAR,GAAiBA,MAAjB;;AACA,SAASC,OAAT,CAAiBG,MAAjB,EAAyB;AACvB,QAAMG,GAAG,GAAGT,SAAS,CAACE,MAAM,CAACI,MAAD,CAAP,CAArB;AACA,SAAOD,QAAQ,CAACI,GAAD,EAAMH,MAAN,EAAc,SAAd,CAAf;AACD;;AACDX,OAAO,CAACQ,OAAR,GAAkBA,OAAlB;;AACA,SAASC,OAAT,CAAiBE,MAAjB,EAAyB;AACvB,QAAMG,GAAG,GAAGP,MAAM,CAACA,MAAM,CAACI,MAAD,CAAP,CAAlB;AACA,SAAOD,QAAQ,CAACI,GAAD,EAAMH,MAAN,EAAc,SAAd,CAAf;AACD;;AACDX,OAAO,CAACS,OAAR,GAAkBA,OAAlB","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst createHash = require('create-hash');\nconst AlgorithmLength = {\n  ripemd160: 20,\n  sha1: 20,\n  sha256: 32,\n  hash160: 20,\n  hash256: 32,\n};\nfunction asDigest(buffer, preimage, algorithm) {\n  const out = Object.assign(buffer, {\n    preimage,\n    algorithm,\n  });\n  const expectedLength = AlgorithmLength[algorithm];\n  if (out.length !== expectedLength) throw new Error('bad digest length');\n  return out;\n}\nfunction ripemd160(buffer) {\n  let out;\n  try {\n    out = createHash('rmd160')\n      .update(buffer)\n      .digest();\n  } catch (err) {\n    out = createHash('ripemd160')\n      .update(buffer)\n      .digest();\n  }\n  return asDigest(out, buffer, 'ripemd160');\n}\nexports.ripemd160 = ripemd160;\nfunction sha1(buffer) {\n  const out = createHash('sha1')\n    .update(buffer)\n    .digest();\n  return asDigest(out, buffer, 'sha1');\n}\nexports.sha1 = sha1;\nfunction sha256(buffer) {\n  const out = createHash('sha256')\n    .update(buffer)\n    .digest();\n  return asDigest(out, buffer, 'sha256');\n}\nexports.sha256 = sha256;\nfunction hash160(buffer) {\n  const out = ripemd160(sha256(buffer));\n  return asDigest(out, buffer, 'hash160');\n}\nexports.hash160 = hash160;\nfunction hash256(buffer) {\n  const out = sha256(sha256(buffer));\n  return asDigest(out, buffer, 'hash256');\n}\nexports.hash256 = hash256;\n"]},"metadata":{},"sourceType":"script"}