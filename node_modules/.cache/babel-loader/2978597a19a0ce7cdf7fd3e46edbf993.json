{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isIndexable = exports.compatibleBufferConcat = exports.checkBufferConcat = exports.untouchable = exports.mustBeDefined = exports.toArrayBuffer = exports.relativePath = exports.hardenedPath = exports.satsFromStr = exports.slip44ByCoin = exports.base64toHEX = exports.stripHexPrefixAndLower = exports.stripHexPrefix = exports.takeFirstOfManyEvents = exports.bip32Like = exports.addressNListToBIP32 = exports.bip32ToAddressNList = exports.arrayify = exports.toHexString = exports.fromHexString = exports.isArray = exports.LONG_TIMEOUT = exports.DEFAULT_TIMEOUT = void 0;\n\nconst Rx = __importStar(require(\"rxjs\"));\n\nconst RxOp = __importStar(require(\"rxjs/operators\"));\n\nexports.DEFAULT_TIMEOUT = 5000; // 5 seconds\n\nexports.LONG_TIMEOUT = 5 * 60 * 1000; // 5 minutes\n\nexports.isArray = Array.isArray || function (obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\";\n}; // These helper functions marshal hex into and out of UInt8Arrays which are consumed by protobuf js\n\n\nconst fromHexString = hexString => {\n  const match = hexString.match(/.{1,2}/g) || [];\n  return new Uint8Array(match.map(byte => parseInt(byte, 16)));\n};\n\nexports.fromHexString = fromHexString; // export const toHexString = (bytes: number[]) => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '')\n\nfunction toHexString(arr) {\n  return Array.prototype.map.call(arr, x => (\"00\" + x.toString(16)).slice(-2)).join(\"\");\n}\n\nexports.toHexString = toHexString; // Copying this from ethers.js until their elliptic dep stops being circular\n\nfunction arrayify(value) {\n  if (value === null) {\n    throw new Error(\"cannot convert null value to array\");\n  } else if (typeof value !== \"string\") {\n    throw new Error(\"can only convert hex strings\");\n  }\n\n  let match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n\n  if (!match) {\n    throw new Error(\"invalid hexadecimal string\");\n  }\n\n  if (match[1] !== \"0x\") {\n    throw new Error(\"hex string must have 0x prefix\");\n  }\n\n  value = value.substring(2);\n\n  if (value.length % 2) {\n    value = \"0\" + value;\n  }\n\n  const result = [];\n\n  for (let i = 0; i < value.length; i += 2) {\n    result.push(parseInt(value.substr(i, 2), 16));\n  }\n\n  return new Uint8Array(result);\n}\n\nexports.arrayify = arrayify;\nconst HARDENED = 0x80000000;\n\nfunction bip32ToAddressNList(path) {\n  if (!bip32Like(path)) {\n    throw new Error(`Not a bip32 path: '${path}'`);\n  }\n\n  if (/^m\\//i.test(path)) {\n    path = path.slice(2);\n  }\n\n  const segments = path.split(\"/\");\n  if (segments.length === 1 && segments[0] === \"\") return [];\n  const ret = new Array(segments.length);\n\n  for (let i = 0; i < segments.length; i++) {\n    const tmp = /(\\d+)([hH\\']?)/.exec(segments[i]);\n\n    if (tmp === null) {\n      throw new Error(\"Invalid input\");\n    }\n\n    ret[i] = parseInt(tmp[1], 10);\n\n    if (ret[i] >= HARDENED) {\n      throw new Error(\"Invalid child index\");\n    }\n\n    if (tmp[2] === \"h\" || tmp[2] === \"H\" || tmp[2] === \"'\") {\n      ret[i] += HARDENED;\n    } else if (tmp[2].length !== 0) {\n      throw new Error(\"Invalid modifier\");\n    }\n  }\n\n  return ret;\n}\n\nexports.bip32ToAddressNList = bip32ToAddressNList;\n\nfunction addressNListToBIP32(address) {\n  return `m/${address.map(num => num >= HARDENED ? `${num - HARDENED}'` : num).join(\"/\")}`;\n}\n\nexports.addressNListToBIP32 = addressNListToBIP32;\n\nfunction bip32Like(path) {\n  if (path == \"m/\") return true;\n  return /^m(((\\/[0-9]+h)+|(\\/[0-9]+H)+|(\\/[0-9]+')*)((\\/[0-9]+)*))$/.test(path);\n}\n\nexports.bip32Like = bip32Like;\n\nfunction takeFirstOfManyEvents(eventEmitter, events) {\n  return Rx.merge(...events.map(event => Rx.fromEvent(eventEmitter, event))).pipe(RxOp.first());\n}\n\nexports.takeFirstOfManyEvents = takeFirstOfManyEvents;\n\nfunction stripHexPrefix(value) {\n  return value.replace(\"0x\", \"\");\n}\n\nexports.stripHexPrefix = stripHexPrefix;\n\nfunction stripHexPrefixAndLower(value) {\n  return stripHexPrefix(value).toLowerCase();\n}\n\nexports.stripHexPrefixAndLower = stripHexPrefixAndLower;\n\nfunction base64toHEX(base64) {\n  var raw = atob(base64);\n  var HEX = \"\";\n\n  for (let i = 0; i < raw.length; i++) {\n    var _hex = raw.charCodeAt(i).toString(16);\n\n    HEX += _hex.length == 2 ? _hex : \"0\" + _hex;\n  }\n\n  return \"0x\" + HEX.toUpperCase();\n}\n\nexports.base64toHEX = base64toHEX; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst slip44Table = Object.freeze({\n  Bitcoin: 0,\n  Testnet: 1,\n  BitcoinCash: 145,\n  BitcoinGold: 156,\n  Litecoin: 2,\n  Dash: 5,\n  DigiByte: 20,\n  Dogecoin: 3,\n  BitcoinSV: 236,\n  Ethereum: 60,\n  Atom: 118,\n  Osmo: 118,\n  Binance: 714,\n  Ripple: 144,\n  Eos: 194,\n  Fio: 235,\n  Thorchain: 931,\n  Rune: 931,\n  Cardano: 1815,\n  Secret: 529,\n  Terra: 330,\n  Kava: 459\n});\n\nfunction slip44ByCoin(coin) {\n  return slip44Table[coin];\n}\n\nexports.slip44ByCoin = slip44ByCoin;\n\nfunction satsFromStr(coins) {\n  let index = coins.indexOf(\".\");\n  let exponent = index > 0 ? 8 - (coins.length - index - 1) : 8;\n  return Number(coins.replace(/\\./g, \"\")) * 10 ** exponent;\n}\n\nexports.satsFromStr = satsFromStr;\n\nfunction hardenedPath(path) {\n  return path.filter(segment => segment >= 0x80000000);\n}\n\nexports.hardenedPath = hardenedPath;\n\nfunction relativePath(path) {\n  return path.filter(segment => segment < 0x80000000);\n}\n\nexports.relativePath = relativePath;\n\nfunction toArrayBuffer(x) {\n  if (x instanceof ArrayBuffer) return x;\n  return x.buffer.slice(x.byteOffset, x.byteOffset + x.byteLength);\n}\n\nexports.toArrayBuffer = toArrayBuffer;\n\nfunction mustBeDefined(x) {\n  if (x === null || x === undefined) throw new Error(\"expected a value\");\n  return x;\n}\n\nexports.mustBeDefined = mustBeDefined; // Returns a copyable object which satisfies any type constraint but produces a runtime error if\n// accessed in any other way. Useful as dummy data for required parameters. (Probably a bad idea\n// in production.)\n\nfunction untouchable(message) {\n  const out = new Proxy({}, new Proxy({}, {\n    get(_, p) {\n      return (_, p2) => {\n        if (p === \"get\" && p2 === \"valueOf\") return () => out;\n        throw new Error(`${String(p)}(${String(p2)}): ${message}`);\n      };\n    }\n\n  }));\n  return out;\n}\n\nexports.untouchable = untouchable; // Webpack 4's Buffer.concat() polyfill requires Buffer[] instead of Uint8Array[]. This is a\n// kludgy compatibility hack until everything gets bumped to Webpack 5.\n\nlet needCompatibleBufferConcat = undefined;\n\nfunction checkBufferConcat() {\n  if (needCompatibleBufferConcat === undefined) {\n    try {\n      Buffer.concat([new Uint8Array()]);\n      needCompatibleBufferConcat = false;\n    } catch (_a) {\n      needCompatibleBufferConcat = true;\n    }\n  }\n\n  return needCompatibleBufferConcat;\n}\n\nexports.checkBufferConcat = checkBufferConcat;\n\nfunction compatibleBufferConcat(list) {\n  if (!checkBufferConcat()) return Buffer.concat(list);\n  return Buffer.concat(list.map(x => Buffer.isBuffer(x) ? x : Buffer.from(x)));\n}\n\nexports.compatibleBufferConcat = compatibleBufferConcat;\n/**\n * Type guard for things that might have (string-keyed) properties. Useful to make\n * TypeScript happy when you want to check if an object of unknown type has a particular\n * property set.\n * @example\n * try {\n *   foo();\n * } catch (e: unknown) {\n *   // Not allowed because there's no index signature for `unknown`:\n *   // if (e.bar === \"baz\") return \"foobar\";\n *   if (isIndexable(e) && e.bar === \"baz\") return \"foobar\";\n *   throw e;\n * }\n * @example\n * isIndexable({}) === true\n * @example\n * isIndexable(() => {}) === true\n * @example\n * isIndexable(Object.create(null)) === true\n * @example\n * isIndexable(String(\"foo\")) === true\n * @example\n * isIndexable(null) === false\n * @example\n * isIndexable(3.14) === false\n * @example\n * isIndexable(\"foo\") === false\n */\n\nfunction isIndexable(x) {\n  return x !== null && [\"object\", \"function\"].includes(typeof x);\n}\n\nexports.isIndexable = isIndexable;","map":{"version":3,"mappings":"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","names":["exports","Array","isArray","obj","Object","prototype","toString","call","fromHexString","hexString","match","Uint8Array","map","byte","parseInt","toHexString","arr","x","slice","join","arrayify","value","Error","substring","length","result","i","push","substr","HARDENED","bip32ToAddressNList","path","bip32Like","test","segments","split","ret","tmp","exec","addressNListToBIP32","address","num","takeFirstOfManyEvents","eventEmitter","events","Rx","merge","event","fromEvent","pipe","RxOp","first","stripHexPrefix","replace","stripHexPrefixAndLower","toLowerCase","base64toHEX","base64","raw","atob","HEX","_hex","charCodeAt","toUpperCase","slip44Table","freeze","Bitcoin","Testnet","BitcoinCash","BitcoinGold","Litecoin","Dash","DigiByte","Dogecoin","BitcoinSV","Ethereum","Atom","Osmo","Binance","Ripple","Eos","Fio","Thorchain","Rune","Cardano","Secret","Terra","Kava","slip44ByCoin","coin","satsFromStr","coins","index","indexOf","exponent","Number","hardenedPath","filter","segment","relativePath","toArrayBuffer","ArrayBuffer","buffer","byteOffset","byteLength","mustBeDefined","undefined","untouchable","message","out","Proxy","get","_","p","p2","String","needCompatibleBufferConcat","checkBufferConcat","Buffer","concat","compatibleBufferConcat","list","isBuffer","from","isIndexable","includes"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}