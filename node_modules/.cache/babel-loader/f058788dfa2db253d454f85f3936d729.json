{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractSingleWorkload = exports.smartDecodeUR = exports.decodeUR = void 0;\n\nvar utils_1 = require(\"./utils\");\n\nvar miniCbor_1 = require(\"./miniCbor\");\n\nvar bc_bech32_1 = require(\"@cvbb/bc-bech32\");\n\nvar checkAndGetSequence = function (sequence) {\n  var pieces = sequence.toUpperCase().split('OF');\n  if (pieces.length !== 2) throw new Error(\"invalid sequence: \" + sequence);\n  var index = pieces[0],\n      total = pieces[1];\n  return [+index, +total];\n};\n\nvar checkDigest = function (digest, payload) {\n  var decoded = bc_bech32_1.decodeBc32Data(payload);\n  if (!decoded) throw new Error(\"can not decode payload: \" + payload);\n\n  if (bc_bech32_1.decodeBc32Data(digest) !== utils_1.sha256Hash(Buffer.from(decoded, 'hex')).toString('hex')) {\n    throw new Error(\"invalid digest: \\n digest:\" + digest + \" \\n payload:\" + payload);\n  }\n};\n\nvar checkURHeader = function (UR, type) {\n  if (type === void 0) {\n    type = 'bytes';\n  }\n\n  if (UR.toUpperCase() !== (\"ur:\" + type).toUpperCase()) throw new Error(\"invalid UR header: \" + UR);\n};\n\nvar dealWithSingleWorkload = function (workload, type) {\n  if (type === void 0) {\n    type = 'bytes';\n  }\n\n  var pieces = workload.split('/');\n\n  switch (pieces.length) {\n    case 2:\n      {\n        //UR:Type/[Fragment]\n        checkURHeader(pieces[0], type);\n        return pieces[1];\n      }\n\n    case 3:\n      {\n        //UR:Type/[Digest]/[Fragment] when Sequencing is omitted, Digest MAY be omitted;\n        //should check digest\n        checkURHeader(pieces[0], type);\n        var digest = pieces[1];\n        var fragment = pieces[2];\n        checkDigest(digest, fragment);\n        return fragment;\n      }\n\n    case 4:\n      {\n        //UR:Type/[Sequencing]/[Digest]/[Fragment]\n        //should check sequencing and digest\n        checkURHeader(pieces[0], type);\n        checkAndGetSequence(pieces[1]);\n        var digest = pieces[2];\n        var fragment = pieces[3];\n        checkDigest(digest, fragment);\n        return fragment;\n      }\n\n    default:\n      throw new Error(\"invalid workload pieces length: expect 2 / 3 / 4 bug got \" + pieces.length);\n  }\n};\n\nvar dealWithMultipleWorkloads = function (workloads, type) {\n  if (type === void 0) {\n    type = 'bytes';\n  }\n\n  var length = workloads.length;\n  var fragments = new Array(length).fill('');\n  var digest = '';\n  workloads.forEach(function (workload) {\n    var pieces = workload.split('/');\n    checkURHeader(pieces[0], type);\n\n    var _a = checkAndGetSequence(pieces[1]),\n        index = _a[0],\n        total = _a[1];\n\n    if (total !== length) throw new Error(\"invalid workload: \" + workload + \", total \" + total + \" not equal workloads length \" + length);\n    if (digest && digest !== pieces[2]) throw new Error(\"invalid workload: \" + workload + \", checksum changed \" + digest + \", \" + pieces[2]);\n    digest = pieces[2];\n    if (fragments[index - 1]) throw new Error(\"invalid workload: \" + workload + \", index \" + index + \" has already been set\");\n    fragments[index - 1] = pieces[3];\n  });\n  var payload = fragments.join('');\n  checkDigest(digest, payload);\n  return payload;\n};\n\nvar getBC32Payload = function (workloads, type) {\n  if (type === void 0) {\n    type = 'bytes';\n  }\n\n  try {\n    var length_1 = workloads.length;\n\n    if (length_1 === 1) {\n      return dealWithSingleWorkload(workloads[0], type);\n    } else {\n      return dealWithMultipleWorkloads(workloads, type);\n    }\n  } catch (e) {\n    throw new Error(\"invalid workloads: \" + workloads + \"\\n \" + e);\n  }\n};\n\nvar decodeUR = function (workloads, type) {\n  if (type === void 0) {\n    type = 'bytes';\n  }\n\n  var bc32Payload = getBC32Payload(workloads, type);\n  var cborPayload = bc_bech32_1.decodeBc32Data(bc32Payload);\n\n  if (!cborPayload) {\n    throw new Error('invalid data');\n  }\n\n  return miniCbor_1.decodeSimpleCBOR(cborPayload);\n};\n\nexports.decodeUR = decodeUR;\n\nvar onlyUniq = function (value, index, self) {\n  return self.indexOf(value) === index;\n};\n\nvar smartDecodeUR = function (workloads) {\n  if (workloads.length > 0) {\n    var _a = exports.extractSingleWorkload(workloads[0]),\n        index = _a[0],\n        total = _a[1];\n\n    if (workloads.length === total) {\n      return {\n        success: true,\n        current: workloads.length,\n        length: total,\n        workloads: [],\n        result: exports.decodeUR(workloads)\n      };\n    } else {\n      return {\n        success: false,\n        current: workloads.length,\n        length: total,\n        workloads: workloads.filter(onlyUniq),\n        result: ''\n      };\n    }\n  } else {\n    return {\n      success: false,\n      current: 0,\n      length: 0,\n      workloads: [],\n      result: ''\n    };\n  }\n};\n\nexports.smartDecodeUR = smartDecodeUR;\n\nvar extractSingleWorkload = function (workload) {\n  var pieces = workload.toUpperCase().split('/');\n\n  switch (pieces.length) {\n    case 2: //UR:Type/[Fragment]\n\n    case 3:\n      {\n        //UR:Type/[Digest]/[Fragment] when Sequencing is omitted, Digest MAY be omitted;\n        return [1, 1];\n      }\n\n    case 4:\n      {\n        //UR:Type/[Sequencing]/[Digest]/[Fragment]\n        return checkAndGetSequence(pieces[1]);\n      }\n\n    default:\n      throw new Error(\"invalid workload pieces length: expect 2 / 3 / 4 bug got \" + pieces.length);\n  }\n};\n\nexports.extractSingleWorkload = extractSingleWorkload;","map":{"version":3,"mappings":"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","names":["checkAndGetSequence","sequence","pieces","toUpperCase","split","length","Error","total","index","checkDigest","digest","payload","decoded","bc_bech32_1","utils_1","Buffer","from","toString","checkURHeader","UR","type","dealWithSingleWorkload","workload","fragment","dealWithMultipleWorkloads","workloads","fragments","Array","fill","forEach","join","getBC32Payload","length_1","e","decodeUR","bc32Payload","cborPayload","miniCbor_1","exports","onlyUniq","value","self","indexOf","smartDecodeUR","success","current","result","filter","extractSingleWorkload"],"sourceRoot":"","sources":["../src/decodeUR.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}