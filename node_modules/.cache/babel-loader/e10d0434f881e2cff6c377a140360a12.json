{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiKey = void 0;\n\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\n\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\n\nconst DataItem_1 = require(\"./lib/DataItem\");\n\nconst RegistryItem_1 = require(\"./RegistryItem\");\n\nconst RegistryType_1 = require(\"./RegistryType\");\n\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"threshold\"] = 1] = \"threshold\";\n  Keys[Keys[\"keys\"] = 2] = \"keys\";\n})(Keys || (Keys = {}));\n\nclass MultiKey extends RegistryItem_1.RegistryItem {\n  constructor(threshold, ecKeys, hdKeys) {\n    super();\n    this.threshold = threshold;\n    this.ecKeys = ecKeys;\n    this.hdKeys = hdKeys;\n\n    this.getThreshold = () => this.threshold;\n\n    this.getEcKeys = () => this.ecKeys;\n\n    this.getHdKeys = () => this.hdKeys;\n\n    this.toDataItem = () => {\n      const map = {};\n      map[Keys.threshold] = this.threshold;\n      const keys = [...this.ecKeys, ...this.hdKeys].map(k => {\n        const dataItem = k.toDataItem();\n        dataItem.setTag(k.getRegistryType().getTag());\n        return dataItem;\n      });\n      map[Keys.keys] = keys;\n      return new DataItem_1.DataItem(map);\n    };\n  }\n\n}\n\nexports.MultiKey = MultiKey;\n\nMultiKey.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const threshold = map[Keys.threshold];\n  const keys = map[Keys.keys];\n  const ecKeys = [];\n  const hdKeys = [];\n  keys.forEach(k => {\n    if (k.getTag() === RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getTag()) {\n      hdKeys.push(CryptoHDKey_1.CryptoHDKey.fromDataItem(k));\n    } else if (k.getTag() === RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getTag()) {\n      ecKeys.push(CryptoECKey_1.CryptoECKey.fromDataItem(k));\n    }\n  });\n  return new MultiKey(threshold, ecKeys, hdKeys);\n};","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAKA,IAAL;;AAAA,WAAKA,IAAL,EAAS;AACPA;AACAA;AACD,CAHD,EAAKA,IAAI,KAAJA,IAAI,MAAT;;AAKA,MAAaC,QAAb,SAA8BC,2BAA9B,CAA0C;AAGxCC,cACUC,SADV,EAEUC,MAFV,EAGUC,MAHV,EAG+B;AAE7B;AAJQ;AACA;AACA;;AAKV,wBAAe,MAAM,KAAKF,SAA1B;;AACA,qBAAY,MAAM,KAAKC,MAAvB;;AACA,qBAAY,MAAM,KAAKC,MAAvB;;AAEA,sBAAa,MAAK;AAChB,YAAMC,GAAG,GAAG,EAAZ;AACAA,SAAG,CAACP,IAAI,CAACI,SAAN,CAAH,GAAsB,KAAKA,SAA3B;AACA,YAAMI,IAAI,GAAe,CAAC,GAAG,KAAKH,MAAT,EAAiB,GAAG,KAAKC,MAAzB,EAAiCC,GAAjC,CAAsCE,CAAD,IAAM;AAClE,cAAMC,QAAQ,GAAGD,CAAC,CAACE,UAAF,EAAjB;AACAD,gBAAQ,CAACE,MAAT,CAAgBH,CAAC,CAACI,eAAF,GAAoBC,MAApB,EAAhB;AACA,eAAOJ,QAAP;AACD,OAJwB,CAAzB;AAKAH,SAAG,CAACP,IAAI,CAACQ,IAAN,CAAH,GAAiBA,IAAjB;AACA,aAAO,IAAIO,mBAAJ,CAAaR,GAAb,CAAP;AACD,KAVD;AANC;;AATuC;;AAA1CS;;AA2BSf,wBAAgBS,QAAD,IAAuB;AAC3C,QAAMH,GAAG,GAAGG,QAAQ,CAACO,OAAT,EAAZ;AACA,QAAMb,SAAS,GAAGG,GAAG,CAACP,IAAI,CAACI,SAAN,CAArB;AACA,QAAMI,IAAI,GAAGD,GAAG,CAACP,IAAI,CAACQ,IAAN,CAAhB;AACA,QAAMH,MAAM,GAAG,EAAf;AACA,QAAMC,MAAM,GAAG,EAAf;AACAE,MAAI,CAACU,OAAL,CAAcT,CAAD,IAAM;AACjB,QAAIA,CAAC,CAACK,MAAF,OAAeK,6BAAcC,YAAd,CAA2BN,MAA3B,EAAnB,EAAwD;AACtDR,YAAM,CAACe,IAAP,CAAYC,0BAAYC,YAAZ,CAAyBd,CAAzB,CAAZ;AACD,KAFD,MAEO,IAAIA,CAAC,CAACK,MAAF,OAAeK,6BAAcK,YAAd,CAA2BV,MAA3B,EAAnB,EAAwD;AAC7DT,YAAM,CAACgB,IAAP,CAAYI,0BAAYF,YAAZ,CAAyBd,CAAzB,CAAZ;AACD;AACF,GAND;AAOA,SAAO,IAAIR,QAAJ,CAAaG,SAAb,EAAwBC,MAAxB,EAAgCC,MAAhC,CAAP;AACD,CAdM","names":["Keys","MultiKey","RegistryItem_1","constructor","threshold","ecKeys","hdKeys","map","keys","k","dataItem","toDataItem","setTag","getRegistryType","getTag","DataItem_1","exports","getData","forEach","RegistryType_1","CRYPTO_HDKEY","push","CryptoHDKey_1","fromDataItem","CRYPTO_ECKEY","CryptoECKey_1"],"sourceRoot":"","sources":["../src/MultiKey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}