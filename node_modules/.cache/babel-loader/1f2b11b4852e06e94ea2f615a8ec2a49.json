{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.binanceGetAddress = exports.binanceSignTx = exports.binanceGetAccountPaths = void 0;\n\nconst BinanceMessages = __importStar(require(\"@keepkey/device-protocol/lib/messages-binance_pb\"));\n\nconst Messages = __importStar(require(\"@keepkey/device-protocol/lib/messages_pb\"));\n\nconst core = __importStar(require(\"@shapeshiftoss/hdwallet-core\"));\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\n\nconst bnbencoding_1 = require(\"./bnbencoding\");\n\nfunction binanceGetAccountPaths(msg) {\n  return [{\n    addressNList: [0x80000000 + 44, 0x80000000 + core.slip44ByCoin(\"Binance\"), 0x80000000 + msg.accountIdx, 0, 0]\n  }];\n}\n\nexports.binanceGetAccountPaths = binanceGetAccountPaths;\n\nfunction binanceSignTx(transport, msg) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {\n      if (msg.testnet) throw new Error(\"testnet not supported\");\n      const partialTx = Object.assign({}, msg.tx);\n      if (!partialTx.data) partialTx.data = null;\n      if (!partialTx.memo) partialTx.memo = \"\";\n      if (!partialTx.sequence) partialTx.sequence = \"0\";\n      if (!partialTx.source) partialTx.source = \"0\";\n      if (!partialTx.account_number) throw new Error(\"account_number is required\");\n      if (!partialTx.chain_id) throw new Error(\"chain_id is required\");\n      const tx = partialTx;\n      if (tx.data) throw new Error(\"tx data field not supported\");\n      const signTx = new BinanceMessages.BinanceSignTx();\n      signTx.setAddressNList(msg.addressNList);\n      signTx.setAccountNumber(tx.account_number);\n      signTx.setChainId(tx.chain_id);\n      signTx.setSequence(tx.sequence);\n      if (tx.memo) signTx.setMemo(tx.memo); //verify not a batch tx\n\n      if (msg.tx.msgs.length > 1) throw new Error(\"Binance batch sending not supported!\");\n      let message = msg.tx.msgs[0]; //tell device not a batch tx\n\n      signTx.setMsgCount(1); //tell device im about to send a tx to sign\n\n      let resp = yield transport.call(Messages.MessageType.MESSAGETYPE_BINANCESIGNTX, signTx, {\n        msgTimeout: core.LONG_TIMEOUT,\n        omitLock: true\n      });\n      const outputAmount = new bignumber_js_1.default(message.outputs[0].coins[0].amount);\n      const inputAmount = new bignumber_js_1.default(message.inputs[0].coins[0].amount);\n      if (!outputAmount.isInteger()) throw new Error(\"Output amount must be an integer\");\n      if (!inputAmount.isInteger()) throw new Error(\"Input amount must be an integer\");\n      let coinOut = new BinanceMessages.BinanceTransferMsg.BinanceCoin();\n      coinOut.setAmount(outputAmount.toString());\n      coinOut.setDenom(message.outputs[0].coins[0].denom);\n      let outputs = new BinanceMessages.BinanceTransferMsg.BinanceInputOutput();\n      outputs.setAddress(message.outputs[0].address);\n      outputs.setCoinsList([coinOut]);\n      let coinIn = new BinanceMessages.BinanceTransferMsg.BinanceCoin();\n      coinIn.setAmount(inputAmount.toString());\n      coinIn.setDenom(message.inputs[0].coins[0].denom);\n      let inputs = new BinanceMessages.BinanceTransferMsg.BinanceInputOutput();\n      inputs.setAddress(message.inputs[0].address);\n      inputs.setCoinsList([coinIn]);\n      const send = new BinanceMessages.BinanceTransferMsg();\n      send.addInputs(inputs);\n      send.addOutputs(outputs); //sent tx to device\n\n      resp = yield transport.call(Messages.MessageType.MESSAGETYPE_BINANCETRANSFERMSG, send, {\n        msgTimeout: core.LONG_TIMEOUT,\n        omitLock: true\n      });\n\n      if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_BINANCESIGNEDTX) {\n        throw new Error(`binance: unexpected response ${resp.message_type}`);\n      }\n\n      let signedTx = new BinanceMessages.BinanceSignedTx();\n      signedTx.setSignature(resp.message.signature);\n      signedTx.setPublicKey(resp.message.publicKey);\n      const serialized = bnbencoding_1.encodeBnbTx(tx, Buffer.from(signedTx.getPublicKey_asU8()), Buffer.from(signedTx.getSignature_asU8())).toString(\"hex\");\n      const out = Object.assign(Object.assign({}, tx), {\n        signatures: {\n          pub_key: signedTx.getPublicKey_asB64(),\n          signature: signedTx.getSignature_asB64()\n        },\n        serialized,\n        txid: crypto_js_1.default.SHA256(crypto_js_1.default.enc.Hex.parse(serialized)).toString()\n      });\n      return out;\n    }));\n  });\n}\n\nexports.binanceSignTx = binanceSignTx;\n\nfunction binanceGetAddress(transport, msg) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const getAddr = new BinanceMessages.BinanceGetAddress();\n    getAddr.setAddressNList(msg.addressNList);\n    getAddr.setShowDisplay(msg.showDisplay !== false);\n    const response = yield transport.call(Messages.MessageType.MESSAGETYPE_BINANCEGETADDRESS, getAddr, {\n      msgTimeout: core.LONG_TIMEOUT\n    });\n    const binanceAddress = response.proto;\n    return core.mustBeDefined(binanceAddress.getAddress());\n  });\n}\n\nexports.binanceGetAddress = binanceGetAddress;","map":{"version":3,"mappings":"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","names":["binanceGetAccountPaths","msg","addressNList","core","slip44ByCoin","accountIdx","exports","binanceSignTx","transport","lockDuring","__awaiter","testnet","Error","partialTx","Object","assign","tx","data","memo","sequence","source","account_number","chain_id","signTx","BinanceMessages","BinanceSignTx","setAddressNList","setAccountNumber","setChainId","setSequence","setMemo","msgs","length","message","setMsgCount","resp","call","Messages","MessageType","MESSAGETYPE_BINANCESIGNTX","msgTimeout","LONG_TIMEOUT","omitLock","outputAmount","bignumber_js_1","outputs","coins","amount","inputAmount","inputs","isInteger","coinOut","BinanceTransferMsg","BinanceCoin","setAmount","toString","setDenom","denom","BinanceInputOutput","setAddress","address","setCoinsList","coinIn","send","addInputs","addOutputs","MESSAGETYPE_BINANCETRANSFERMSG","message_enum","MESSAGETYPE_BINANCESIGNEDTX","message_type","signedTx","BinanceSignedTx","setSignature","signature","setPublicKey","publicKey","serialized","bnbencoding_1","Buffer","from","getPublicKey_asU8","getSignature_asU8","out","signatures","pub_key","getPublicKey_asB64","getSignature_asB64","txid","crypto_js_1","SHA256","enc","Hex","parse","binanceGetAddress","getAddr","BinanceGetAddress","setShowDisplay","showDisplay","response","MESSAGETYPE_BINANCEGETADDRESS","binanceAddress","proto","mustBeDefined","getAddress"],"sourceRoot":"","sources":["../src/binance.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}