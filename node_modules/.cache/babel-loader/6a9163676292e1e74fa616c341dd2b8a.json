{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar bcUrRegistryEth = require('@keystonehq/bc-ur-registry-eth');\n\nvar sdk = require('@keystonehq/sdk');\n\nvar sdk__default = _interopDefault(sdk);\n\nvar baseEthKeyring = require('@keystonehq/base-eth-keyring');\n\nclass DefaultInteractionProvider {\n  constructor() {\n    this.keystoneSDK = undefined;\n\n    this.readCryptoHDKey = async () => {\n      const decodedResult = await this.keystoneSDK.read([sdk.SupportedResult.UR_CRYPTO_HDKEY], {\n        title: 'Sync Keystone',\n        description: 'Please scan the QR code displayed on your Keystone',\n        renderInitial: {\n          walletMode: 'Web3',\n          link: 'https://keyst.one/defi'\n        },\n        URTypeErrorMessage: 'The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again ( Keystone firmware V1.3.0 or newer required).'\n      });\n\n      if (decodedResult.status === sdk.ReadStatus.success) {\n        const {\n          result\n        } = decodedResult;\n        const cryptoHDKey = bcUrRegistryEth.CryptoHDKey.fromCBOR(result.cbor);\n        return cryptoHDKey;\n      } else {\n        throw new Error('Reading canceled');\n      }\n    };\n\n    this.requestSignature = async (ethSignRequest, requestTitle, requestDescription) => {\n      const status = await this.keystoneSDK.play(ethSignRequest.toUR(), {\n        hasNext: true,\n        title: requestTitle,\n        description: requestDescription\n      });\n      if (status === sdk.PlayStatus.canceled) throw new Error('#ktek_error[play-cancel]: play canceled');\n      const result = await this.keystoneSDK.read([sdk.SupportedResult.UR_ETH_SIGNATURE], {\n        title: 'Scan Keystone',\n        description: 'Please scan the QR code displayed on your Keystone'\n      });\n\n      if (result.status === sdk.ReadStatus.canceled) {\n        throw new Error('#ktek_error[read-cancel]: read signature canceled');\n      } else {\n        return bcUrRegistryEth.ETHSignature.fromCBOR(result.result.cbor);\n      }\n    };\n\n    if (DefaultInteractionProvider.instance) {\n      return DefaultInteractionProvider.instance;\n    }\n\n    sdk__default.bootstrap();\n    this.keystoneSDK = sdk__default.getSdk();\n    DefaultInteractionProvider.instance = this;\n  }\n\n}\n\nclass DefaultKeyring extends baseEthKeyring.BaseKeyring {\n  constructor(opts) {\n    super(opts);\n\n    this.getInteraction = () => {\n      return new DefaultInteractionProvider();\n    };\n  }\n\n  static getEmptyKeyring() {\n    return new DefaultKeyring({\n      xfp: '',\n      xpub: '',\n      hdPath: '',\n      perPage: 5,\n      page: 0,\n      accounts: [],\n      currentAccount: 0,\n      paths: {}\n    });\n  }\n\n}\n\nDefaultKeyring.type = baseEthKeyring.BaseKeyring.type;\nexports.default = DefaultKeyring;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;MAIaA;AAITC;AAFQ,uBAAcC,SAAd;;AAWD,2BAAkB;AACrB,YAAMC,aAAa,GAAG,MAAM,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,CAACC,oBAAgBC,eAAjB,CAAtB,EAAyD;AACjFC,aAAK,EAAE,eAD0E;AAEjFC,mBAAW,EAAE,oDAFoE;AAGjFC,qBAAa,EAAE;AACXC,oBAAU,EAAE,MADD;AAEXC,cAAI,EAAE;AAFK,SAHkE;AAOjFC,0BAAkB,EACd;AAR6E,OAAzD,CAA5B;;AAUA,UAAIV,aAAa,CAACW,MAAdX,KAAyBY,eAAWC,OAAxC,EAAiD;AAC7C,cAAM;AAAEC;AAAF,YAAad,aAAnB;AACA,cAAMe,WAAW,GAAGC,4BAAYC,QAAZD,CAAqBF,MAAM,CAACI,IAA5BF,CAApB;AACA,eAAOD,WAAP;AAHJ,aAIO;AACH,cAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACH;AAjBE;;AAoBA,4BAAmB,OACtBC,cADsB,EAEtBC,YAFsB,EAGtBC,kBAHsB;AAKtB,YAAMX,MAAM,GAAG,MAAM,KAAKV,WAAL,CAAiBsB,IAAjB,CAAsBH,cAAc,CAACI,IAAfJ,EAAtB,EAA6C;AAC9DK,eAAO,EAAE,IADqD;AAE9DpB,aAAK,EAAEgB,YAFuD;AAG9Df,mBAAW,EAAEgB;AAHiD,OAA7C,CAArB;AAKA,UAAIX,MAAM,KAAKe,eAAWC,QAA1B,EAAoC,MAAM,IAAIR,KAAJ,CAAU,yCAAV,CAAN;AACpC,YAAML,MAAM,GAAG,MAAM,KAAKb,WAAL,CAAiBC,IAAjB,CAAsB,CAACC,oBAAgByB,gBAAjB,CAAtB,EAA0D;AAC3EvB,aAAK,EAAE,eADoE;AAE3EC,mBAAW,EAAE;AAF8D,OAA1D,CAArB;;AAIA,UAAIQ,MAAM,CAACH,MAAPG,KAAkBF,eAAWe,QAAjC,EAA2C;AACvC,cAAM,IAAIR,KAAJ,CAAU,mDAAV,CAAN;AADJ,aAEO;AACH,eAAOU,6BAAaZ,QAAbY,CAAsBf,MAAM,CAACA,MAAPA,CAAcI,IAApCW,CAAP;AACH;AAnBE;;AA5BH,QAAIhC,0BAA0B,CAACiC,QAA/B,EAAyC;AACrC,aAAOjC,0BAA0B,CAACiC,QAAlC;AACH;;AACDC,gBAAG,CAACC,SAAJD;AACA,SAAK9B,WAAL,GAAmB8B,YAAG,CAACE,MAAJF,EAAnB;AACAlC,8BAA0B,CAACiC,QAA3BjC,GAAsC,IAAtCA;AACH;;AAXQA;;MCDAqC,uBAAuBC;AAehCrC,cAAYsC,IAAZtC,EAAYsC;AACR,UAAMA,IAAN;;AAGJ,0BAAiB;AACb,aAAO,IAAIvC,0BAAJ,EAAP;AADJ;AAFC;;AAfqB,SAAfwC,eAAe;AAClB,WAAO,IAAIH,cAAJ,CAAmB;AACtBI,SAAG,EAAE,EADiB;AAEtBC,UAAI,EAAE,EAFgB;AAGtBC,YAAM,EAAE,EAHc;AAItBC,aAAO,EAAE,CAJa;AAKtBC,UAAI,EAAE,CALgB;AAMtBC,cAAQ,EAAE,EANY;AAOtBC,oBAAc,EAAE,CAPM;AAQtBC,WAAK,EAAE;AARe,KAAnB,CAAP;AAUH;;AAb+BV;;AACzBD,sBAAOC,2BAAYW,IAAnBZ","names":["DefaultInteractionProvider","constructor","undefined","decodedResult","keystoneSDK","read","SupportedResult","UR_CRYPTO_HDKEY","title","description","renderInitial","walletMode","link","URTypeErrorMessage","status","ReadStatus","success","result","cryptoHDKey","CryptoHDKey","fromCBOR","cbor","Error","ethSignRequest","requestTitle","requestDescription","play","toUR","hasNext","PlayStatus","canceled","UR_ETH_SIGNATURE","ETHSignature","instance","sdk","bootstrap","getSdk","DefaultKeyring","BaseKeyring","opts","getEmptyKeyring","xfp","xpub","hdPath","perPage","page","accounts","currentAccount","paths","type"],"sources":["../src/DefaultInteractionProvider.ts","../src/DefaultKeyring.ts"],"sourcesContent":["import { EthSignRequest, CryptoHDKey, ETHSignature } from '@keystonehq/bc-ur-registry-eth';\nimport { InteractionProvider } from '@keystonehq/base-eth-keyring';\nimport sdk, { SupportedResult, ReadStatus, PlayStatus } from '@keystonehq/sdk';\n\nexport class DefaultInteractionProvider implements InteractionProvider {\n    private static instance;\n    private keystoneSDK = undefined;\n\n    constructor() {\n        if (DefaultInteractionProvider.instance) {\n            return DefaultInteractionProvider.instance;\n        }\n        sdk.bootstrap();\n        this.keystoneSDK = sdk.getSdk();\n        DefaultInteractionProvider.instance = this;\n    }\n\n    public readCryptoHDKey = async () => {\n        const decodedResult = await this.keystoneSDK.read([SupportedResult.UR_CRYPTO_HDKEY], {\n            title: 'Sync Keystone',\n            description: 'Please scan the QR code displayed on your Keystone',\n            renderInitial: {\n                walletMode: 'Web3',\n                link: 'https://keyst.one/defi',\n            },\n            URTypeErrorMessage:\n                'The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again ( Keystone firmware V1.3.0 or newer required).',\n        });\n        if (decodedResult.status === ReadStatus.success) {\n            const { result } = decodedResult;\n            const cryptoHDKey = CryptoHDKey.fromCBOR(result.cbor);\n            return cryptoHDKey;\n        } else {\n            throw new Error('Reading canceled');\n        }\n    };\n\n    public requestSignature = async (\n        ethSignRequest: EthSignRequest,\n        requestTitle?: string,\n        requestDescription?: string,\n    ) => {\n        const status = await this.keystoneSDK.play(ethSignRequest.toUR(), {\n            hasNext: true,\n            title: requestTitle,\n            description: requestDescription,\n        });\n        if (status === PlayStatus.canceled) throw new Error('#ktek_error[play-cancel]: play canceled');\n        const result = await this.keystoneSDK.read([SupportedResult.UR_ETH_SIGNATURE], {\n            title: 'Scan Keystone',\n            description: 'Please scan the QR code displayed on your Keystone',\n        });\n        if (result.status === ReadStatus.canceled) {\n            throw new Error('#ktek_error[read-cancel]: read signature canceled');\n        } else {\n            return ETHSignature.fromCBOR(result.result.cbor);\n        }\n    };\n}\n","import { DefaultInteractionProvider } from './DefaultInteractionProvider';\nimport { BaseKeyring, StoredKeyring } from '@keystonehq/base-eth-keyring';\n\nexport class DefaultKeyring extends BaseKeyring {\n    static type = BaseKeyring.type;\n    static getEmptyKeyring(): DefaultKeyring {\n        return new DefaultKeyring({\n            xfp: '',\n            xpub: '',\n            hdPath: '',\n            perPage: 5,\n            page: 0,\n            accounts: [],\n            currentAccount: 0,\n            paths: {},\n        });\n    }\n\n    constructor(opts?: StoredKeyring) {\n        super(opts);\n    }\n\n    getInteraction = () => {\n        return new DefaultInteractionProvider();\n    };\n}\n"]},"metadata":{},"sourceType":"script"}