{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SafeAppProvider = void 0;\n\nconst events_1 = require(\"events\");\n\nconst utils_1 = require(\"./utils\"); // The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\n\n\nclass SafeAppProvider extends events_1.EventEmitter {\n  constructor(safe, sdk) {\n    super();\n    this.submittedTxs = new Map();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  async connect() {\n    this.emit('connect', {\n      chainId: this.chainId\n    });\n    return;\n  }\n\n  async disconnect() {\n    return;\n  }\n\n  get chainId() {\n    return this.safe.chainId;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  async request(request) {\n    const {\n      method,\n      params = []\n    } = request;\n\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n\n      case 'personal_sign':\n        {\n          const [message, address] = params;\n\n          if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n            throw new Error('The address or message hash is invalid');\n          }\n\n          await this.sdk.txs.signMessage(message);\n          return '0x';\n        }\n\n      case 'eth_sign':\n        {\n          const [address, messageHash] = params;\n\n          if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n            throw new Error('The address or message hash is invalid');\n          }\n\n          await this.sdk.txs.signMessage(messageHash);\n          return '0x';\n        }\n\n      case 'eth_sendTransaction':\n        const tx = Object.assign({\n          value: '0',\n          data: '0x'\n        }, params[0]);\n        const resp = await this.sdk.txs.send({\n          txs: [tx]\n        }); // Store fake transaction\n\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null\n        });\n        return resp.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n\n      case 'eth_getTransactionCount':\n        return this.sdk.eth.getTransactionCount([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([(0, utils_1.getLowerCase)(params[0]), params[1], params[2]]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {} // Use fake transaction if we don't have a real tx hash\n\n\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n\n        return this.sdk.eth.getTransactionByHash([txHash]).then(tx => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n\n          return tx;\n        });\n\n      case 'eth_getTransactionReceipt':\n        {\n          let txHash = params[0];\n\n          try {\n            const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n            txHash = resp.txHash || txHash;\n          } catch (e) {}\n\n          return this.sdk.eth.getTransactionReceipt([txHash]).then(tx => {\n            // We set the tx hash to the one requested, as some provider assert this\n            if (tx) {\n              tx.transactionHash = params[0];\n            }\n\n            return tx;\n          });\n        }\n\n      case 'eth_estimateGas':\n        {\n          return this.sdk.eth.getEstimateGas(params[0]);\n        }\n\n      case 'eth_call':\n        {\n          return this.sdk.eth.call([params[0], params[1]]);\n        }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      case 'eth_gasPrice':\n        return this.sdk.eth.getGasPrice();\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  } // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n\n\n  send(request, callback) {\n    if (!request) callback('Undefined request');\n    this.request(request).then(result => callback(null, {\n      jsonrpc: '2.0',\n      id: request.id,\n      result\n    })).catch(error => callback(error, null));\n  }\n\n}\n\nexports.SafeAppProvider = SafeAppProvider;","map":{"version":3,"mappings":"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","names":["SafeAppProvider","events_1","constructor","safe","sdk","Map","connect","emit","chainId","disconnect","request","method","params","safeAddress","toString","message","address","toLowerCase","Error","txs","signMessage","messageHash","startsWith","tx","value","data","resp","send","submittedTxs","set","safeTxHash","from","hash","gas","gasPrice","nonce","input","to","blockHash","blockNumber","transactionIndex","block","eth","getBlockByNumber","number","getBalance","getCode","getTransactionCount","getStorageAt","getBlockByHash","txHash","getBySafeTxHash","e","has","get","getTransactionByHash","then","getTransactionReceipt","transactionHash","getEstimateGas","call","getPastLogs","getGasPrice","callback","result","jsonrpc","id","catch","error","exports"],"sourceRoot":"","sources":["../src/provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}